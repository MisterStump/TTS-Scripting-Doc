{
    "docs": [
        {
            "location": "/",
            "text": "Introduction\n\u00b6\n\n\nWelcome to \nLua Scripting\n in Tabletop Simulator! Scripting is an advanced feature and it\u2019s expected you already know something about it. However, for complete novices, check out this \nbeginners scripting guide to Lua\n created by MrStump, to help you along the way.\n\n\n\n\nA game is composed of one Global Script and zero to many Object Scripts. The Global Script is a script that lives in your game that can run background tasks and do general game management type functions. Object scripts are attached to an individual object. Objects are anything with a physical model in the game - chess piece, dice, decks, cards, bags, custom models, boards, etc. Both types of scripts can call the same functions, but Object scripts have access to a reference of the Object it is attached to with the \nself\n keyword.\n\n\nResources\n\u00b6\n\n\nYou are able to follow the links on the left side of the page for available tools to help utiliz and learn the basics of scripting. When at the top of the page, you will see a link to the Lua API for documentation on all of the available Tabletop Simulator Lua functionality. Links on the right side of the page help navigate the article you are viewing.\n\n\nWriting Lua Scripts\n\u00b6\n\n\nThe Lua code is written via our in-game code editor or via our \nOfficial Plugin for the Atom Text Editor\n. Lua scripts are stored in the .json file of the save game as a plain text string. There is no need for an external internet host for Lua scripts, everything is self-contained in your game\u2019s save file. Workshop uploads work the same way.",
            "title": "Introduction"
        },
        {
            "location": "/#introduction",
            "text": "Welcome to  Lua Scripting  in Tabletop Simulator! Scripting is an advanced feature and it\u2019s expected you already know something about it. However, for complete novices, check out this  beginners scripting guide to Lua  created by MrStump, to help you along the way.   A game is composed of one Global Script and zero to many Object Scripts. The Global Script is a script that lives in your game that can run background tasks and do general game management type functions. Object scripts are attached to an individual object. Objects are anything with a physical model in the game - chess piece, dice, decks, cards, bags, custom models, boards, etc. Both types of scripts can call the same functions, but Object scripts have access to a reference of the Object it is attached to with the  self  keyword.",
            "title": "Introduction"
        },
        {
            "location": "/#resources",
            "text": "You are able to follow the links on the left side of the page for available tools to help utiliz and learn the basics of scripting. When at the top of the page, you will see a link to the Lua API for documentation on all of the available Tabletop Simulator Lua functionality. Links on the right side of the page help navigate the article you are viewing.",
            "title": "Resources"
        },
        {
            "location": "/#writing-lua-scripts",
            "text": "The Lua code is written via our in-game code editor or via our  Official Plugin for the Atom Text Editor . Lua scripts are stored in the .json file of the save game as a plain text string. There is no need for an external internet host for Lua scripts, everything is self-contained in your game\u2019s save file. Workshop uploads work the same way.",
            "title": "Writing Lua Scripts"
        },
        {
            "location": "/overview/",
            "text": "Available scripting methods\n\u00b6\n\n\nIn-Game Lua Editor\n\u00b6\n\n\nYou can access the in-game Lua Editor by clicking on \nHost -> Scripting\n or by right clicking on an object, choosing Scripting, and then selecting Lua Editor from the contextual menu. In the Lua Editor, the tabs on the left of the editor let you switch between the Global and the Object scripts. Once your Lua code is written, you can use the \nSave and Play\n button to commit your changes to your save file and reload for quick iteration. \nSave and Play\n will only commit your script changes, any changes made that weren't scripting will be lost.\n\n\nThe advantage of this method is it requires no additional setup. However it lacks many features included in some of the other options.\n\n\n\n\nOfficial Atom Plugin\n\u00b6\n\n\nThe preferred method of writing Lua scripts is using our Official Plugin for the Atom Text Editor. It has all of the functionality of the in-game editor plus line numbers, syntax highlighting, autocomplete, and a modern look. \nClick here for setup instructions.\n\n\n\n\nExternal Editor API\n\u00b6\n\n\nIt is also possible to edit inside of other envionments which are not officially supported. Using the External Editor API it is possible to work in other enviornments (like Notepad++).\n\n\n\n\nWarning\n\n\nThis method does not, by default, include many features that Atom provides, like auto-completion of Tabletop Simulator functions/class members.\n\n\n\n\nLua Standard Libraries\n\u00b6\n\n\nWe include a subset of the Lua standard libraries into our interpreter to provide a safe sandbox for user scripts to run.\n\n\n\n\n\n\n\n\nLibrary\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBasic\n\n\nThe basic methods. Includes assert, collectgarbage, error, print, select, type, tonumber, and tostring.\n\n\n\n\n\n\nBit32\n\n\nThe bit32 package.\n\n\n\n\n\n\nCoroutine\n\n\nThe coroutine package.\n\n\n\n\n\n\nDynamic\n\n\nThe dynamic package (introduced by MoonSharp).\n\n\n\n\n\n\nErrorHandling\n\n\nThe error handling methods: pcall and xpcall.\n\n\n\n\n\n\nGlobalConsts\n\n\nThe global constants: _G, _VERSION, and _MOONSHARP.\n\n\n\n\n\n\nMath\n\n\nThe math package.\n\n\n\n\n\n\nMetatables\n\n\nThe metatable methods : setmetatable, getmetatable, rawset, rawget, rawequal, and rawlen.\n\n\n\n\n\n\nOS_Time\n\n\nThe time methods of the os package: clock, difftime, date, and time.\n\n\n\n\n\n\nString\n\n\nThe string package.\n\n\n\n\n\n\nTable\n\n\nThe table package.\n\n\n\n\n\n\nTableIterators\n\n\nThe table iterators: next, ipairs, and pairs.\n\n\n\n\n\n\n\n\nFor further information\n\u00b6\n\n\n\n\nOfficial Lua Website\n\n\nMoonSharp\n\n\n\n\nExample Mods\n\u00b6\n\n\n\n\nBlackJack\n\n\nChess Clock\n\n\nRoulette\n\n\nInteractable",
            "title": "Overview"
        },
        {
            "location": "/overview/#available-scripting-methods",
            "text": "",
            "title": "Available scripting methods"
        },
        {
            "location": "/overview/#in-game-lua-editor",
            "text": "You can access the in-game Lua Editor by clicking on  Host -> Scripting  or by right clicking on an object, choosing Scripting, and then selecting Lua Editor from the contextual menu. In the Lua Editor, the tabs on the left of the editor let you switch between the Global and the Object scripts. Once your Lua code is written, you can use the  Save and Play  button to commit your changes to your save file and reload for quick iteration.  Save and Play  will only commit your script changes, any changes made that weren't scripting will be lost.  The advantage of this method is it requires no additional setup. However it lacks many features included in some of the other options.",
            "title": "In-Game Lua Editor"
        },
        {
            "location": "/overview/#official-atom-plugin",
            "text": "The preferred method of writing Lua scripts is using our Official Plugin for the Atom Text Editor. It has all of the functionality of the in-game editor plus line numbers, syntax highlighting, autocomplete, and a modern look.  Click here for setup instructions.",
            "title": "Official Atom Plugin"
        },
        {
            "location": "/overview/#external-editor-api",
            "text": "It is also possible to edit inside of other envionments which are not officially supported. Using the External Editor API it is possible to work in other enviornments (like Notepad++).   Warning  This method does not, by default, include many features that Atom provides, like auto-completion of Tabletop Simulator functions/class members.",
            "title": "External Editor API"
        },
        {
            "location": "/overview/#lua-standard-libraries",
            "text": "We include a subset of the Lua standard libraries into our interpreter to provide a safe sandbox for user scripts to run.     Library  Description      Basic  The basic methods. Includes assert, collectgarbage, error, print, select, type, tonumber, and tostring.    Bit32  The bit32 package.    Coroutine  The coroutine package.    Dynamic  The dynamic package (introduced by MoonSharp).    ErrorHandling  The error handling methods: pcall and xpcall.    GlobalConsts  The global constants: _G, _VERSION, and _MOONSHARP.    Math  The math package.    Metatables  The metatable methods : setmetatable, getmetatable, rawset, rawget, rawequal, and rawlen.    OS_Time  The time methods of the os package: clock, difftime, date, and time.    String  The string package.    Table  The table package.    TableIterators  The table iterators: next, ipairs, and pairs.",
            "title": "Lua Standard Libraries"
        },
        {
            "location": "/overview/#for-further-information",
            "text": "Official Lua Website  MoonSharp",
            "title": "For further information"
        },
        {
            "location": "/overview/#example-mods",
            "text": "BlackJack  Chess Clock  Roulette  Interactable",
            "title": "Example Mods"
        },
        {
            "location": "/atom/",
            "text": "Atom is a free, open source, and cross-platform text editor created by \nGitHub\n:\n\n\n\n\nAtom is a text editor that's modern, approachable, yet hackable to the core - a tool you can customize to do anything but also use productively without ever touching a config file.\n\n\n\n\nWe created an official plugin for the Atom text editor to make writing Lua scripts for Tabletop Simulator super easy and fun!\n\n\nThis page provides a basic overview of how to install and use the plugin; if you would like a more in-depth explanation of its features and how to install/use it then please \nsee its documentation\n.\n\n\nOur official plugin introduces syntax highlighting, code autocompletion for the Tabletop Simulator Lua API, and functions to interact with the game. The in-game editor will continue to exist for quick access to scripts, but development on it will cease to continue.\n\n\nPrefer another text editor? Take look at our \nExternal Editor API\n to make your own plugin.\n\n\nFeatures\n\u00b6\n\n\nThis is only a summarized list of features Atom offers. Check out a more complete documentation on the plugin specifically in the \nplugin wiki\n.\n\n\nSyntax Highlighting\n\u00b6\n\n\nAll standard Lua syntax is highlighted in multiple colors to help with readability.\n\n\n\n\nCode Autocompletion\n\u00b6\n\n\nThe entire Tabletop Simulator Lua Scripting API (with the exception of the Player class) has been added to the native Atom autocomplete system. Easily see all of the member variables and functions available to you with their parameters, return type, short description, and a link directly to our Knowledge Base with more information for that variable or function. Functions belonging to the Lua standard library classes such as math, coroutine, or os link directly to the official Lua documentation.\n\n\n\n\nTabletop Simulator Interactivity\n\u00b6\n\n\nThe Atom plugin can directly connect to a running instance of Tabletop Simulator to get all of the existing Lua scripts on Objects and to call Save & Play. Both functions can be called directly from the Packages menu or the right click contextual menu. TTS must be running with the game loaded for these functions to work.\n\n\n\n\n\n\n\n\nCommand\n\n\nAction Taken\n\n\n\n\n\n\n\n\n\n\nGet Lua Scripts\n\n\nDownloads all existing scripts in a loaded Tabletop Simulator game with Atom. You will need to call Get Lua Scripts every time you change to a different game in TTS.\n\n\n\n\n\n\nSave & Play\n\n\nSaves all Lua files in Atom, uploads them to a loaded Tabletop Simulator game, and reloads the current game (same as Save & Play in the in-game editor).\n\n\n\n\n\n\n\n\n\n\n\n\n\nEvery time you start up Atom, the cached local *.lua files are deleted.\n\n\n\n\nInstalling Atom\n\u00b6\n\n\nDownload and install Atom \nfrom the official website\n.\n\n\nInstalling the Official Plugin\n\u00b6\n\n\n\n\nClick on File -> Settings\n\n\nSelect the Install tab in Settings\n\n\nType in tabletopsimulator-lua into the search field and press the Enter key or click the Packages button\n\n\nClick the blue Install button for the tabletopsimulator-lua package\n\n\n\n\n\n\nSetting Up Atom\n\u00b6\n\n\nTab Width\n\u00b6\n\n\nBy default, Tabletop Simulator scripts use a tab width of four spaces. You are not required to adhere to this spacing. By default, Atom has a tab width of two spaces. To optionally make Atom default to a tab width of four spaces:\n\n\n\n\nClick on File -> Settings\n\n\nSelect the Settings tab in Settings\n\n\nScroll down to Tab Length\n\n\nSet the Tab Length to 4\n\n\n\n\n\n\nTabls as Pipe Operators\n\u00b6\n\n\nTo enable tabs showing up as pipe operators \"|\" as an indent guide:\n\n\n\n\nClick on File -> Settings\n\n\nSelect the Settings tab in Settings\n\n\nScroll down to Show Indent Guide\n\n\nCheck Show Indent Guide\n\n\n\n\n\n\nUpdating Atom Plugin\n\u00b6\n\n\nThe plugin will automatically check for updates when Atom is started. If a new update is found, it will update itself. You will have to manually restart Atom for the new version of the plugin to be loaded. You can check Atom's console if it found an update (ctrl + alt + i).\n\n\nAtom Tips\n\u00b6\n\n\nThese are just a few basic tips to help get the most out of Atom.\n\n\n\n\nPrint Messages\n\n\nAll print() functions automatically send their messages to Atom's console (ctrl + alt + i).\n\n\n\n\n\n\nError Messages\n\n\nAll Lua errors are automatically sent to Atom's console (ctrl + alt + i).\n\n\n\n\n\n\nQuick Save + Play\n\n\nHitting Ctrl + Shift + S will trigger Save & Play.",
            "title": "Atom"
        },
        {
            "location": "/atom/#features",
            "text": "This is only a summarized list of features Atom offers. Check out a more complete documentation on the plugin specifically in the  plugin wiki .",
            "title": "Features"
        },
        {
            "location": "/atom/#syntax-highlighting",
            "text": "All standard Lua syntax is highlighted in multiple colors to help with readability.",
            "title": "Syntax Highlighting"
        },
        {
            "location": "/atom/#code-autocompletion",
            "text": "The entire Tabletop Simulator Lua Scripting API (with the exception of the Player class) has been added to the native Atom autocomplete system. Easily see all of the member variables and functions available to you with their parameters, return type, short description, and a link directly to our Knowledge Base with more information for that variable or function. Functions belonging to the Lua standard library classes such as math, coroutine, or os link directly to the official Lua documentation.",
            "title": "Code Autocompletion"
        },
        {
            "location": "/atom/#tabletop-simulator-interactivity",
            "text": "The Atom plugin can directly connect to a running instance of Tabletop Simulator to get all of the existing Lua scripts on Objects and to call Save & Play. Both functions can be called directly from the Packages menu or the right click contextual menu. TTS must be running with the game loaded for these functions to work.     Command  Action Taken      Get Lua Scripts  Downloads all existing scripts in a loaded Tabletop Simulator game with Atom. You will need to call Get Lua Scripts every time you change to a different game in TTS.    Save & Play  Saves all Lua files in Atom, uploads them to a loaded Tabletop Simulator game, and reloads the current game (same as Save & Play in the in-game editor).       \nEvery time you start up Atom, the cached local *.lua files are deleted.",
            "title": "Tabletop Simulator Interactivity"
        },
        {
            "location": "/atom/#installing-atom",
            "text": "Download and install Atom  from the official website .",
            "title": "Installing Atom"
        },
        {
            "location": "/atom/#installing-the-official-plugin",
            "text": "Click on File -> Settings  Select the Install tab in Settings  Type in tabletopsimulator-lua into the search field and press the Enter key or click the Packages button  Click the blue Install button for the tabletopsimulator-lua package",
            "title": "Installing the Official Plugin"
        },
        {
            "location": "/atom/#setting-up-atom",
            "text": "",
            "title": "Setting Up Atom"
        },
        {
            "location": "/atom/#tab-width",
            "text": "By default, Tabletop Simulator scripts use a tab width of four spaces. You are not required to adhere to this spacing. By default, Atom has a tab width of two spaces. To optionally make Atom default to a tab width of four spaces:   Click on File -> Settings  Select the Settings tab in Settings  Scroll down to Tab Length  Set the Tab Length to 4",
            "title": "Tab Width"
        },
        {
            "location": "/atom/#tabls-as-pipe-operators",
            "text": "To enable tabs showing up as pipe operators \"|\" as an indent guide:   Click on File -> Settings  Select the Settings tab in Settings  Scroll down to Show Indent Guide  Check Show Indent Guide",
            "title": "Tabls as Pipe Operators"
        },
        {
            "location": "/atom/#updating-atom-plugin",
            "text": "The plugin will automatically check for updates when Atom is started. If a new update is found, it will update itself. You will have to manually restart Atom for the new version of the plugin to be loaded. You can check Atom's console if it found an update (ctrl + alt + i).",
            "title": "Updating Atom Plugin"
        },
        {
            "location": "/atom/#atom-tips",
            "text": "These are just a few basic tips to help get the most out of Atom.   Print Messages  All print() functions automatically send their messages to Atom's console (ctrl + alt + i).    Error Messages  All Lua errors are automatically sent to Atom's console (ctrl + alt + i).    Quick Save + Play  Hitting Ctrl + Shift + S will trigger Save & Play.",
            "title": "Atom Tips"
        },
        {
            "location": "/externaleditorapi/",
            "text": "This page describes how our \nOfficial Atom Plugin\n API works so that you can write your own plugin for your text editor of choice if Atom does not suit your needs. The plugin communicates with Tabletop Simulator via two localhost TCP connections - one for each system acting as a server and the other as a client and vice versa. All communication messages are JSON.\n\n\nTabletop Simulator as the Server\n\u00b6\n\n\n\n\nTTS listens for incoming localhost TCP connections on port 39999.\n\n\n\n\nGet Lua Scripts\n\u00b6\n\n\nAtom sends a JSON message with an ID of 0.\n\n\n{\n\n    \n\"messageID\"\n:\n \n0\n\n\n}\n\n\n\n\n\nTTS sends back a JSON message with an ID of 0 and an array of the Lua Scripts.\n\n\n{\n\n    \n\"messageID\"\n:\n \n0\n,\n\n    \n\"scriptStates\"\n:\n \n[\n\n        \n{\n\n            \n\"name\"\n:\n \n\"Global\"\n,\n\n            \n\"guid\"\n:\n \n\"-1\"\n,\n\n            \n\"script\"\n:\n \n\"...\"\n\n        \n},\n\n        \n{\n\n            \n\"name\"\n:\n \n\"BlackJack Dealer's Deck\"\n,\n\n            \n\"guid\"\n:\n \n\"a0b2d5\"\n,\n\n            \n\"script\"\n:\n \n\"...\"\n\n        \n},\n\n        \n...\n\n    \n]\n\n\n}\n\n\n\n\n\nSave & Play\n\u00b6\n\n\nAtom sends a JSON message with an ID of 1 and an array of the Lua Scripts.\n\n\n{\n\n    \n\"messageID\"\n:\n \n1\n,\n\n    \n\"scriptStates\"\n:\n \n[\n\n        \n{\n\n            \n\"guid\"\n:\n \n\"-1\"\n,\n\n            \n\"script\"\n:\n \n\"...\"\n\n        \n},\n\n        \n{\n\n            \n\"guid\"\n:\n \n\"a0b2d5\"\n,\n\n            \n\"script\"\n:\n \n\"...\"\n\n        \n},\n\n        \n...\n\n    \n]\n\n\n}\n\n\n\n\n\nAtom as the Server\n\u00b6\n\n\n\n\nAtom listens for incoming localhost TCP connections on port 39998.\n\n\n\n\nPushing New Object\n\u00b6\n\n\nWhen clicking on \"Lua Editor\" in the right click contextual menu in-game for an Object that doesn't have a Lua Script yet, it will try to open a new tab in Atom for this Object before falling back to the in-game editor if Atom is not running. TTS sends a JSON message with an ID of 0 and the new Object.\n\n\n{\n\n    \n\"messageID\"\n:\n \n0\n,\n\n    \n\"scriptStates\"\n:\n \n[\n\n        \n{\n\n            \n\"name\"\n:\n \n\"Chess Pawn\"\n,\n\n            \n\"guid\"\n:\n \n\"db3f06\"\n,\n\n            \n\"script\"\n:\n \n\"\"\n\n        \n}\n\n    \n]\n\n\n}\n\n\n\n\n\nLoading a New Game\n\u00b6\n\n\nWhen loading a new game in TTS, TTS will automatically send all the Lua Scripts from the new game to Atom. TTS sends a JSON message with an ID of 1 and an array of the Lua Scripts.\n\n\n{\n\n    \n\"messageID\"\n:\n \n1\n,\n\n    \n\"scriptStates\"\n:\n \n[\n\n        \n{\n\n            \n\"name\"\n:\n \n\"Global\"\n,\n\n            \n\"guid\"\n:\n \n\"-1\"\n,\n\n            \n\"script\"\n:\n \n\"...\"\n\n        \n},\n\n        \n{\n\n            \n\"name\"\n:\n \n\"BlackJack Dealer's Deck\"\n,\n\n            \n\"guid\"\n:\n \n\"a0b2d5\"\n,\n\n            \n\"script\"\n:\n \n\"...\"\n\n        \n},\n\n        \n...\n\n    \n]\n\n\n}\n\n\n\n\n\nPrint/Debug Messages\n\u00b6\n\n\nTTS sends all print() messages to Atom to be displayed in Atom's console (ctrl + alt + i). TTS sends a JSON message with an ID of 2 and the message.\n\n\n{\n\n    \n\"messageID\"\n:\n \n2\n,\n\n    \n\"message\"\n:\n \n\"Hit player! White\"\n\n\n}\n\n\n\n\n\nError Messages\n\u00b6\n\n\nTTS sends all Lua error messages to Atom to be displayed in Atom's console \n(ctrl + alt + i)\n. TTS sends a JSON message with an ID of 3 and the error message.\n\n\n{\n\n    \n\"messageID\"\n:\n \n3\n,\n\n    \n\"error\"\n:\n \n\"chunk_0:(36,4-8): unexpected symbol near 'deck'\"\n,\n\n    \n\"guid\"\n:\n \n\"-1\"\n,\n\n    \n\"errorMessagePrefix\"\n:\n \n\"Error in Global Script: \"\n\n\n}",
            "title": "External Editor AP"
        },
        {
            "location": "/externaleditorapi/#tabletop-simulator-as-the-server",
            "text": "TTS listens for incoming localhost TCP connections on port 39999.",
            "title": "Tabletop Simulator as the Server"
        },
        {
            "location": "/externaleditorapi/#get-lua-scripts",
            "text": "Atom sends a JSON message with an ID of 0.  { \n     \"messageID\" :   0  }   TTS sends back a JSON message with an ID of 0 and an array of the Lua Scripts.  { \n     \"messageID\" :   0 , \n     \"scriptStates\" :   [ \n         { \n             \"name\" :   \"Global\" , \n             \"guid\" :   \"-1\" , \n             \"script\" :   \"...\" \n         }, \n         { \n             \"name\" :   \"BlackJack Dealer's Deck\" , \n             \"guid\" :   \"a0b2d5\" , \n             \"script\" :   \"...\" \n         }, \n         ... \n     ]  }",
            "title": "Get Lua Scripts"
        },
        {
            "location": "/externaleditorapi/#save-play",
            "text": "Atom sends a JSON message with an ID of 1 and an array of the Lua Scripts.  { \n     \"messageID\" :   1 , \n     \"scriptStates\" :   [ \n         { \n             \"guid\" :   \"-1\" , \n             \"script\" :   \"...\" \n         }, \n         { \n             \"guid\" :   \"a0b2d5\" , \n             \"script\" :   \"...\" \n         }, \n         ... \n     ]  }",
            "title": "Save &amp; Play"
        },
        {
            "location": "/externaleditorapi/#atom-as-the-server",
            "text": "Atom listens for incoming localhost TCP connections on port 39998.",
            "title": "Atom as the Server"
        },
        {
            "location": "/externaleditorapi/#pushing-new-object",
            "text": "When clicking on \"Lua Editor\" in the right click contextual menu in-game for an Object that doesn't have a Lua Script yet, it will try to open a new tab in Atom for this Object before falling back to the in-game editor if Atom is not running. TTS sends a JSON message with an ID of 0 and the new Object.  { \n     \"messageID\" :   0 , \n     \"scriptStates\" :   [ \n         { \n             \"name\" :   \"Chess Pawn\" , \n             \"guid\" :   \"db3f06\" , \n             \"script\" :   \"\" \n         } \n     ]  }",
            "title": "Pushing New Object"
        },
        {
            "location": "/externaleditorapi/#loading-a-new-game",
            "text": "When loading a new game in TTS, TTS will automatically send all the Lua Scripts from the new game to Atom. TTS sends a JSON message with an ID of 1 and an array of the Lua Scripts.  { \n     \"messageID\" :   1 , \n     \"scriptStates\" :   [ \n         { \n             \"name\" :   \"Global\" , \n             \"guid\" :   \"-1\" , \n             \"script\" :   \"...\" \n         }, \n         { \n             \"name\" :   \"BlackJack Dealer's Deck\" , \n             \"guid\" :   \"a0b2d5\" , \n             \"script\" :   \"...\" \n         }, \n         ... \n     ]  }",
            "title": "Loading a New Game"
        },
        {
            "location": "/externaleditorapi/#printdebug-messages",
            "text": "TTS sends all print() messages to Atom to be displayed in Atom's console (ctrl + alt + i). TTS sends a JSON message with an ID of 2 and the message.  { \n     \"messageID\" :   2 , \n     \"message\" :   \"Hit player! White\"  }",
            "title": "Print/Debug Messages"
        },
        {
            "location": "/externaleditorapi/#error-messages",
            "text": "TTS sends all Lua error messages to Atom to be displayed in Atom's console  (ctrl + alt + i) . TTS sends a JSON message with an ID of 3 and the error message.  { \n     \"messageID\" :   3 , \n     \"error\" :   \"chunk_0:(36,4-8): unexpected symbol near 'deck'\" , \n     \"guid\" :   \"-1\" , \n     \"errorMessagePrefix\" :   \"Error in Global Script: \"  }",
            "title": "Error Messages"
        },
        {
            "location": "/luaapi/",
            "text": "In this section, you will find details on all events/classes/functions specific to Tabletop Simulator's Lua scripting. For more general information on how the scripting language of Lua works and what it does on its own, you can review the \nonline documentation\n. \n\n\n\n\nTODO:\n\n\n\n\nAdd more here on how this docu is set up\n\n\nLink to the tutorial in the top message once I input it\n\n\nInstructions on how to modify if they think changes are needed.",
            "title": "Introduction"
        },
        {
            "location": "/typeandclass/",
            "text": "Type\n\u00b6\n\n\nType refers to the type of information. You do not need to declare the type in Lua, but in this API you will see them indicated. This is only so you know what kind of information is required in a given variable/parameter. This API utilizes the following types.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nnil\n\n\nNo value.\n\n\nnil\n\n\n\n\n\n\nint\n\n\nNon-decimal value.\n\n\n5\n\n\n\n\n\n\nfloat\n\n\nNon-exact decimal value.\n\n\n2.032\n\n\n\n\n\n\nbool\n\n\ntrue\n or \nfalse\n value.\n\n\ntrue\n\n\n\n\n\n\nstring\n\n\nA series of characters.\n\n\n\"Hello.\"\n\n\n\n\n\n\ntable\n\n\nA container with keys and values.\n\n\n{[\n\"key\"\n]\n=\n\"value\"\n,\n \ntrue\n,\n \n5\n}\n\n\n\n\n\n\n\n\nFor more information what types are, you can refer to the relevant \nLua documentation\n.\n\n\n\n\nClass\n\u00b6\n\n\nDefining class requires further knowledge on object-oriented programming to really understand. However for the purposes of Tabletop Simulator Lua scripting, you can think of a class as a standard or collection that handles categories of objects.\n\n\nClasses\n\u00b6\n\n\nAssociated with in-game Objects.\n\n\n\n\nClock\n\n\nCounter\n\n\nObject\n\n\nAssetBundle\n\n\nRPGFigurine\n\n\nTextTool\n\n\n\n\nStatic Classes\n\u00b6\n\n\nAssociated with in-game properties and systems.\n\n\n\n\nJSON\n\n\nPlayer\n\n\nTimer\n\n\nWebRequest\n\n\nPhysics\n\n\nLighting\n\n\n\n\nFor more information on what a class is, you can refer to the relevant \nLua Documentation\n.\n\n\n\n\nSpecial Standards\n\u00b6\n\n\nThere are two Table types that are used often in Tabletop Simulator. They represent Vectors and Colors, and have special formatting rules to be understood by the many functions that utilize them.\n\n\nColor\n\u00b6\n\n\nColor is a type of Table that is used to define a color.\n\n\nKeys\n\u00b6\n\n\nThe Table will contain the keys \nr\n, \ng\n, \nb\n, \na\n and/or \n1\n, \n2\n, \n3\n, \n4\n. The letter and numeric keys are duplicates of each other, and each represents a color or transparency.\n\n\n\n\n\n\n\n\nColor\n\n\nLetter Key\n\n\nNumber Key\n\n\n\n\n\n\n\n\n\n\nred\n\n\nr\n\n\n1\n\n\n\n\n\n\ngreen\n\n\ng\n\n\n2\n\n\n\n\n\n\nblue\n\n\nb\n\n\n3\n\n\n\n\n\n\nalpha\n\n\na\n\n\n4\n\n\n\n\n\n\n\n\nAs an example, an Object with a white color tint would return this table:\n\n{\n\n    \nr\n \n=\n \n1\n,\n\n    \ng\n \n=\n \n1\n,\n\n    \nb\n \n=\n \n1\n,\n\n    \n1\n \n=\n \n1\n,\n\n    \n2\n \n=\n \n1\n,\n\n    \n3\n \n=\n \n1\n,\n\n\n}\n\n\n\n\nNotice it does not contain the \na\n or \n4\n keys. This is because currently only scripted buttons and scripted inputs utilize the alpha channel (transparency).\n\n\n\n\nMixed Keys\n\u00b6\n\n\nOnly one type of key, number or letter, is required. If both a are present in a Table, the numeric key is ignored and only the \nletter key\n is used.\n\n\n--Valid Table for red\n\n\n{\nr\n=\n1\n,\n \ng\n=\n0\n,\n \nb\n=\n0\n}\n\n\n--Valid Table for blue\n\n\n{\n0\n,\n \n0\n,\n \n1\n}\n\n\n--This Table would be red.\n\n\n{\nr\n=\n1\n,\n \ng\n=\n0\n,\n \nb\n=\n0\n,\n \n0\n,\n \n0\n,\n \n1\n}\n\n\n\n\n\nValue\n\u00b6\n\n\nValues are between 0 and 1 for each key. If you are using RGB color that is in 0-255, you can use simple math to convert to the proper value.\n\n--To display a color that is r=50, b=83, g=199\n\n\nself\n.\nsetColorTint\n({\n50\n/\n255\n,\n \n83\n/\n255\n,\n \n199\n/\n255\n})\n\n\n\n\n\n\nVector\n\u00b6\n\n\nVector is a type of Table that is used to define a position, rotation or direction. \n\n\nKeys\n\u00b6\n\n\nThe Table will contain the keys \nx\n, \ny\n, \nz\n and/or \n1\n, \n2\n, \n3\n. The letter and numeric keys are duplicates of each other.\n\n\n\n\n\n\n\n\nLetter Key\n\n\nNumber Key\n\n\n\n\n\n\n\n\n\n\nx\n\n\n1\n\n\n\n\n\n\ny\n\n\n2\n\n\n\n\n\n\nz\n\n\n3\n\n\n\n\n\n\n\n\nAs an example, An Object at coordinate X=5, Y=2, Z=-1 would return this table:\n\n{\n\n    \nx\n \n=\n \n5\n,\n\n    \ny\n \n=\n \n2\n,\n\n    \nz\n \n=\n \n-\n1\n,\n\n    \n1\n \n=\n \n5\n,\n\n    \n2\n \n=\n \n2\n,\n\n    \n3\n \n=\n \n-\n1\n,\n\n\n}\n\n\n\n\n\n\nMixed Keys\n\u00b6\n\n\nOnly one type of key, number or letter, is required. If both a are present in a Table, the numeric key is ignored and only the \nletter key\n is used.\n\n\n--Valid Table for 1 to the right\n\n\n{\nx\n=\n1\n,\n \ny\n=\n0\n,\n \nz\n=\n0\n}\n\n\n--Valid Table for 1 unit forward\n\n\n{\n0\n,\n \n0\n,\n \n1\n}\n\n\n--This Table would be for 1 unit to the right.\n\n\n{\nx\n=\n1\n,\n \ny\n=\n0\n,\n \nz\n=\n0\n,\n \n0\n,\n \n0\n,\n \n1\n}\n\n\n\n\n\n\n\nValue Range\n\u00b6\n\n\nThe range of values depend on the type of Vector you are using.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRange\n\n\n\n\n\n\n\n\n\n\nPosition\n\n\nA point in space.\n\n\nAny number within the bounds of the world.\n\n\n\n\n\n\nRotation\n\n\nAngle, in degrees.\n\n\n-180 to 180.\n\n\n\n\n\n\nDirection\n\n\nVector direction.\n\n\n-1 to 1.\n\n\n\n\n\n\n\n\n\n\nType Details\n\u00b6\n\n\nPosition\n\u00b6\n\n\nX is right/left, Y is up/down, Z is forward/back. A positional Vector can be either world or local. Most of Tabletop Simulator's functions use world positional Vectors.\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nWorld\n\n\nThe center of the instance is \n{x=0, y=0, z=0}\n. That is usually near the tabletop's center.\n\n\n\n\n\n\nLocal\n\n\nThe center of the Object's model is \n{x=0, y=0, z=0}\n. The center of an Object is determined by the model's creator.\n\n\n\n\n\n\n\n\nConversion Between World/Local\npositionToWorld(...)\n and \npositionToLocal(...)\n can be used to convert between the two types.\nRotation\n\u00b6\n\n\nX is pitch (nodding your head), Y is yaw (shaking you head), Z is roll (tilting your head).\n\n\nDirection\n\u00b6\n\n\nX is right/left, Y is up/down, Z is forward/back.",
            "title": "Type and Class"
        },
        {
            "location": "/typeandclass/#type",
            "text": "Type refers to the type of information. You do not need to declare the type in Lua, but in this API you will see them indicated. This is only so you know what kind of information is required in a given variable/parameter. This API utilizes the following types.     Type  Description  Example      nil  No value.  nil    int  Non-decimal value.  5    float  Non-exact decimal value.  2.032    bool  true  or  false  value.  true    string  A series of characters.  \"Hello.\"    table  A container with keys and values.  {[ \"key\" ] = \"value\" ,   true ,   5 }     For more information what types are, you can refer to the relevant  Lua documentation .",
            "title": "Type"
        },
        {
            "location": "/typeandclass/#class",
            "text": "Defining class requires further knowledge on object-oriented programming to really understand. However for the purposes of Tabletop Simulator Lua scripting, you can think of a class as a standard or collection that handles categories of objects.",
            "title": "Class"
        },
        {
            "location": "/typeandclass/#classes",
            "text": "Associated with in-game Objects.   Clock  Counter  Object  AssetBundle  RPGFigurine  TextTool",
            "title": "Classes"
        },
        {
            "location": "/typeandclass/#static-classes",
            "text": "Associated with in-game properties and systems.   JSON  Player  Timer  WebRequest  Physics  Lighting   For more information on what a class is, you can refer to the relevant  Lua Documentation .",
            "title": "Static Classes"
        },
        {
            "location": "/typeandclass/#special-standards",
            "text": "There are two Table types that are used often in Tabletop Simulator. They represent Vectors and Colors, and have special formatting rules to be understood by the many functions that utilize them.",
            "title": "Special Standards"
        },
        {
            "location": "/typeandclass/#color",
            "text": "Color is a type of Table that is used to define a color.",
            "title": "Color"
        },
        {
            "location": "/typeandclass/#keys",
            "text": "The Table will contain the keys  r ,  g ,  b ,  a  and/or  1 ,  2 ,  3 ,  4 . The letter and numeric keys are duplicates of each other, and each represents a color or transparency.     Color  Letter Key  Number Key      red  r  1    green  g  2    blue  b  3    alpha  a  4     As an example, an Object with a white color tint would return this table: { \n     r   =   1 , \n     g   =   1 , \n     b   =   1 , \n     1   =   1 , \n     2   =   1 , \n     3   =   1 ,  }   Notice it does not contain the  a  or  4  keys. This is because currently only scripted buttons and scripted inputs utilize the alpha channel (transparency).",
            "title": "Keys"
        },
        {
            "location": "/typeandclass/#mixed-keys",
            "text": "Only one type of key, number or letter, is required. If both a are present in a Table, the numeric key is ignored and only the  letter key  is used.  --Valid Table for red  { r = 1 ,   g = 0 ,   b = 0 }  --Valid Table for blue  { 0 ,   0 ,   1 }  --This Table would be red.  { r = 1 ,   g = 0 ,   b = 0 ,   0 ,   0 ,   1 }",
            "title": "Mixed Keys"
        },
        {
            "location": "/typeandclass/#value",
            "text": "Values are between 0 and 1 for each key. If you are using RGB color that is in 0-255, you can use simple math to convert to the proper value. --To display a color that is r=50, b=83, g=199  self . setColorTint ({ 50 / 255 ,   83 / 255 ,   199 / 255 })",
            "title": "Value"
        },
        {
            "location": "/typeandclass/#vector",
            "text": "Vector is a type of Table that is used to define a position, rotation or direction.",
            "title": "Vector"
        },
        {
            "location": "/typeandclass/#keys_1",
            "text": "The Table will contain the keys  x ,  y ,  z  and/or  1 ,  2 ,  3 . The letter and numeric keys are duplicates of each other.     Letter Key  Number Key      x  1    y  2    z  3     As an example, An Object at coordinate X=5, Y=2, Z=-1 would return this table: { \n     x   =   5 , \n     y   =   2 , \n     z   =   - 1 , \n     1   =   5 , \n     2   =   2 , \n     3   =   - 1 ,  }",
            "title": "Keys"
        },
        {
            "location": "/typeandclass/#mixed-keys_1",
            "text": "Only one type of key, number or letter, is required. If both a are present in a Table, the numeric key is ignored and only the  letter key  is used.  --Valid Table for 1 to the right  { x = 1 ,   y = 0 ,   z = 0 }  --Valid Table for 1 unit forward  { 0 ,   0 ,   1 }  --This Table would be for 1 unit to the right.  { x = 1 ,   y = 0 ,   z = 0 ,   0 ,   0 ,   1 }",
            "title": "Mixed Keys"
        },
        {
            "location": "/typeandclass/#value-range",
            "text": "The range of values depend on the type of Vector you are using.     Type  Description  Range      Position  A point in space.  Any number within the bounds of the world.    Rotation  Angle, in degrees.  -180 to 180.    Direction  Vector direction.  -1 to 1.",
            "title": "Value Range"
        },
        {
            "location": "/typeandclass/#type-details",
            "text": "",
            "title": "Type Details"
        },
        {
            "location": "/typeandclass/#position",
            "text": "X is right/left, Y is up/down, Z is forward/back. A positional Vector can be either world or local. Most of Tabletop Simulator's functions use world positional Vectors.     Type  Description      World  The center of the instance is  {x=0, y=0, z=0} . That is usually near the tabletop's center.    Local  The center of the Object's model is  {x=0, y=0, z=0} . The center of an Object is determined by the model's creator.     Conversion Between World/Local positionToWorld(...)  and  positionToLocal(...)  can be used to convert between the two types.",
            "title": "Position"
        },
        {
            "location": "/typeandclass/#rotation",
            "text": "X is pitch (nodding your head), Y is yaw (shaking you head), Z is roll (tilting your head).",
            "title": "Rotation"
        },
        {
            "location": "/typeandclass/#direction",
            "text": "X is right/left, Y is up/down, Z is forward/back.",
            "title": "Direction"
        },
        {
            "location": "/event/",
            "text": "Events are functions which are activated by Tabletop Simulator when something takes place in-game. It is possible to use all of them within scripts on Objects, and most will also work in Global scripts.\n\n\nFunction Summary\n\u00b6\n\n\nDefault Events (Global & Object)\n\u00b6\n\n\nThese are functions which are triggered by an event taking place in-game. They work when within the script of an Object or the Global script.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\ninfo_outline\n\n\n\n\n\n\n\n\n\n\nonChat(String message, Player)\n\n\nCalled when a chat message is sent in game chat.\n\n\ninfo_outline\n\n\n\n\n\n\nonConnect(Player)\n\n\nCalled when a \nPlayer\n connects to a game.\n\n\n\n\n\n\n\n\nonDisconnect(Player)\n\n\nCalled when a \nPlayer\n disconnects from a game.\n\n\n\n\n\n\n\n\nonExternalMessage(Table)\n\n\nCalled when an external script editor (like \nAtom\n) sends a message back to the game. Used for custom editor functionality.\n\n\ninfo_outline\n\n\n\n\n\n\nonFixedUpdate()\n\n\nCalled \nevery physics tick\n (90 times a second). This is a frame independent onUpdate().\n\n\ninfo_outline\n\n\n\n\n\n\nonLoad(String save_state)\n\n\nCalled when a game save is finished loading every Object. It is where most setup code will go.\n\n\ninfo_outline\n\n\n\n\n\n\nonObjectDestroy(Object dying_object)\n\n\nCalled whenever any object is destroyed.\n\n\ninfo_outline\n\n\n\n\n\n\nonObjectDrop\n(string player_color, Object dropped_object)\n\n\nCalled whenever any object is dropped by a player.\n\n\ninfo_outline\n\n\n\n\n\n\nonObjectEnterScriptingZone\n(Object zone, Object enter_object)\n\n\nCalled when any object enters any scripting zone.\n\n\ninfo_outline\n\n\n\n\n\n\nonObjectLeaveScriptingZone\n(Object zone, Object enter_object)\n\n\nCalled when any object leaves any scripting zone.\n\n\ninfo_outline\n\n\n\n\n\n\nonObjectLeaveContainer\n(Object container, Object leave_object)\n\n\nCalled when any object leaves any container.\n\n\ninfo_outline\n\n\n\n\n\n\nonObjectLoopingEffect\n(Object loop_object, Int index)\n\n\nCalled whenever the looping effect of an \nAssetBundle\n is activated.\n\n\ninfo_outline\n\n\n\n\n\n\nonObjectPickUp\n(String player_color, Object picked_up_object)\n\n\nCalled whenever a Player picks up an Object.\n\n\ninfo_outline\n\n\n\n\n\n\nonObjectRandomize\n(Object randomize_object, String player_color)\n\n\nCalled when an Object is randomized. Like when shuffling a deck or shaking dice.\n\n\ninfo_outline\n\n\n\n\n\n\nonObjectSpawn(Object spawn_object)\n\n\nCalled when any Object is spawned/created.\n\n\ninfo_outline\n\n\n\n\n\n\nonObjectTriggerEffect\n(Object trigger_object, Int index)\n\n\nCalled whenever the trigger effect of an \nAssetBundle\n is activated.\n\n\ninfo_outline\n\n\n\n\n\n\nonPlayerChangeColor(String \nplayer_color\n)\n\n\nCalled when a player changes color or selects it for the first time. It also returns \n\"Grey\"\n if they disconnect.\n\n\ninfo_outline\n\n\n\n\n\n\nonPlayerTurnEnd(String \nplayer_color_end\n,\nString \nplayer_color_next\n)\n\n\nCalled at the end of a player's turn when using the in-game turn system.\n\n\ninfo_outline\n\n\n\n\n\n\nonPlayerTurnStart(String \nplayer_color_start\n,\nString \nplayer_color_prev\n)\n\n\nCalled at the start of a player's turn when using the in-game turn system.\n\n\ninfo_outline\n\n\n\n\n\n\nonSave()\n\n\nCalled whenever your game is saved.\n\n\ninfo_outline\n\n\n\n\n\n\nonScriptingButtonDown\n(Int index, String \nplayer_color\n)\n\n\nCalled when a scripting button (numpad by default) is pressed. The index range that is returned is 1-10.\n\n\ninfo_outline\n\n\n\n\n\n\nonScriptingButtonUp\n(Int index, String \nplayer_color\n)\n\n\nCalled when a scripting button (numpad by default) is released. The index range that is returned is 1-10.\n\n\ninfo_outline\n\n\n\n\n\n\nonUpdate()\n\n\nCalled \nevery frame\n.\n\n\ninfo_outline\n\n\n\n\n\n\n\n\nDefault Events (Object Only)\n\u00b6\n\n\nThese are functions which are triggered by an event taking place in-game. They only work within scripts that are on Objects, never in Global.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nonCollisionEnter(Table collision_info)\n\n\nCalled when an Object starts colliding with the Object the function is on.\n\n\n\n\n\n\nonCollisionExit(Table collision_info)\n\n\nCalled when an Object stops colliding with the Object the function is on.\n\n\n\n\n\n\nonCollisionStay(Table collision_info)\n\n\nCalled \nevery frame\n that an Object is colliding with the Object this function is on.\n\n\n\n\n\n\nonDestroy()\n\n\nCalled when an Object it is on is destroyed.\n\n\n\n\n\n\nonDrop(String \nplayer_color\n)\n\n\nCalled when a player releases an Object after picking it up.\n\n\n\n\n\n\nonPickUp(String \nplayer_color\n)\n\n\nCalled when a player picks up an Object.\n\n\n\n\n\n\n\n\n\n\nFunction Details (Global & Object)\n\u00b6\n\n\nonChat(...)\n\u00b6\n\n\nThis function is called when a message is sent through the in-game chat. It does not trigger when global chat messages are sent. Using \nreturn\n \nfalse\n inside of this function prevents the chat message which triggered it to be supressed.\n\n\n\n\nonChat(String message, Player)\"\n\n\n\n\nString message\n: A String containing the chat message which triggered the function.\n\n\nPlayer\n: A reference to the Player which sent the chat message.\n\n\n\n\n\n\nfunction\n \nonChat\n(\nmessage\n,\n \nplayer\n)\n\n    \nprint\n(\nmessage\n)\n\n    \nprint\n(\nplayer\n.\ncolor\n)\n\n\nend\n\n\n\n\n\n\n\nonExternalMessage(...)\n\u00b6\n\n\nThis function is called when an external script editor (like \nAtom\n) sends a message back to the game. Used for custom editor functionality.\n\n\n\n\nonExternalMessage(Table)\n\n\n\n\nTable\n: The data returned by the external editor into the game.\n\n\n\n\n\n\nfunction\n \nonExternalMessage\n(\ndata\n)\n\n    \nprint\n(\n\"External message received\"\n)\n\n\nend\n\n\n\n\n\n\n\nonFixedUpdate()\n\u00b6\n\n\nCalled \nevery physics tick\n (90 times a second). This is a frame independent onUpdate(). | \ninfo_outline\n\n\n\n\nWarning\n\n\nThis is a very expensive function and can easily slow/crash your game if missused. Use with caution.\n\n\n\n\nfunction\n \nonFixedUpdate\n()\n\n    \nself\n.\naddTorque\n({\n0\n,\n100\n,\n0\n},\n \n1\n)\n\n\nend\n\n\n\n\n\nonLoad(...)\n\u00b6\n\n\nThis function is called when a game save is finished loading every Object. This is where most setup code will go. The fast-forward and rewind feature will also cause this function to activate. If this function is in an Object's script and that Object is spawned, like by removing it from a container, it too will trigger onLoad().\n\n\n\n\nonLoad(String save_state)\n\n\n\n\nString save_state\n: The encoded string containing any save_state (saved) data.\n\n\nIf there is no data saved, this returns an empty String.\n\n\n\n\n\n\n\n\n\n\nfunction\n \nonLoad\n()\n\n    \nprint\n(\n\"Loading complete\"\n)\n\n\nend\n\n\n\n\n\nExample of onLoad and onSave being used to save/load data\n--Runs whenever game is saved/autosaved\n\n\nfunction\n \nonSave\n()\n\n    \nlocal\n \ndata_to_save\n \n=\n \n{\nsomeData\n=\n50\n}\n\n    \nsaved_data\n \n=\n \nJSON\n.\nencode\n(\ndata_to_save\n)\n\n    \n--saved_data = \"\" --Remove -- at start & save to clear save data\n\n    \nreturn\n \nsaved_data\n\n\nend\n\n\n\n--Runs when game is loaded\n\n\nfunction\n \nonLoad\n(\nsaved_data\n)\n\n    \n--Loads the tracking for if the game has started yet\n\n    \nif\n \nsaved_data\n \n~=\n \n\"\"\n \nthen\n\n        \nlocal\n \nloaded_data\n \n=\n \nJSON\n.\ndecode\n(\nsaved_data\n)\n\n        \nsomeData\n \n=\n \nloaded_data\n.\nsomeData\n\n    \nelse\n\n        \nsomeData\n \n=\n \n50\n\n    \nend\n\n\nend\n\n\n\n\n\n\nonObjectDestroy(...)\n\u00b6\n\n\nCalled whenever any object is destroyed. The dying Object has 1 frame left to live. This event fires immediately before the dying Object\u2019s \nonDestroy()\n but their lifetime is the same final frame.\n\n\n\n\nonObjectDestroy(Object dying_object)\n\n\n\n\nObject dying_object\n: The object that was destroyed.\n\n\n\n\n\n\nfunction\n \nonObjectDestroy\n(\ndestroyedObj\n)\n\n    \nprint\n(\ndestroyedObj\n.\ngetName\n())\n\n\nend\n\n\n\n\n\n\n\nonObjectDrop(...)\n\u00b6\n\n\nCalled whenever any object is dropped by a player.\n\n\n\n\nonObjectDrop(String player_color, Object dropped_object)\n\n\n\n\nString player_color\n: A String of the color of the player who dropped the object.\n\n\nObject dropped_object\n: The Object in game which was dropped.\n\n\n\n\n\n\nfunction\n \nonObjectDrop\n(\ncolorName\n,\n \nobj\n)\n\n    \nprint\n(\ncolorName\n \n..\n \n\" dropped \"\n \n..\n \nobj\n.\ngetName\n())\n\n\nend\n\n\n\n\n\n\n\nonObjectEnterScriptingZone(...)\n\u00b6\n\n\nCalled when any object enters any scripting zone.\n\n\n\n\nonObjectEnterScriptingZone(Object zone, Object enter_object)\n\n\n\n\nObject zone\n: The Object of the scripting zone.\n\n\nObject enter_object\n: The Object triggering the function.\n\n\n\n\n\n\nfunction\n \nonObjectEnterScriptingZone\n(\nzone\n,\n \nobj\n)\n\n    \nprint\n(\nobj\n.\ngetGUID\n())\n\n\nend\n\n\n\n\n\n\n\nonObjectLeaveScriptingZone(...)\n\u00b6\n\n\nCalled when any object leaves any scripting zone.\n\n\n\n\nonObjectLeaveScriptingZone(Object zone, Object enter_object)\n\n\n\n\nObject zone\n: The Object of the scripting zone.\n\n\nObject enter_object\n: The Object triggering the function.\n\n\n\n\n\n\nfunction\n \nonObjectLeaveScriptingZone\n(\nzone\n,\n \nobj\n)\n\n    \nprint\n(\nobj\n.\ngetGUID\n())\n\n\nend\n\n\n\n\n\n\n\nonObjectLeaveContainer(...)\n\u00b6\n\n\nCalled when any object leaves any container.\n\n\n\n\nonObjectLeaveContainer(Object container, Object leave_object)\n\n\n\n\nObject container\n: The Object reference for the container the object left.\n\n\nObject leave_object\n: The Object reference for the object that left the container.\n\n\n\n\n\n\nfunction\n \nonObjectLeaveContainer\n(\nbag\n,\n \nobj\n)\n\n    \nprint\n(\nbag\n)\n\n    \nprint\n(\nobj\n)\n\n\nend\n\n\n\n\n\n\n\nonObjectLoopingEffect(...)\n\u00b6\n\n\nCalled whenever the looping effect of an \nAssetBundle\n is activated.\n\n\n\n\nonObjectLoopingEffect(Object loop_object, Int index)\n\n\n\n\nObject loop_object\n: The Object reference to the AssetBundle which had its loop activated.\n\n\nInt index\n: The Int of the index number for the loop activated.\n\n\n\n\n\n\nfunction\n \nonObjectLoopingEffect\n(\nobj\n,\n \nindex\n)\n\n    \nprint\n(\n\"Loop \"\n \n..\n \nindex\n \n..\n \n\" activated.\"\n)\n\n\nend\n\n\n\n\n\n\n\nonObjectPickUp(...)\n\u00b6\n\n\nCalled whenever a Player picks up an Object.\n\n\n\n\nonObjectPickUp(String player_color, Object picked_up_object)\n\n\n\n\nString player_color\n: A String of the color of the player who picked up the object.\n\n\nObject picked_up_object\n: The Object in game which was picked up.\n\n\n\n\n\n\nfunction\n \nonObjectPickUp\n(\ncolorName\n,\n \nobj\n)\n\n    \nprint\n(\ncolorName\n \n..\n \n\" picked up \"\n \n..\n \nobj\n.\ngetName\n())\n\n\nend\n\n\n\n\n\n\n\nonObjectRandomize(...)\n\u00b6\n\n\nCalled when an Object is randomized. Like when shuffling a deck or shaking dice.\n\n\n\n\nonObjectRandomize(Object randomize_object, String player_color)\n\n\n\n\nObject spawn_object\n: The Object which triggered this function.\n\n\nString player_color\n: A String of the color of the player who triggered the function.\n\n\n\n\n\n\nfunction\n \nonObjectRandomize\n(\nobj\n,\n \ncolor\n)\n\n    \nprint\n(\nobj\n.\ngetName\n()\n \n..\n \n\" was randomized by \"\n \n..\n \ncolor\n)\n\n\nend\n\n\n\n\n\n\n\nonObjectSpawn(...)\n\u00b6\n\n\nCalled when any Object is spawned/created.\n\n\n\n\nonObjectSpawn(Object spawn_object)\n\n\n\n\nObject spawn_object\n: The Object which triggered this function.\n\n\n\n\n\n\nfunction\n \nonObjectSpawn\n(\nobj\n)\n\n    \nprint\n(\nobj\n)\n\n\nend\n\n\n\n\n\n\n\nonObjectTriggerEffect(...)\n\u00b6\n\n\nCalled whenever the trigger effect of an \nAssetBundle\n is activated.\n\n\n\n\nonObjectTriggerEffect(Object loop_object, Int index)\n\n\n\n\nObject loop_object\n: The Object reference to the AssetBundle which had its trigger activated.\n\n\nInt index\n: The Int of the index number for the trigger activated.\n\n\n\n\n\n\nfunction\n \nonObjectTriggerEffect\n(\nobj\n,\n \nindex\n)\n\n    \nprint\n(\n\"Loop \"\n \n..\n \nindex\n \n..\n \n\" activated.\"\n)\n\n\nend\n\n\n\n\n\n\n\nonPlayerChangeColor(...)\n\u00b6\n\n\nCalled when a player changes color or selects it for the first time. It also returns \n\"Grey\"\n if they disconnect.\n\n\n\n\nonPlayerChangeColor(String player_color)\n\n\n\n\nString player_color\n: A String of the color of the player who triggered the function.\n\n\n\n\n\n\nfunction\n \nonPlayerChangeColor\n(\ncolor\n)\n\n    \nprint\n(\ncolor\n)\n\n\nend\n\n\n\n\n\n\n\nonPlayerTurnEnd(...)\n\u00b6\n\n\nCalled at the end of a player's turn when using the in-game turn system.\n\n\n\n\nonPlayerTurnEnd(String player_color_end, String player_color_next)\n\n\n\n\nString player_color_end\n: A String of the color of the player who's turn ended.\n\n\nString player_color_next\n: A String of the color of the player who's turn is next.\n\n\n\n\n\n\nfunction\n \nonPlayerTurnEnd\n(\ncolor_end\n,\n \ncolor_next\n)\n\n    \nprint\n(\ncolor_end\n \n..\n \n\"'s turn has ended.\"\n)\n\n    \nprint\n(\ncolor_next\n \n..\n \n\"'s turn starts now.\"\n)\n\n\nend\n\n\n\n\n\n\n\nonPlayerTurnStart(...)\n\u00b6\n\n\nCalled at the end of a player's turn when using the in-game turn system.\n\n\n\n\nonPlayerTurnStart(String player_color_start, String player_color_prev)\n\n\n\n\nString player_color_start\n: A String of the color of the player who's turn is starting.\n\n\nString player_color_prev\n: A String of the color of the player who's turn just ended.\n\n\n\n\n\n\nfunction\n \nonPlayerTurnStart\n(\ncolor_start\n,\n \ncolor_prev\n)\n\n    \nprint\n(\ncolor_start\n \n..\n \n\"'s turn starts now.\"\n)\n\n    \nprint\n(\ncolor_prev\n \n..\n \n\"'s turn has ended.\"\n)\n\n\nend\n\n\n\n\n\n\n\nonSave()\n\u00b6\n\n\nCalled whenever your game is saved, either manually or by auto-save. It is used to allow information to persist through saving/loading. It allows you to place information into a table that is written into the save file. It works on Global information and can also be used to save information onto an Object.\n\n\n\n\nImportant\n\n\nWhen using \nonSave()\n, information is saved into the save file you are using. Using \nSave & Apply\n does NOT cause it to record data, only overwriting your save will update what information \nonSave()\n is trying to record.\n\n\n\n\n\n\nWarning\n\n\nYou can save almost any data in a table using this function, but Object references \nDO NOT\n persist. If you need to record an Object using \nonSave()\n, record its GUID instead.\n\n\n\n\ndata_table\n \n=\n \n{\nanswer\n=\n42\n}\n\n\n\nfunction\n \nonSave\n()\n\n    \nsaved_data\n \n=\n \nJSON\n.\nencode\n(\ndata_table\n)\n\n    \nself\n.\nscript_state\n \n=\n \nsaved_data\n\n\nend\n\n\n\n\n\nCheck the \nonLoad()\n section for how to load the information you record into your save file.\n\n\n\n\nonScriptingButtonDown(...)\n\u00b6\n\n\nCalled when a scripting button (numpad by default) is pressed. The index range that is returned is 1-10.\n\n\n\n\nonScriptingButtonDown(Int index, String player_color)\n\n\n\n\nInt index\n: An Int for the index number, representing which key was pressed.\n\n\nString player_color\n: A String of the color of the player who triggered the function.\n\n\n\n\n\n\nfunction\n \nonScriptingButtonDown\n(\nindex\n,\n \ncolor\n)\n\n    \nprint\n(\nindex\n)\n\n\nend\n\n\n\n\n\n\n\nonScriptingButtonUp(...)\n\u00b6\n\n\nCalled when a scripting button (numpad by default) is released. The index range that is returned is 1-10.\n\n\n\n\nonScriptingButtonUp(Int index, String player_color)\n\n\n\n\nInt index\n: An Int for the index number, representing which key was released.\n\n\nString player_color\n: A String of the color of the player who triggered the function.\n\n\n\n\n\n\nfunction\n \nonScriptingButtonUp\n(\nindex\n,\n \ncolor\n)\n\n    \nprint\n(\nindex\n)\n\n\nend\n\n\n\n\n\n\n\nonUpdate()\n\u00b6\n\n\nCalled \nevery frame\n.\n\n\n\n\nWarning\n\n\nThis is a very expensive function and can easily slow/crash your game if missused. Use with caution.\n\n\n\n\nfunction\n \nonUpdate\n()\n\n    \nprint\n(\n\"This will probably slow your game down.\"\n\n\nend\n\n\n\n\n\n\n\n\n\nFunction Details (Object only)\n\u00b6\n\n\nonCollisionEnter(...)\n\u00b6\n\n\nThis function is called when an Object starts colliding with the Object the function is on. Does not work in Global.\n\n\n\n\nonCollisionEnter(Table collision_info)\n\n\n\n\ntable collision_info\n: A Table containing data on colliding object.\n\n\ncollision_info.\ncollision_object\n = \nObject\n collision_object\n\n\ncollision_info.\ncontact_points\n = Table contact_points\n\n\nThis is an array (table) of tables. Each contact point is a vector.\n\n\n\n\n\n\ncollision_info.\nrelative_velocity\n = \nVector\n\n\n\n\n\n\n\n\n\n\n--Example Usage\n\n\nfunction\n \nonCollisionEnter\n(\ninfo\n)\n\n    \nprint\n(\ninfo\n.\ncollision_object\n)\n\n\nend\n\n\n\n\n--Example returned table\n\n\n{\n\n    \ncollision_object\n \n=\n \nobjectReference\n\n    \ncontact_points\n \n=\n \n{\n\n        \n{\nx\n=\n5\n,\n \ny\n=\n0\n,\n \nz\n=-\n2\n,\n \n5\n,\n \n0\n,\n \n-\n2\n},\n\n    \n}\n\n    \nrelative_velocity\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n20\n,\n \nz\n=\n0\n,\n \n0\n,\n \n20\n,\n \n0\n}\n\n\n}\n\n\n\n\n\n\nonCollisionExit(...)\n\u00b6\n\n\nThis function is called when an Object stops colliding with the Object the function is on. Does not work in Global.\n\n\n\n\nonCollisionExit(Table collision_info)\n\n\n\n\ntable collision_info\n: A Table containing data on colliding object.\n\n\ncollision_info.\ncollision_object\n = \nObject\n collision_object\n\n\ncollision_info.\ncontact_points\n = Table contact_points\n\n\nThis is an array (table) of tables. Each contact point is a vector.\n\n\n\n\n\n\ncollision_info.\nrelative_velocity\n = \nVector\n\n\n\n\n\n\n\n\n\n\n--Example Usage\n\n\nfunction\n \nonCollisionExit\n(\ninfo\n)\n\n    \nprint\n(\ninfo\n.\ncollision_object\n)\n\n\nend\n\n\n\n\n--Example returned table\n\n\n{\n\n    \ncollision_object\n \n=\n \nobjectReference\n\n    \ncontact_points\n \n=\n \n{\n\n        \n{\nx\n=\n5\n,\n \ny\n=\n0\n,\n \nz\n=-\n2\n,\n \n5\n,\n \n0\n,\n \n-\n2\n},\n\n    \n}\n\n    \nrelative_velocity\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n20\n,\n \nz\n=\n0\n,\n \n0\n,\n \n20\n,\n \n0\n}\n\n\n}\n\n\n\n\n\n\nonCollisionStay(...)\n\u00b6\n\n\nThis function is called \nevery frame\n that an Object is colliding with the Object this function is on. Does not work in Global.\n\n\n\n\nWarning\n\n\nThis is a very expensive function and can easily slow/crash your game if missused. Use with caution.\n\n\n\n\n\n\nonCollisionStay(Table collision_info)\n\n\n\n\ntable collision_info\n: A Table containing data on colliding object.\n\n\ncollision_info.\ncollision_object\n = \nObject\n collision_object\n\n\ncollision_info.\ncontact_points\n = Table contact_points\n\n\nThis is an array (table) of tables. Each contact point is a vector.\n\n\n\n\n\n\ncollision_info.\nrelative_velocity\n = \nVector\n\n\n\n\n\n\n\n\n\n\n--Example Usage\n\n\nfunction\n \nonCollisionStay\n(\ninfo\n)\n\n    \nprint\n(\ninfo\n.\ncollision_object\n)\n\n\nend\n\n\n\n\n--Example returned table\n\n\n{\n\n    \ncollision_object\n \n=\n \nobjectReference\n\n    \ncontact_points\n \n=\n \n{\n\n        \n{\nx\n=\n5\n,\n \ny\n=\n0\n,\n \nz\n=-\n2\n,\n \n5\n,\n \n0\n,\n \n-\n2\n},\n\n    \n}\n\n    \nrelative_velocity\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n20\n,\n \nz\n=\n0\n,\n \n0\n,\n \n20\n,\n \n0\n}\n\n\n}\n\n\n\n\n\n\nonDestroy()\n\u00b6\n\n\nThis function is called when an \nObject\n it is on is destroyed. When \nonDestroy()\n is called, the Object has one frame left to live but its recommended to avoid using it as a reference here. This event fires immediately after \nonObjectDestroy()\n but their lifetime is the same final frame. Does not work in Global.\n\n\nfunction\n \nonDestroy\n()\n\n    \nprint\n(\n\"This object was destroyed!\"\n)\n\n\nend\n\n\n\n\n\n\n\nonDrop(...)\n\u00b6\n\n\nThis function is called when this \nObject\n is dropped. Does not work in Global.\n\n\n\n\nonDrop(String player_color)\n\n\n\n\nString player_color\n: A String of a \nPlayer\n's color.\n\n\n\n\n\n\nfunction\n \nonDrop\n(\ncolor\n)\n\n    \nprint\n(\ncolor\n)\n\n\nend\n\n\n\n\n\n\n\nonPickUp(...)\n\u00b6\n\n\nCalled when a player picks up an Object.\n\n\n\n\nonPickUp(String player_color)\n\n\n\n\nString player_color\n: A String of a \nPlayer\n's color.\n\n\n\n\n\n\nfunction\n \nonPickUp\n(\ncolor\n)\n\n    \nprint\n(\ncolor\n)\n\n\nend",
            "title": "Event"
        },
        {
            "location": "/event/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/event/#default-events-global-object",
            "text": "These are functions which are triggered by an event taking place in-game. They work when within the script of an Object or the Global script.     Function Name  Description  info_outline      onChat(String message, Player)  Called when a chat message is sent in game chat.  info_outline    onConnect(Player)  Called when a  Player  connects to a game.     onDisconnect(Player)  Called when a  Player  disconnects from a game.     onExternalMessage(Table)  Called when an external script editor (like  Atom ) sends a message back to the game. Used for custom editor functionality.  info_outline    onFixedUpdate()  Called  every physics tick  (90 times a second). This is a frame independent onUpdate().  info_outline    onLoad(String save_state)  Called when a game save is finished loading every Object. It is where most setup code will go.  info_outline    onObjectDestroy(Object dying_object)  Called whenever any object is destroyed.  info_outline    onObjectDrop (string player_color, Object dropped_object)  Called whenever any object is dropped by a player.  info_outline    onObjectEnterScriptingZone (Object zone, Object enter_object)  Called when any object enters any scripting zone.  info_outline    onObjectLeaveScriptingZone (Object zone, Object enter_object)  Called when any object leaves any scripting zone.  info_outline    onObjectLeaveContainer (Object container, Object leave_object)  Called when any object leaves any container.  info_outline    onObjectLoopingEffect (Object loop_object, Int index)  Called whenever the looping effect of an  AssetBundle  is activated.  info_outline    onObjectPickUp (String player_color, Object picked_up_object)  Called whenever a Player picks up an Object.  info_outline    onObjectRandomize (Object randomize_object, String player_color)  Called when an Object is randomized. Like when shuffling a deck or shaking dice.  info_outline    onObjectSpawn(Object spawn_object)  Called when any Object is spawned/created.  info_outline    onObjectTriggerEffect (Object trigger_object, Int index)  Called whenever the trigger effect of an  AssetBundle  is activated.  info_outline    onPlayerChangeColor(String  player_color )  Called when a player changes color or selects it for the first time. It also returns  \"Grey\"  if they disconnect.  info_outline    onPlayerTurnEnd(String  player_color_end , String  player_color_next )  Called at the end of a player's turn when using the in-game turn system.  info_outline    onPlayerTurnStart(String  player_color_start , String  player_color_prev )  Called at the start of a player's turn when using the in-game turn system.  info_outline    onSave()  Called whenever your game is saved.  info_outline    onScriptingButtonDown (Int index, String  player_color )  Called when a scripting button (numpad by default) is pressed. The index range that is returned is 1-10.  info_outline    onScriptingButtonUp (Int index, String  player_color )  Called when a scripting button (numpad by default) is released. The index range that is returned is 1-10.  info_outline    onUpdate()  Called  every frame .  info_outline",
            "title": "Default Events (Global &amp; Object)"
        },
        {
            "location": "/event/#default-events-object-only",
            "text": "These are functions which are triggered by an event taking place in-game. They only work within scripts that are on Objects, never in Global.     Function Name  Description      onCollisionEnter(Table collision_info)  Called when an Object starts colliding with the Object the function is on.    onCollisionExit(Table collision_info)  Called when an Object stops colliding with the Object the function is on.    onCollisionStay(Table collision_info)  Called  every frame  that an Object is colliding with the Object this function is on.    onDestroy()  Called when an Object it is on is destroyed.    onDrop(String  player_color )  Called when a player releases an Object after picking it up.    onPickUp(String  player_color )  Called when a player picks up an Object.",
            "title": "Default Events (Object Only)"
        },
        {
            "location": "/event/#function-details-global-object",
            "text": "",
            "title": "Function Details (Global &amp; Object)"
        },
        {
            "location": "/event/#onchat",
            "text": "This function is called when a message is sent through the in-game chat. It does not trigger when global chat messages are sent. Using  return   false  inside of this function prevents the chat message which triggered it to be supressed.   onChat(String message, Player)\"   String message : A String containing the chat message which triggered the function.  Player : A reference to the Player which sent the chat message.    function   onChat ( message ,   player ) \n     print ( message ) \n     print ( player . color )  end",
            "title": "onChat(...)"
        },
        {
            "location": "/event/#onexternalmessage",
            "text": "This function is called when an external script editor (like  Atom ) sends a message back to the game. Used for custom editor functionality.   onExternalMessage(Table)   Table : The data returned by the external editor into the game.    function   onExternalMessage ( data ) \n     print ( \"External message received\" )  end",
            "title": "onExternalMessage(...)"
        },
        {
            "location": "/event/#onfixedupdate",
            "text": "Called  every physics tick  (90 times a second). This is a frame independent onUpdate(). |  info_outline   Warning  This is a very expensive function and can easily slow/crash your game if missused. Use with caution.   function   onFixedUpdate () \n     self . addTorque ({ 0 , 100 , 0 },   1 )  end",
            "title": "onFixedUpdate()"
        },
        {
            "location": "/event/#onload",
            "text": "This function is called when a game save is finished loading every Object. This is where most setup code will go. The fast-forward and rewind feature will also cause this function to activate. If this function is in an Object's script and that Object is spawned, like by removing it from a container, it too will trigger onLoad().   onLoad(String save_state)   String save_state : The encoded string containing any save_state (saved) data.  If there is no data saved, this returns an empty String.      function   onLoad () \n     print ( \"Loading complete\" )  end   Example of onLoad and onSave being used to save/load data --Runs whenever game is saved/autosaved  function   onSave () \n     local   data_to_save   =   { someData = 50 } \n     saved_data   =   JSON . encode ( data_to_save ) \n     --saved_data = \"\" --Remove -- at start & save to clear save data \n     return   saved_data  end  --Runs when game is loaded  function   onLoad ( saved_data ) \n     --Loads the tracking for if the game has started yet \n     if   saved_data   ~=   \"\"   then \n         local   loaded_data   =   JSON . decode ( saved_data ) \n         someData   =   loaded_data . someData \n     else \n         someData   =   50 \n     end  end",
            "title": "onLoad(...)"
        },
        {
            "location": "/event/#onobjectdestroy",
            "text": "Called whenever any object is destroyed. The dying Object has 1 frame left to live. This event fires immediately before the dying Object\u2019s  onDestroy()  but their lifetime is the same final frame.   onObjectDestroy(Object dying_object)   Object dying_object : The object that was destroyed.    function   onObjectDestroy ( destroyedObj ) \n     print ( destroyedObj . getName ())  end",
            "title": "onObjectDestroy(...)"
        },
        {
            "location": "/event/#onobjectdrop",
            "text": "Called whenever any object is dropped by a player.   onObjectDrop(String player_color, Object dropped_object)   String player_color : A String of the color of the player who dropped the object.  Object dropped_object : The Object in game which was dropped.    function   onObjectDrop ( colorName ,   obj ) \n     print ( colorName   ..   \" dropped \"   ..   obj . getName ())  end",
            "title": "onObjectDrop(...)"
        },
        {
            "location": "/event/#onobjectenterscriptingzone",
            "text": "Called when any object enters any scripting zone.   onObjectEnterScriptingZone(Object zone, Object enter_object)   Object zone : The Object of the scripting zone.  Object enter_object : The Object triggering the function.    function   onObjectEnterScriptingZone ( zone ,   obj ) \n     print ( obj . getGUID ())  end",
            "title": "onObjectEnterScriptingZone(...)"
        },
        {
            "location": "/event/#onobjectleavescriptingzone",
            "text": "Called when any object leaves any scripting zone.   onObjectLeaveScriptingZone(Object zone, Object enter_object)   Object zone : The Object of the scripting zone.  Object enter_object : The Object triggering the function.    function   onObjectLeaveScriptingZone ( zone ,   obj ) \n     print ( obj . getGUID ())  end",
            "title": "onObjectLeaveScriptingZone(...)"
        },
        {
            "location": "/event/#onobjectleavecontainer",
            "text": "Called when any object leaves any container.   onObjectLeaveContainer(Object container, Object leave_object)   Object container : The Object reference for the container the object left.  Object leave_object : The Object reference for the object that left the container.    function   onObjectLeaveContainer ( bag ,   obj ) \n     print ( bag ) \n     print ( obj )  end",
            "title": "onObjectLeaveContainer(...)"
        },
        {
            "location": "/event/#onobjectloopingeffect",
            "text": "Called whenever the looping effect of an  AssetBundle  is activated.   onObjectLoopingEffect(Object loop_object, Int index)   Object loop_object : The Object reference to the AssetBundle which had its loop activated.  Int index : The Int of the index number for the loop activated.    function   onObjectLoopingEffect ( obj ,   index ) \n     print ( \"Loop \"   ..   index   ..   \" activated.\" )  end",
            "title": "onObjectLoopingEffect(...)"
        },
        {
            "location": "/event/#onobjectpickup",
            "text": "Called whenever a Player picks up an Object.   onObjectPickUp(String player_color, Object picked_up_object)   String player_color : A String of the color of the player who picked up the object.  Object picked_up_object : The Object in game which was picked up.    function   onObjectPickUp ( colorName ,   obj ) \n     print ( colorName   ..   \" picked up \"   ..   obj . getName ())  end",
            "title": "onObjectPickUp(...)"
        },
        {
            "location": "/event/#onobjectrandomize",
            "text": "Called when an Object is randomized. Like when shuffling a deck or shaking dice.   onObjectRandomize(Object randomize_object, String player_color)   Object spawn_object : The Object which triggered this function.  String player_color : A String of the color of the player who triggered the function.    function   onObjectRandomize ( obj ,   color ) \n     print ( obj . getName ()   ..   \" was randomized by \"   ..   color )  end",
            "title": "onObjectRandomize(...)"
        },
        {
            "location": "/event/#onobjectspawn",
            "text": "Called when any Object is spawned/created.   onObjectSpawn(Object spawn_object)   Object spawn_object : The Object which triggered this function.    function   onObjectSpawn ( obj ) \n     print ( obj )  end",
            "title": "onObjectSpawn(...)"
        },
        {
            "location": "/event/#onobjecttriggereffect",
            "text": "Called whenever the trigger effect of an  AssetBundle  is activated.   onObjectTriggerEffect(Object loop_object, Int index)   Object loop_object : The Object reference to the AssetBundle which had its trigger activated.  Int index : The Int of the index number for the trigger activated.    function   onObjectTriggerEffect ( obj ,   index ) \n     print ( \"Loop \"   ..   index   ..   \" activated.\" )  end",
            "title": "onObjectTriggerEffect(...)"
        },
        {
            "location": "/event/#onplayerchangecolor",
            "text": "Called when a player changes color or selects it for the first time. It also returns  \"Grey\"  if they disconnect.   onPlayerChangeColor(String player_color)   String player_color : A String of the color of the player who triggered the function.    function   onPlayerChangeColor ( color ) \n     print ( color )  end",
            "title": "onPlayerChangeColor(...)"
        },
        {
            "location": "/event/#onplayerturnend",
            "text": "Called at the end of a player's turn when using the in-game turn system.   onPlayerTurnEnd(String player_color_end, String player_color_next)   String player_color_end : A String of the color of the player who's turn ended.  String player_color_next : A String of the color of the player who's turn is next.    function   onPlayerTurnEnd ( color_end ,   color_next ) \n     print ( color_end   ..   \"'s turn has ended.\" ) \n     print ( color_next   ..   \"'s turn starts now.\" )  end",
            "title": "onPlayerTurnEnd(...)"
        },
        {
            "location": "/event/#onplayerturnstart",
            "text": "Called at the end of a player's turn when using the in-game turn system.   onPlayerTurnStart(String player_color_start, String player_color_prev)   String player_color_start : A String of the color of the player who's turn is starting.  String player_color_prev : A String of the color of the player who's turn just ended.    function   onPlayerTurnStart ( color_start ,   color_prev ) \n     print ( color_start   ..   \"'s turn starts now.\" ) \n     print ( color_prev   ..   \"'s turn has ended.\" )  end",
            "title": "onPlayerTurnStart(...)"
        },
        {
            "location": "/event/#onsave",
            "text": "Called whenever your game is saved, either manually or by auto-save. It is used to allow information to persist through saving/loading. It allows you to place information into a table that is written into the save file. It works on Global information and can also be used to save information onto an Object.   Important  When using  onSave() , information is saved into the save file you are using. Using  Save & Apply  does NOT cause it to record data, only overwriting your save will update what information  onSave()  is trying to record.    Warning  You can save almost any data in a table using this function, but Object references  DO NOT  persist. If you need to record an Object using  onSave() , record its GUID instead.   data_table   =   { answer = 42 }  function   onSave () \n     saved_data   =   JSON . encode ( data_table ) \n     self . script_state   =   saved_data  end   Check the  onLoad()  section for how to load the information you record into your save file.",
            "title": "onSave()"
        },
        {
            "location": "/event/#onscriptingbuttondown",
            "text": "Called when a scripting button (numpad by default) is pressed. The index range that is returned is 1-10.   onScriptingButtonDown(Int index, String player_color)   Int index : An Int for the index number, representing which key was pressed.  String player_color : A String of the color of the player who triggered the function.    function   onScriptingButtonDown ( index ,   color ) \n     print ( index )  end",
            "title": "onScriptingButtonDown(...)"
        },
        {
            "location": "/event/#onscriptingbuttonup",
            "text": "Called when a scripting button (numpad by default) is released. The index range that is returned is 1-10.   onScriptingButtonUp(Int index, String player_color)   Int index : An Int for the index number, representing which key was released.  String player_color : A String of the color of the player who triggered the function.    function   onScriptingButtonUp ( index ,   color ) \n     print ( index )  end",
            "title": "onScriptingButtonUp(...)"
        },
        {
            "location": "/event/#onupdate",
            "text": "Called  every frame .   Warning  This is a very expensive function and can easily slow/crash your game if missused. Use with caution.   function   onUpdate () \n     print ( \"This will probably slow your game down.\"  end",
            "title": "onUpdate()"
        },
        {
            "location": "/event/#function-details-object-only",
            "text": "",
            "title": "Function Details (Object only)"
        },
        {
            "location": "/event/#oncollisionenter",
            "text": "This function is called when an Object starts colliding with the Object the function is on. Does not work in Global.   onCollisionEnter(Table collision_info)   table collision_info : A Table containing data on colliding object.  collision_info. collision_object  =  Object  collision_object  collision_info. contact_points  = Table contact_points  This is an array (table) of tables. Each contact point is a vector.    collision_info. relative_velocity  =  Vector      --Example Usage  function   onCollisionEnter ( info ) \n     print ( info . collision_object )  end   --Example returned table  { \n     collision_object   =   objectReference \n     contact_points   =   { \n         { x = 5 ,   y = 0 ,   z =- 2 ,   5 ,   0 ,   - 2 }, \n     } \n     relative_velocity   =   { x = 0 ,   y = 20 ,   z = 0 ,   0 ,   20 ,   0 }  }",
            "title": "onCollisionEnter(...)"
        },
        {
            "location": "/event/#oncollisionexit",
            "text": "This function is called when an Object stops colliding with the Object the function is on. Does not work in Global.   onCollisionExit(Table collision_info)   table collision_info : A Table containing data on colliding object.  collision_info. collision_object  =  Object  collision_object  collision_info. contact_points  = Table contact_points  This is an array (table) of tables. Each contact point is a vector.    collision_info. relative_velocity  =  Vector      --Example Usage  function   onCollisionExit ( info ) \n     print ( info . collision_object )  end   --Example returned table  { \n     collision_object   =   objectReference \n     contact_points   =   { \n         { x = 5 ,   y = 0 ,   z =- 2 ,   5 ,   0 ,   - 2 }, \n     } \n     relative_velocity   =   { x = 0 ,   y = 20 ,   z = 0 ,   0 ,   20 ,   0 }  }",
            "title": "onCollisionExit(...)"
        },
        {
            "location": "/event/#oncollisionstay",
            "text": "This function is called  every frame  that an Object is colliding with the Object this function is on. Does not work in Global.   Warning  This is a very expensive function and can easily slow/crash your game if missused. Use with caution.    onCollisionStay(Table collision_info)   table collision_info : A Table containing data on colliding object.  collision_info. collision_object  =  Object  collision_object  collision_info. contact_points  = Table contact_points  This is an array (table) of tables. Each contact point is a vector.    collision_info. relative_velocity  =  Vector      --Example Usage  function   onCollisionStay ( info ) \n     print ( info . collision_object )  end   --Example returned table  { \n     collision_object   =   objectReference \n     contact_points   =   { \n         { x = 5 ,   y = 0 ,   z =- 2 ,   5 ,   0 ,   - 2 }, \n     } \n     relative_velocity   =   { x = 0 ,   y = 20 ,   z = 0 ,   0 ,   20 ,   0 }  }",
            "title": "onCollisionStay(...)"
        },
        {
            "location": "/event/#ondestroy",
            "text": "This function is called when an  Object  it is on is destroyed. When  onDestroy()  is called, the Object has one frame left to live but its recommended to avoid using it as a reference here. This event fires immediately after  onObjectDestroy()  but their lifetime is the same final frame. Does not work in Global.  function   onDestroy () \n     print ( \"This object was destroyed!\" )  end",
            "title": "onDestroy()"
        },
        {
            "location": "/event/#ondrop",
            "text": "This function is called when this  Object  is dropped. Does not work in Global.   onDrop(String player_color)   String player_color : A String of a  Player 's color.    function   onDrop ( color ) \n     print ( color )  end",
            "title": "onDrop(...)"
        },
        {
            "location": "/event/#onpickup",
            "text": "Called when a player picks up an Object.   onPickUp(String player_color)   String player_color : A String of a  Player 's color.    function   onPickUp ( color ) \n     print ( color )  end",
            "title": "onPickUp(...)"
        },
        {
            "location": "/base/",
            "text": "These are a loose collection of functions which can be used to perform a variety of actions within Tabletop Simulator. Some of them are used in almost every script.\n\n\nFunction Summary\n\u00b6\n\n\nGlobal Management Functions\n\u00b6\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\ninfo_outline\n\n\n\n\n\n\n\n\n\n\naddNotebookTab(Table parameters)\n\n\nReturns Int of the index of the newly added notebook tab.\n\n\ninfo_outline\n\n\n\n\n\n\nbroadcastToAll\n(String message, Table \ncolor\n)\n\n\nReturns Bool with result of printing an on-screen message to all Players.\n\n\ninfo_outline\n\n\n\n\n\n\nbroadcastToColor(String message,\nString \nplayer_color\n, Table \ncolor\n)\n\n\nReturns Bool with result of printing an on-screen message to a specified Player.\n\n\ninfo_outline\n\n\n\n\n\n\nclearPixelPaint()\n\n\nReturns Bool with result of removing pixel paint from the instance.\n\n\ninfo_outline\n\n\n\n\n\n\nclearVectorPaint()\n\n\nReturns Bool with result of removing vector paint from the instance.\n\n\ninfo_outline\n\n\n\n\n\n\ncopy(Table object_list)\n\n\nReturns Bool of result of copying a list of Objects the clipboard. Works with \npaste(...)\n.\n\n\ninfo_outline\n\n\n\n\n\n\ndestroyObject(Object obj)\n\n\nReturns Bool with the result of destroying an Object.\n\n\ninfo_outline\n\n\n\n\n\n\neditNotebookTab(Table parameters)\n\n\nReturns Bool with the result of editing an existing Tab in the notebook.\n\n\ninfo_outline\n\n\n\n\n\n\nflipTable()\n\n\nReturns Bool with the result of flipping the table.\n\n\ninfo_outline\n\n\n\n\n\n\ngetAllObjects()\n\n\nReturns Table of all spawned \nObjects\n in the game.\n\n\ninfo_outline\n\n\n\n\n\n\ngetNotebookTabs()\n\n\nReturns Table of all tabs in the notebook.\n\n\ninfo_outline\n\n\n\n\n\n\ngetNotes()\n\n\nReturns String of the contents of the on-screen notes section.\n\n\ninfo_outline\n\n\n\n\n\n\ngetObjectFromGUID(String guid)\n\n\nReturns Object from GUID. Will return \nnil\n if it doesn't exist in-game.\n\n\ninfo_outline\n\n\n\n\n\n\ngetSeatedPlayers()\n\n\nReturns Table of the colors of seated players.\n\n\ninfo_outline\n\n\n\n\n\n\nlog(Var element, String tag, String label)\n\n\nReturns Bool with result of printing information to the log. (Shortcut: ~)\n\n\ninfo_outline\n\n\n\n\n\n\nlogStyle(String tag, Table color,\n String prefix, String prefix, String postfix)\n\n\nReturns bool with result of setting style options for the specified tag type for the log.\n\n\ninfo_outline\n\n\n\n\n\n\npaste(Table parameters)\n\n\nReturns Table of newly spawned objects that were pasted from the clipboard. Works with \ncopy(...)\n.\n\n\ninfo_outline\n\n\n\n\n\n\nprint(String message)\n\n\nPrints a string into chat that only the host is able to see. Used for debugging scripts.\n\n\ninfo_outline\n\n\n\n\n\n\nprintToAll(String message, Table \ncolor\n)\n\n\nReturns Bool with the result of printing a message into the chat of all connected players.\n\n\ninfo_outline\n\n\n\n\n\n\nprintToColor(String message,\nString \nplayer_color\n, Table \ncolor\n)\n\n\nReturns Bool with the result of printing a message to a specific Player.\n\n\ninfo_outline\n\n\n\n\n\n\nremoveNotebookTab(Int index)\n\n\nReturns Bool with the result of removing a notebook tab.\n\n\ninfo_outline\n\n\n\n\n\n\nsendExternalMessage(Table)\n\n\nReturns Bool with the result of sending the table to your external script editor, most likely Atom. This is for custom editor functionality.\n\n\ninfo_outline\n\n\n\n\n\n\nsetNotes(String notes)\n\n\nReturns Bool with the result of replacing the text in the notes window with the string.\n\n\ninfo_outline\n\n\n\n\n\n\nspawnObject(Table parameters)\n\n\nReturns Object reference for the object spawned. View the \nSpawnable Object\n page for Objects that can be spawned.\n\n\ninfo_outline\n\n\n\n\n\n\nstartLuaCoroutine(Object function_owner,\nString function_name)\n\n\nReturns Bool with the result of starting a coroutine.\n\n\ninfo_outline\n\n\n\n\n\n\nstringColorToRGB(String player_color)\n\n\nReturns Table \nColor\n requivilent to the Player Color string.\n\n\ninfo_outline\n\n\n\n\n\n\n\n\n\n\nFunction Details\n\u00b6\n\n\naddNotebookTab(...)\n\u00b6\n\n\nReturns Int of the index of the newly added notebook tab. If it failed to create a new tab, a -1 is returned instead. Indexes for notebook tabs begin at 0.\n\n\n\n\naddNotebookTab(Table parameters)\n\n\n\n\nTable parameters\n: A Table containing spawning parameters.\n\n\nparameters.title\n: A String with the title for the new tab.\n\n\nparameters.body\n: A String with text to place into the body of the new tab.\n\n\nOptional, defaults to an empty string\n\n\n\n\n\n\nparameters.color\n: A String with the \nPlayer color\n for the new tab's color.\n\n\nOptional, defaults to \"Grey\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nparameters\n \n=\n \n{\n\n    \ntitle\n \n=\n \n\"New Tab\"\n,\n\n    \nbody\n \n=\n \n\"Body text example.\"\n,\n\n    \ncolor\n \n=\n \n\"Grey\"\n\n\n}\n\n\naddNotebookTab\n(\nparameters\n)\n\n\n\n\n\n\n\nbroadcastToAll(...)\n\u00b6\n\n\nReturns Bool with result of printing an on-screen message to all Players.\n\n\n\n\nbroadcastToAll(String message, Table \ncolor\n)\n\n\n\n\nString message\n: A String of the message to display on-screen.\n\n\nTable color\n: A Table containing the RGB color for the text.\n\n\n\n\n\n\nmsg\n \n=\n \n\"Hello all.\"\n\n\nrgb\n \n=\n \n{\nr\n=\n1\n,\n \ng\n=\n0\n,\n \nb\n=\n0\n}\n\n\nbroadcastToAll\n(\nmsg\n,\n \nrgb\n)\n\n\n\n\n\n\n\nbroadcastToColor(...)\n\u00b6\n\n\nReturns Bool with result of printing an on-screen message to a specified Player.\n\n\n\n\nbroadcastToColor(String message, String \nplayer_color\n, Table \ncolor\n)\n\n\n\n\nString message\n: A String of the message to display on-screen.\n\n\nString player_color\n: A String of the color of the Player who will receive the message.\n\n\nTable color\n: A Table containing the RGB color for the text.\n\n\n\n\n\n\nmsg\n \n=\n \n\"Hello White.\"\n\n\ncolor\n \n=\n \n\"White\"\n\n\nrgb\n \n=\n \n{\nr\n=\n1\n,\n \ng\n=\n0\n,\n \nb\n=\n0\n}\n\n\nbroadcastToColor\n(\nmsg\n,\n \ncolor\n,\n \nrgb\n)\n\n\n\n\n\n\n\nclearPixelPaint()\n\u00b6\n\n\nReturns Bool with result of removing pixel paint from the instance.\n\n\nclearPixelPaint\n()\n\n\n\n\n\n\n\nclearVectorPaint()\n\u00b6\n\n\nReturns Bool with result of removing vector paint from the instance.\n\n\nclearPixelPaint\n()\n\n\n\n\n\n\n\ncopy(...)\n\u00b6\n\n\nReturns Bool of result of copying a list of Objects the clipboard. Works with \npaste(...)\n.\n\n\n\n\ncopy(Table object_list)\n\n\n\n\nTable object_list\n: A Table of in-game objects to be copied.\n\n\nThis is similar to highlighting the objects in-game and copying them.\n\n\n\n\n\n\n\n\n\n\nobject_list\n \n=\n \n{\n\n    \ngetObjectFromGUID\n(\n\"######\"\n),\n\n    \ngetObjectFromGUID\n(\n\"######\"\n),\n\n\n}\n\n\ncopy\n(\nobject_list\n)\n\n\n\n\n\n\n\ndestroyObject(...)\n\u00b6\n\n\nReturns Bool with the result of destroying an Object.\n\n\n\n\ndestroyObject(Object obj)\n\n\n\n\nObject obj\n: The Object you wish to delete from the instance.\n\n\n\n\n\n\nobj\n \n=\n \ngetObjectFromGUID\n(\n\"######\"\n)\n\n\ndestroyObject\n(\nobj\n)\n\n\n\n\n\n\n\neditNotebookTab(...)\n\u00b6\n\n\nReturns Bool with the result of editing an existing Tab in the notebook. Indexes for notebook tabs begin at 0.\n\n\n\n\neditNotebookTab(Table parameters)\n\n\n\n\nTable parameters\n: A Table containing instructions for the notebook edit.\n\n\nparameters.index\n: An Int of the index number for the tab.\n\n\nparameters.title\n: A String of the title for the tab.\n\n\nOptional, defaults to the current title of the tab begin edited.\n\n\n\n\n\n\nparameters.body\n: A String of the body for the tab.\n\n\nOptional, defaults to the current body of the tab begin edited.\n\n\n\n\n\n\nparameters.color\n: A String of the Player color for who the tab belongs to.\n\n\nOptional, defaults to the current color of the tab begin edited.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nparams\n \n=\n \n{\n\n    \nindex\n \n=\n \n5\n,\n\n    \ntitle\n \n=\n \n\"Edited Title\"\n,\n\n    \nbody\n \n=\n \n\"This tab was edited via script.\"\n,\n\n    \ncolor\n \n=\n \n\"Grey\"\n\n\n}\n\n\neditNotebookTab\n(\nparams\n)\n\n\n\n\n\n\n\nflipTable()\n\u00b6\n\n\nReturns Bool with the result of flipping the table.\n\n\nflipTable\n()\n\n\n\n\n\n\n\ngetAllObjects()\n\u00b6\n\n\nReturns Table of all spawned \nObjects\n in the game.\n\n\n--Example Usage\n\n\nobjList\n \n=\n \ngetAllObjects\n()\n\n\nfor\n \n_\n,\n \nobj\n \nin\n \nipairs\n(\nobjList\n)\n \ndo\n\n    \nprint\n(\nobj\n.\ngetName\n())\n\n\nend\n\n\n\n\n--Example Returned Table\n\n\nobjList\n \n=\n \n{\nobject\n,\n \nobject\n,\n \nobject\n}\n\n\n\n\n\n\ngetNotebookTabs()\n\u00b6\n\n\nReturns Table of all tabs in the notebook. Indexes for notebook tabs begin at 0.\n\n\n--Example Usage\n\n\ntabInfo\n \n=\n \ngetNotebookTabs\n()\n\n\n\n\n--Example Returned Table\n\n\n{\n\n    \n{\nindex\n=\n0\n,\n \ntitle\n=\n\"\"\n,\n \nbody\n=\n\"\"\n,\n \ncolor\n=\n\"Grey\"\n},\n\n    \n{\nindex\n=\n1\n,\n \ntitle\n=\n\"\"\n,\n \nbody\n=\n\"\"\n,\n \ncolor\n=\n\"Grey\"\n},\n\n    \n{\nindex\n=\n2\n,\n \ntitle\n=\n\"\"\n,\n \nbody\n=\n\"\"\n,\n \ncolor\n=\n\"Grey\"\n},\n\n\n}\n\n\n\n\n\n\ngetNotes()\n\u00b6\n\n\nReturns String of the contents of the on-screen notes section.\n\n\nprint\n(\ngetNotes\n())\n\n\n\n\n\n\n\ngetObjectFromGUID(...)\n\u00b6\n\n\nReturns Object from GUID. Will return \nnil\n if it doesn't exist in-game.!!\n\n\n\n\ngetObjectFromGUID(String guid)\n\n\n\n\nString guid\n: A String of the 6 character GUID of an object.\n\n\nGUID can be obtained by right clicking an object and going to Scripting.\n\n\nIn a script, it can be obtained from any Object by using .getGUID().\n\n\n\n\n\n\n\n\n\n\nobj\n \n=\n \ngetObjectFromGUID\n(\n\"555555\"\n)\n\n\n\n\n\n\n\ngetSeatedPlayers()\n\u00b6\n\n\nReturns Table of the colors of seated players.\n\n\n\n\nTip\n\n\n\n\nSpectators (\"Grey\") are not returned.\n\n\nDM seat (\"Black\") is not returned.\n\n\nThe order colors are returned in the table are in the same order as players joining the server.\n\n\n\n\n\n\n--Example Usage\n\n\nfor\n \n_\n,\n \nv\n \nin\n \nipairs\n(\ngetSeatedPlayers\n())\n \ndo\n\n    \nprint\n(\nv\n)\n\n\nend\n\n\n\n\n--Example Returned Table\n\n\n{\n\"White\"\n,\n \n\"Red\"\n,\n \n\"Green\"\n}\n\n\n\n\n\n\nlog(...)\n\u00b6\n\n\nReturns Bool with result of printing information to the log. The log is a separate chat window which is visible to all players in the instance. It also automatically prints all data in a table if you input it as the Var.\n\n\n\n\nlog(Var element, String tag, String label)\n\n\n\n\nVar element\n: The information you want placed into the log.\n\n\nString tag\n: A String of text usable to group log messages by type. (See: \nlogStyle\n)\n\n\nOptional, defaults to an empty String. Empty Strings are not displayed.\n\n\n\n\n\n\nString label\n: A String of text to be placed before the Var element is printed to the log.\n\n\nOptional, defaults to an empty String. Empty Strings are not displayed.\n\n\n\n\n\n\n\n\n\n\nlog\n(\ngetAllObjects\n(),\n \n\"table\"\n,\n \n\"All Objects:\"\n)\n\n\n\n\n\n\n\nlogStyle(...)\n\u00b6\n\n\nReturns bool with result of setting style options for the specified tag type for the log. This can also be set in the system console with the \"log_style_tag\" command.\n\n\n\n\nlogStyle(String tag, Table color, String prefix, String prefix, String postfix)\n\n\n\n\nString tag_name\n: A String of the log's tag.\n\n\nTable Color\n: A Table of the RGB value of the text color.\n\n\nString color will also work. Example: \"Red\"\n\n\n\n\n\n\nString prefix\n: A String of text to place before the log entry of this tag type.\n\n\nOptional, defaults to an empty String. Empty Strings are not displayed.\n\n\n\n\n\n\nString postfix\n: A String of text to place after the log entry of this tag type.\n\n\nOptional, defaults to an empty String. Empty Strings are not displayed.\n\n\n\n\n\n\n\n\n\n\nfunction\n \nonLoad\n()\n\n    \nlogStyle\n(\n\"players\"\n,\n \n{\n0.5\n,\n0.5\n,\n0.5\n},\n \n\"\"\n,\n \n\"End List\"\n)\n\n    \nlog\n(\ngetSeatedPlayers\n(),\n \n\"players\"\n)\n\n\nend\n\n\n\n\n\n\n\npaste(...)\n\u00b6\n\n\nReturns Table of newly spawned objects that were pasted from the clipboard. Works with \ncopy(...)\n.\n\n\n\n\npaste(Table parameters)\n\n\n\n\nTable parameters\n: A Table containing instructions for the notebook edit.\n\n\nparameters.position\n: A Table containing the position Vector of the first object to paste.\n\n\nOptional, defaults to {0, 3, 0}.\n\n\n\n\n\n\nparameters.snap_to_grid\n: A Bool which determines if snap-to-grid is active on the spawned item.\n\n\nOptional, defaults to false (off).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nparams\n \n=\n \n{\nposition\n \n=\n \n{\n5\n,\n5\n,\n0\n},\n \nsnap_to_grid\n \n=\n \ntrue\n}\n\n\npaste\n(\nparams\n)\n\n\n\n\n\n\n\nprint(...)\n\u00b6\n\n\nPrints a string into chat that only the host is able to see. Used for debugging scripts.\n\n\n\n\nprint(String message)\n\n\n\n\nString message\n: The String to be printed to chat.\n\n\n\n\n\n\nfunction\n \nonLoad\n()\n \nprint\n(\n\"Loading Complete\"\n)\n \nend\n\n\n\n\n\n\n\nprintToAll(...)\n\u00b6\n\n\nReturns Bool with the result of printing a message into the chat of all connected players.\n\n\n\n\nprintToAll(String message, Table \ncolor\n)\n\n\n\n\nString message\n: A String of the message to place into players chats.\n\n\nTable color\n: A Table containing r/g/b values for the text's color.\n\n\n\n\n\n\nprintToAll\n(\n\"Hello World!\"\n,\n \n{\nr\n=\n1\n,\ng\n=\n0\n,\nb\n=\n0\n})\n\n\n\n\n\n\n\nprintToColor(...)\n\u00b6\n\n\nReturns Bool with the result of printing a message to a specific Player.\n\n\n\n\nprintToColor(String message, String \nplayer_color\n, Table \ncolor\n)\n\n\n\n\nString message\n: A String of the message to place into the player's chat.\n\n\nStraing player_color\n: A String of the Player's color that will receive the message.\n\n\nTable color\n: A Table containing r/g/b values for the text's color.\n\n\n\n\n\n\nprintToColor\n(\n\"Hello Red.\"\n,\n \n\"Red\"\n,\n \n{\nr\n=\n1\n,\ng\n=\n0\n,\nb\n=\n0\n})\n\n\n\n\n\n\n\nremoveNotebookTab(...)\n\u00b6\n\n\nReturns Bool with the result of removing a notebook tab. Notebook tab indexes begin at 0.\n\n\n\n\nremoveNotebookTab(Int index)\n\n\n\n\nInt index\n: The Int of the index for the tab to remove.\n\n\n\n\n\n\nremoveNotebookTab\n(\n0\n)\n\n\n\n\n\n\n\nsendExternalMessage(...)\n\u00b6\n\n\nReturns Bool with the result of sending the table to your external script editor, most likely Atom. This is for custom editor functionality.\n\n\n\n\nsetNotes(...)\n\u00b6\n\n\nReturns Bool with the result of replacing the text in the notes window with the string.\n\n\n\n\nsetNotes(String notes)\n\n\n\n\nString notes\n: A String which will replace the contents of the notes area.\n\n\n\n\n\n\nsetNotes\n(\n\"This appears in the notes section\"\n)\n\n\n\n\n\n\n\nspawnObject(...)\n\u00b6\n\n\nReturns Object reference for the object spawned. View the \nSpawnable Object\n page for Objects that can be spawned.\n\n\n\n\nTip\n\n\nSpawned Objects take a moment to be physically spawned into the game. The purpose of the callback functionality is to allow you to run additional actions after the Object has been initiated fully into the instance. It is also possible to add a delay using a \ncoroutine\n.\n\n\n\n\n\n\nspawnObject(Table parameters)\n\n\n\n\nTable parameters\n: A Table of parameters used to determine how spawnObject will act.\n\n\nparameters.type\n: A String of the \nSpawnable Object\n type.\n\n\nparameters.position\n: A Table Vector of the position to place Object.\n\n\nOptional, defaults to {x=0, y=3, z=0}.\n\n\n\n\n\n\nparameters.rotation\n: A Table Vector of the rotation of the Object.\n\n\nOptional, defaults to {x=0, y=0, z=0}\n\n\n\n\n\n\nparameters.scale\n: A Table Vector of the scale of the Object.\n\n\nOptional, defaults to {x=1, y=1, z=1}\n\n\n\n\n\n\nparameters.sound\n: A Bool for if the spawned Object noise is played.\n\n\nOptional, defaults to true.\n\n\n\n\n\n\nparameters.snap_to_grid\n: A Bool for snap-to-grid is active on the Object.\n\n\nOptional, defaults to false.\n\n\n\n\n\n\nparameters.callback\n: A String of the function name you want activated once the Object is initiated.\n\n\nOptional, no callback is triggered without it.\n\n\nA callback function has 2 parameters, the Object spawned and, if used, the Table of params.\n\n\n\n\n\n\nparameters.callback_owner\n: An Object of what object has the callback function on it. Global is a valid target as well.\n\n\nOptional, defaults to Global. Serves no purpose if callback is not also used.\n\n\n\n\n\n\nparameters.params\n: A Table of data to send to the callback to use as parameters. See example.\n\n\nOptional, default is to not be used.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you are spawning a \ncustom Object\n, you should call \nsetCustomObject\n immediately after spawnObject to set its custom properties.\n\n\nfunction\n \nonLoad\n()\n\n    \nfutureName\n \n=\n \n\"Spawned By Script!\"\n\n    \nspawnParams\n \n=\n \n{\n\n        \ntype\n \n=\n \n\"rpg_BEAR\"\n,\n\n        \nposition\n       \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n3\n,\n \nz\n=-\n5\n},\n\n        \nrotation\n       \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n90\n,\n \nz\n=\n0\n},\n\n        \nscale\n          \n=\n \n{\nx\n=\n2\n,\n \ny\n=\n2\n,\n \nz\n=\n2\n},\n\n        \nsound\n          \n=\n \nfalse\n,\n\n        \nsnap_to_grid\n   \n=\n \ntrue\n,\n\n        \ncallback\n       \n=\n \n\"spawn_callback\"\n,\n\n        \ncallback_owner\n \n=\n \nGlobal\n,\n\n        \nparams\n         \n=\n \n{\nname\n \n=\n \nfutureName\n}\n\n    \n}\n\n    \nspawnObject\n(\nspawnParams\n)\n\n\nend\n\n\n\nfunction\n \nspawn_callback\n(\nobject_spawned\n,\n \nparams\n)\n\n    \nobject_spawned\n.\nsetName\n(\nparams\n.\nname\n)\n\n\nend\n\n\n\n\n\n\n\nstartLuaCoroutine(...)\n\u00b6\n\n\nReturns Bool with the result of starting a coroutine. A coroutine is similar to a function, but has the unique ability to have its run paused until the next frame of the game using \ncoroutine.yield(0)\n.\n\n\n\n\nAttention\n\n\nYou MUST return a 1 at the end of any coroutine or it will throw an error.\n\n\n\n\n\n\nstartLuaCoroutine(Object function_owner, String function_name)\n\n\n\n\nObject function_owner\n: The Object that the function being called is on. Global is a valid target.\n\n\nString function_name\n: The String containing the name of the function being called as a coroutine.\n\n\n\n\n\n\nfunction\n \nonLoad\n()\n\n    \nstartLuaCoroutine\n(\nGlobal\n,\n \n\"print_coroutine\"\n)\n\n\nend\n\n\n\n--Prints a message, waits 250 frames, prints another message\n\n\nfunction\n \nprint_coroutine\n()\n\n    \nprint\n(\n\"Routine has Started\"\n)\n\n    \ncount\n \n=\n \n0\n\n    \nwhile\n \ncount\n \n<\n \n250\n \ndo\n\n        \ncount\n \n=\n \ncount\n \n+\n \n1\n\n        \ncoroutine.yield\n(\n0\n)\n\n    \nend\n\n\n    \nprint\n(\n\"Routine has Finished\"\n)\n\n\n    \nreturn\n \n1\n\n\nend\n\n\n\n\n\n\n\nstringColorToRGB(...)\n\u00b6\n\n\nReturns Table \nColor\n requivilent to the Player Color string.\n\n\n\n\nstringColorToRGB(String player_color)\n\n\n\n\nString player_color\n A String of a Player \nColor\n.\n\n\n\n\n\n\nprintToAll\n(\n\"Blue message\"\n,\n \nstringColorToRGB\n(\n\"Blue\"\n))",
            "title": "Base"
        },
        {
            "location": "/base/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/base/#global-management-functions",
            "text": "Function Name  Description  info_outline      addNotebookTab(Table parameters)  Returns Int of the index of the newly added notebook tab.  info_outline    broadcastToAll (String message, Table  color )  Returns Bool with result of printing an on-screen message to all Players.  info_outline    broadcastToColor(String message, String  player_color , Table  color )  Returns Bool with result of printing an on-screen message to a specified Player.  info_outline    clearPixelPaint()  Returns Bool with result of removing pixel paint from the instance.  info_outline    clearVectorPaint()  Returns Bool with result of removing vector paint from the instance.  info_outline    copy(Table object_list)  Returns Bool of result of copying a list of Objects the clipboard. Works with  paste(...) .  info_outline    destroyObject(Object obj)  Returns Bool with the result of destroying an Object.  info_outline    editNotebookTab(Table parameters)  Returns Bool with the result of editing an existing Tab in the notebook.  info_outline    flipTable()  Returns Bool with the result of flipping the table.  info_outline    getAllObjects()  Returns Table of all spawned  Objects  in the game.  info_outline    getNotebookTabs()  Returns Table of all tabs in the notebook.  info_outline    getNotes()  Returns String of the contents of the on-screen notes section.  info_outline    getObjectFromGUID(String guid)  Returns Object from GUID. Will return  nil  if it doesn't exist in-game.  info_outline    getSeatedPlayers()  Returns Table of the colors of seated players.  info_outline    log(Var element, String tag, String label)  Returns Bool with result of printing information to the log. (Shortcut: ~)  info_outline    logStyle(String tag, Table color,  String prefix, String prefix, String postfix)  Returns bool with result of setting style options for the specified tag type for the log.  info_outline    paste(Table parameters)  Returns Table of newly spawned objects that were pasted from the clipboard. Works with  copy(...) .  info_outline    print(String message)  Prints a string into chat that only the host is able to see. Used for debugging scripts.  info_outline    printToAll(String message, Table  color )  Returns Bool with the result of printing a message into the chat of all connected players.  info_outline    printToColor(String message, String  player_color , Table  color )  Returns Bool with the result of printing a message to a specific Player.  info_outline    removeNotebookTab(Int index)  Returns Bool with the result of removing a notebook tab.  info_outline    sendExternalMessage(Table)  Returns Bool with the result of sending the table to your external script editor, most likely Atom. This is for custom editor functionality.  info_outline    setNotes(String notes)  Returns Bool with the result of replacing the text in the notes window with the string.  info_outline    spawnObject(Table parameters)  Returns Object reference for the object spawned. View the  Spawnable Object  page for Objects that can be spawned.  info_outline    startLuaCoroutine(Object function_owner, String function_name)  Returns Bool with the result of starting a coroutine.  info_outline    stringColorToRGB(String player_color)  Returns Table  Color  requivilent to the Player Color string.  info_outline",
            "title": "Global Management Functions"
        },
        {
            "location": "/base/#function-details",
            "text": "",
            "title": "Function Details"
        },
        {
            "location": "/base/#addnotebooktab",
            "text": "Returns Int of the index of the newly added notebook tab. If it failed to create a new tab, a -1 is returned instead. Indexes for notebook tabs begin at 0.   addNotebookTab(Table parameters)   Table parameters : A Table containing spawning parameters.  parameters.title : A String with the title for the new tab.  parameters.body : A String with text to place into the body of the new tab.  Optional, defaults to an empty string    parameters.color : A String with the  Player color  for the new tab's color.  Optional, defaults to \"Grey\"        parameters   =   { \n     title   =   \"New Tab\" , \n     body   =   \"Body text example.\" , \n     color   =   \"Grey\"  }  addNotebookTab ( parameters )",
            "title": "addNotebookTab(...)"
        },
        {
            "location": "/base/#broadcasttoall",
            "text": "Returns Bool with result of printing an on-screen message to all Players.   broadcastToAll(String message, Table  color )   String message : A String of the message to display on-screen.  Table color : A Table containing the RGB color for the text.    msg   =   \"Hello all.\"  rgb   =   { r = 1 ,   g = 0 ,   b = 0 }  broadcastToAll ( msg ,   rgb )",
            "title": "broadcastToAll(...)"
        },
        {
            "location": "/base/#broadcasttocolor",
            "text": "Returns Bool with result of printing an on-screen message to a specified Player.   broadcastToColor(String message, String  player_color , Table  color )   String message : A String of the message to display on-screen.  String player_color : A String of the color of the Player who will receive the message.  Table color : A Table containing the RGB color for the text.    msg   =   \"Hello White.\"  color   =   \"White\"  rgb   =   { r = 1 ,   g = 0 ,   b = 0 }  broadcastToColor ( msg ,   color ,   rgb )",
            "title": "broadcastToColor(...)"
        },
        {
            "location": "/base/#clearpixelpaint",
            "text": "Returns Bool with result of removing pixel paint from the instance.  clearPixelPaint ()",
            "title": "clearPixelPaint()"
        },
        {
            "location": "/base/#clearvectorpaint",
            "text": "Returns Bool with result of removing vector paint from the instance.  clearPixelPaint ()",
            "title": "clearVectorPaint()"
        },
        {
            "location": "/base/#copy",
            "text": "Returns Bool of result of copying a list of Objects the clipboard. Works with  paste(...) .   copy(Table object_list)   Table object_list : A Table of in-game objects to be copied.  This is similar to highlighting the objects in-game and copying them.      object_list   =   { \n     getObjectFromGUID ( \"######\" ), \n     getObjectFromGUID ( \"######\" ),  }  copy ( object_list )",
            "title": "copy(...)"
        },
        {
            "location": "/base/#destroyobject",
            "text": "Returns Bool with the result of destroying an Object.   destroyObject(Object obj)   Object obj : The Object you wish to delete from the instance.    obj   =   getObjectFromGUID ( \"######\" )  destroyObject ( obj )",
            "title": "destroyObject(...)"
        },
        {
            "location": "/base/#editnotebooktab",
            "text": "Returns Bool with the result of editing an existing Tab in the notebook. Indexes for notebook tabs begin at 0.   editNotebookTab(Table parameters)   Table parameters : A Table containing instructions for the notebook edit.  parameters.index : An Int of the index number for the tab.  parameters.title : A String of the title for the tab.  Optional, defaults to the current title of the tab begin edited.    parameters.body : A String of the body for the tab.  Optional, defaults to the current body of the tab begin edited.    parameters.color : A String of the Player color for who the tab belongs to.  Optional, defaults to the current color of the tab begin edited.        params   =   { \n     index   =   5 , \n     title   =   \"Edited Title\" , \n     body   =   \"This tab was edited via script.\" , \n     color   =   \"Grey\"  }  editNotebookTab ( params )",
            "title": "editNotebookTab(...)"
        },
        {
            "location": "/base/#fliptable",
            "text": "Returns Bool with the result of flipping the table.  flipTable ()",
            "title": "flipTable()"
        },
        {
            "location": "/base/#getallobjects",
            "text": "Returns Table of all spawned  Objects  in the game.  --Example Usage  objList   =   getAllObjects ()  for   _ ,   obj   in   ipairs ( objList )   do \n     print ( obj . getName ())  end   --Example Returned Table  objList   =   { object ,   object ,   object }",
            "title": "getAllObjects()"
        },
        {
            "location": "/base/#getnotebooktabs",
            "text": "Returns Table of all tabs in the notebook. Indexes for notebook tabs begin at 0.  --Example Usage  tabInfo   =   getNotebookTabs ()   --Example Returned Table  { \n     { index = 0 ,   title = \"\" ,   body = \"\" ,   color = \"Grey\" }, \n     { index = 1 ,   title = \"\" ,   body = \"\" ,   color = \"Grey\" }, \n     { index = 2 ,   title = \"\" ,   body = \"\" ,   color = \"Grey\" },  }",
            "title": "getNotebookTabs()"
        },
        {
            "location": "/base/#getnotes",
            "text": "Returns String of the contents of the on-screen notes section.  print ( getNotes ())",
            "title": "getNotes()"
        },
        {
            "location": "/base/#getobjectfromguid",
            "text": "Returns Object from GUID. Will return  nil  if it doesn't exist in-game.!!   getObjectFromGUID(String guid)   String guid : A String of the 6 character GUID of an object.  GUID can be obtained by right clicking an object and going to Scripting.  In a script, it can be obtained from any Object by using .getGUID().      obj   =   getObjectFromGUID ( \"555555\" )",
            "title": "getObjectFromGUID(...)"
        },
        {
            "location": "/base/#getseatedplayers",
            "text": "Returns Table of the colors of seated players.   Tip   Spectators (\"Grey\") are not returned.  DM seat (\"Black\") is not returned.  The order colors are returned in the table are in the same order as players joining the server.    --Example Usage  for   _ ,   v   in   ipairs ( getSeatedPlayers ())   do \n     print ( v )  end   --Example Returned Table  { \"White\" ,   \"Red\" ,   \"Green\" }",
            "title": "getSeatedPlayers()"
        },
        {
            "location": "/base/#log",
            "text": "Returns Bool with result of printing information to the log. The log is a separate chat window which is visible to all players in the instance. It also automatically prints all data in a table if you input it as the Var.   log(Var element, String tag, String label)   Var element : The information you want placed into the log.  String tag : A String of text usable to group log messages by type. (See:  logStyle )  Optional, defaults to an empty String. Empty Strings are not displayed.    String label : A String of text to be placed before the Var element is printed to the log.  Optional, defaults to an empty String. Empty Strings are not displayed.      log ( getAllObjects (),   \"table\" ,   \"All Objects:\" )",
            "title": "log(...)"
        },
        {
            "location": "/base/#logstyle",
            "text": "Returns bool with result of setting style options for the specified tag type for the log. This can also be set in the system console with the \"log_style_tag\" command.   logStyle(String tag, Table color, String prefix, String prefix, String postfix)   String tag_name : A String of the log's tag.  Table Color : A Table of the RGB value of the text color.  String color will also work. Example: \"Red\"    String prefix : A String of text to place before the log entry of this tag type.  Optional, defaults to an empty String. Empty Strings are not displayed.    String postfix : A String of text to place after the log entry of this tag type.  Optional, defaults to an empty String. Empty Strings are not displayed.      function   onLoad () \n     logStyle ( \"players\" ,   { 0.5 , 0.5 , 0.5 },   \"\" ,   \"End List\" ) \n     log ( getSeatedPlayers (),   \"players\" )  end",
            "title": "logStyle(...)"
        },
        {
            "location": "/base/#paste",
            "text": "Returns Table of newly spawned objects that were pasted from the clipboard. Works with  copy(...) .   paste(Table parameters)   Table parameters : A Table containing instructions for the notebook edit.  parameters.position : A Table containing the position Vector of the first object to paste.  Optional, defaults to {0, 3, 0}.    parameters.snap_to_grid : A Bool which determines if snap-to-grid is active on the spawned item.  Optional, defaults to false (off).        params   =   { position   =   { 5 , 5 , 0 },   snap_to_grid   =   true }  paste ( params )",
            "title": "paste(...)"
        },
        {
            "location": "/base/#print",
            "text": "Prints a string into chat that only the host is able to see. Used for debugging scripts.   print(String message)   String message : The String to be printed to chat.    function   onLoad ()   print ( \"Loading Complete\" )   end",
            "title": "print(...)"
        },
        {
            "location": "/base/#printtoall",
            "text": "Returns Bool with the result of printing a message into the chat of all connected players.   printToAll(String message, Table  color )   String message : A String of the message to place into players chats.  Table color : A Table containing r/g/b values for the text's color.    printToAll ( \"Hello World!\" ,   { r = 1 , g = 0 , b = 0 })",
            "title": "printToAll(...)"
        },
        {
            "location": "/base/#printtocolor",
            "text": "Returns Bool with the result of printing a message to a specific Player.   printToColor(String message, String  player_color , Table  color )   String message : A String of the message to place into the player's chat.  Straing player_color : A String of the Player's color that will receive the message.  Table color : A Table containing r/g/b values for the text's color.    printToColor ( \"Hello Red.\" ,   \"Red\" ,   { r = 1 , g = 0 , b = 0 })",
            "title": "printToColor(...)"
        },
        {
            "location": "/base/#removenotebooktab",
            "text": "Returns Bool with the result of removing a notebook tab. Notebook tab indexes begin at 0.   removeNotebookTab(Int index)   Int index : The Int of the index for the tab to remove.    removeNotebookTab ( 0 )",
            "title": "removeNotebookTab(...)"
        },
        {
            "location": "/base/#sendexternalmessage",
            "text": "Returns Bool with the result of sending the table to your external script editor, most likely Atom. This is for custom editor functionality.",
            "title": "sendExternalMessage(...)"
        },
        {
            "location": "/base/#setnotes",
            "text": "Returns Bool with the result of replacing the text in the notes window with the string.   setNotes(String notes)   String notes : A String which will replace the contents of the notes area.    setNotes ( \"This appears in the notes section\" )",
            "title": "setNotes(...)"
        },
        {
            "location": "/base/#spawnobject",
            "text": "Returns Object reference for the object spawned. View the  Spawnable Object  page for Objects that can be spawned.   Tip  Spawned Objects take a moment to be physically spawned into the game. The purpose of the callback functionality is to allow you to run additional actions after the Object has been initiated fully into the instance. It is also possible to add a delay using a  coroutine .    spawnObject(Table parameters)   Table parameters : A Table of parameters used to determine how spawnObject will act.  parameters.type : A String of the  Spawnable Object  type.  parameters.position : A Table Vector of the position to place Object.  Optional, defaults to {x=0, y=3, z=0}.    parameters.rotation : A Table Vector of the rotation of the Object.  Optional, defaults to {x=0, y=0, z=0}    parameters.scale : A Table Vector of the scale of the Object.  Optional, defaults to {x=1, y=1, z=1}    parameters.sound : A Bool for if the spawned Object noise is played.  Optional, defaults to true.    parameters.snap_to_grid : A Bool for snap-to-grid is active on the Object.  Optional, defaults to false.    parameters.callback : A String of the function name you want activated once the Object is initiated.  Optional, no callback is triggered without it.  A callback function has 2 parameters, the Object spawned and, if used, the Table of params.    parameters.callback_owner : An Object of what object has the callback function on it. Global is a valid target as well.  Optional, defaults to Global. Serves no purpose if callback is not also used.    parameters.params : A Table of data to send to the callback to use as parameters. See example.  Optional, default is to not be used.        If you are spawning a  custom Object , you should call  setCustomObject  immediately after spawnObject to set its custom properties.  function   onLoad () \n     futureName   =   \"Spawned By Script!\" \n     spawnParams   =   { \n         type   =   \"rpg_BEAR\" , \n         position         =   { x = 0 ,   y = 3 ,   z =- 5 }, \n         rotation         =   { x = 0 ,   y = 90 ,   z = 0 }, \n         scale            =   { x = 2 ,   y = 2 ,   z = 2 }, \n         sound            =   false , \n         snap_to_grid     =   true , \n         callback         =   \"spawn_callback\" , \n         callback_owner   =   Global , \n         params           =   { name   =   futureName } \n     } \n     spawnObject ( spawnParams )  end  function   spawn_callback ( object_spawned ,   params ) \n     object_spawned . setName ( params . name )  end",
            "title": "spawnObject(...)"
        },
        {
            "location": "/base/#startluacoroutine",
            "text": "Returns Bool with the result of starting a coroutine. A coroutine is similar to a function, but has the unique ability to have its run paused until the next frame of the game using  coroutine.yield(0) .   Attention  You MUST return a 1 at the end of any coroutine or it will throw an error.    startLuaCoroutine(Object function_owner, String function_name)   Object function_owner : The Object that the function being called is on. Global is a valid target.  String function_name : The String containing the name of the function being called as a coroutine.    function   onLoad () \n     startLuaCoroutine ( Global ,   \"print_coroutine\" )  end  --Prints a message, waits 250 frames, prints another message  function   print_coroutine () \n     print ( \"Routine has Started\" ) \n     count   =   0 \n     while   count   <   250   do \n         count   =   count   +   1 \n         coroutine.yield ( 0 ) \n     end \n\n     print ( \"Routine has Finished\" ) \n\n     return   1  end",
            "title": "startLuaCoroutine(...)"
        },
        {
            "location": "/base/#stringcolortorgb",
            "text": "Returns Table  Color  requivilent to the Player Color string.   stringColorToRGB(String player_color)   String player_color  A String of a Player  Color .    printToAll ( \"Blue message\" ,   stringColorToRGB ( \"Blue\" ))",
            "title": "stringColorToRGB(...)"
        },
        {
            "location": "/object/",
            "text": "The Object class represents any entity within tabletop simulator. Once you have a reference to an object in youre script you can call functions on it directly. Example: \nobj.getPosition(...)\n. You can get a reference to an object multiple ways;\n\n\n\n\nUsing the \nself\n property if your script is on an Object and referring to that Object.\n\n\nUsing \ngetObjectFromGUID(...)\n with the object's GUID (found by right clicking it with the pointer).\n\n\nGetting it as a return from another function, like with \nspawnObject(...)\n.\n\n\n\n\nMember Variable Summary\n\u00b6\n\n\nMember Variables\n\u00b6\n\n\nThese are variables that objects share. They allow for direct access to an Object's property information without a helping function. Some are read-only.\n\n\nRead Example = \nisResting = self.resting\n Write Example = \nself.resting = true\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nangular_drag\n\n\nAngular drag. \nUnity rigidbody property\n.\n\n\nFloat\n\n\n\n\n\n\nauto_raise\n\n\nIf an object should be lifted above other objects to avoid collision when held by a player.\n\n\nBool\n\n\n\n\n\n\nbounciness\n\n\nBounciness, value of 0-1. \nUnity physics material\n.\n\n\nFloat\n\n\n\n\n\n\ndrag\n\n\nDrag. \nUnity rigidbody property\n.\n\n\nFloat\n\n\n\n\n\n\ndynamic_friction\n\n\nDynamic friction, value of 0-1. \nUnity physics material\n.\n\n\nFloat\n\n\n\n\n\n\ngrid_projection\n\n\nIf grid lines can appear on the Object if visible grids are turned on.\n\n\nBool\n\n\n\n\n\n\nguid\n\n\nThe 6 character unique Object identifier within Tabletop Simulator.\n\n\nString\n\n\n\n\n\n\nheld_by_color\n\n\nThe Color of the Player that is holding the object.\n\n\nString\n\n\n\n\n\n\ninteractable\n\n\nIf an object can be interacted with by Players. Other object will still be able to interact with it.\n\n\nBool\n\n\n\n\n\n\nmass\n\n\nMass. \nUnity rigidbody property\n.\n\n\nFloat\n\n\n\n\n\n\nname\n\n\nThe Object's name. Read only, use \nsetName(\"\")\n to write to it.\n\n\nString\n\n\n\n\n\n\nresting\n\n\nIf an Object is at rest. \nUnity rigidbody property\n.\n\n\nBool\n\n\n\n\n\n\nscript_code\n\n\nThe Lua Script on the Object.\n\n\nString\n\n\n\n\n\n\nscript_state\n\n\nThe saved data on the object. See \nonSave()\n.\n\n\nString\n\n\n\n\n\n\nstatic_friction\n\n\nStatic friction, value of 0-1. \nUnity physics material\n.\n\n\nFloat\n\n\n\n\n\n\nsticky\n\n\nIf other Objects on top of this one are also picked up when this Object is.\n\n\nBool\n\n\n\n\n\n\ntag\n\n\nThis object's type. Read only.\n\n\nString\n\n\n\n\n\n\ntooltip\n\n\nIf the tooltip opens when a pointer hovers over the object. Tooltips display name and description.\n\n\nBool\n\n\n\n\n\n\nuse_gravity\n\n\nIf gravity affects this object.\n\n\nBool\n\n\n\n\n\n\nuse_grid\n\n\nIf snapping to grid is enabled or not.\n\n\nBool\n\n\n\n\n\n\nuse_hands\n\n\nIf this object can be held in a hand zone.\n\n\nBool\n\n\n\n\n\n\nuse_snap_points\n\n\nIf snap points are used or ignored.\n\n\nBool\n\n\n\n\n\n\n\n\nThese member variables are classes of their own, and have their own member variables. Each one is for a special type of Object.\n\n\n\n\n\n\n\n\nVariable Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAssetBundle\n\n\nAn \nAssetBundle\n, which is a type of custom object made in Unity.\n\n\n\n\n\n\nClock\n\n\nA \nClock\n, which is the in-game digital clock.\n\n\n\n\n\n\nCounter\n\n\nA \nCounter\n, which is the in-game digital counter.\n\n\n\n\n\n\nRPGFigurine\n\n\nAn \nRPGFigurine\n, which is an in-game animated figurine.\n\n\n\n\n\n\nTextTool\n\n\nA \nTextTool\n, which is an in-game text display system.\n\n\n\n\n\n\n\n\n\n\nFunction Summary\n\u00b6\n\n\nTransform Functions\n\u00b6\n\n\nThese functions handle the physical attributes of an Object: Position, Rotation, Scale, Bounds, Velocity. In other words, moving objects around as well as getting information on how they are moving.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\ninfo_outline\n\n\n\n\n\n\n\n\n\n\naddForce(Vector, Int force_type)\n\n\nAdds force to an object in a directional Vector. Returns Bool.\n\n\ninfo_outline\n\n\n\n\n\n\naddTorque(Vector, Int force_type)\n\n\nAdds torque to an object in a rotational Vector. Returns Bool.\n\n\ninfo_outline\n\n\n\n\n\n\ngetAngularVelocity()\n\n\nReturns a Vector of the current angular velocity.\n\n\n\n\n\n\n\n\ngetBounds()\n\n\nReturns a Table of Vector information describing the size of an object in Global terms.\n\n\ninfo_outline\n\n\n\n\n\n\ngetBoundsNormalized()\n\n\nReturns a Table of Vector information describing the size of an object in Global terms, as if it was rotated to {0,0,0}.\n\n\ninfo_outline\n\n\n\n\n\n\ngetPosition()\n\n\nReturns a Vector of the current world position.\n\n\n\n\n\n\n\n\ngetRotation()\n\n\nReturns a Vector of the current rotation.\n\n\n\n\n\n\n\n\ngetScale()\n\n\nReturns a Vector of the current scale.\n\n\ninfo_outline\n\n\n\n\n\n\ngetTransformForward()\n\n\nReturns a Vector of the forward direction of this object.\n\n\ninfo_outline\n\n\n\n\n\n\ngetTransformRight()\n\n\nReturns a Vector of the right direction of this object.\n\n\ninfo_outline\n\n\n\n\n\n\ngetTransformUp()\n\n\nReturns a Vector of the up direction of this object.\n\n\ninfo_outline\n\n\n\n\n\n\ngetVelocity()\n\n\nReturns a Vector of the current velocity.\n\n\n\n\n\n\n\n\nisSmoothMoving()\n\n\nIndicates if an object is traveling as part of a Smooth move. Smooth moving is performed by setPositionSmooth and setRotationSmooth. Returns Bool.\n\n\n\n\n\n\n\n\npositionToLocal(Vector)\n\n\nReturns a Vector after converting a world Vector to a local Vector.\n\n\ninfo_outline\n\n\n\n\n\n\npositionToWorld(Vector)\n\n\nReturns a Vector after converting a local Vector to a world Vector.\n\n\ninfo_outline\n\n\n\n\n\n\nrotate(Vector)\n\n\nRotates Object smoothly in the direction of the given Vector. Returns Bool.\n\n\n\n\n\n\n\n\nscale(Vector or Float)\n\n\nScales Object by a multiple. Returns Bool.\n\n\ninfo_outline\n\n\n\n\n\n\nsetAngularVelocity(Vector)\n\n\nSets a Vector as the current angular velocity. Returns Bool.\n\n\n\n\n\n\n\n\nsetPosition(Vector)\n\n\nInstantly moves an Object to the given Vector. Returns Bool.\n\n\n\n\n\n\n\n\nsetPositionSmooth\n(Vector, Bool collide, Bool fast)\n\n\nMoves the Object smoothly to the given Vector. Returns Bool.\n\n\ninfo_outline\n\n\n\n\n\n\nsetRotation(Vector)\n\n\nInstantly rotates an Object to the given Vector.\n\n\n\n\n\n\n\n\nsetRotationSmooth\n(Vector, Bool collide, Bool fast)\n\n\nRotates the Object smoothly to the given Vector. Returns Bool.\n\n\ninfo_outline\n\n\n\n\n\n\nsetScale(Vector)\n\n\nSets a Vector as the current scale. Returns Bool.\n\n\n\n\n\n\n\n\nsetVelocity(Vector)\n\n\nSets a Vector as the current velocity. Returns Bool.\n\n\n\n\n\n\n\n\ntranslate(Vector)\n\n\nSmoothly moves Object by the given Vector offset. Returns Bool.\n\n\n\n\n\n\n\n\n\n\nUI Functions\n\u00b6\n\n\nThese functions allow for the creation/editing/removal of functional buttons and text inputs which themselves trigger code within your scripts.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\ninfo_outline\n\n\n\n\n\n\n\n\n\n\nclearButtons()\n\n\nRemoves all scripted buttons. Returns Bool.\n\n\n\n\n\n\n\n\nclearInputs()\n\n\nRemoves all scripted inputs. Returns Bool.\n\n\n\n\n\n\n\n\ncreateButton(Table parameters)\n\n\nCreates a scripted button attached to the Object. Returns Bool.\n\n\ninfo_outline\n\n\n\n\n\n\ncreateInput(Table parameters)\n\n\nCreates a scripted input attached to the Object. Returns Bool.\n\n\ninfo_outline\n\n\n\n\n\n\neditButton(Table parameters)\n\n\nModify an existing button. Returns Bool.\n\n\ninfo_outline\n\n\n\n\n\n\neditInput(Table parameters)\n\n\nModify an existing input. Returns Bool.\n\n\ninfo_outline\n\n\n\n\n\n\ngetButtons()\n\n\nReturns a Table of all buttons on this Object.\n\n\ninfo_outline\n\n\n\n\n\n\ngetInputs()\n\n\nReturns a Table of all inputs on this Object.\n\n\ninfo_outline\n\n\n\n\n\n\nremoveButton(Int index)\n\n\nRemoves a specific button. Returns Bool.\n\n\ninfo_outline\n\n\n\n\n\n\nremoveInput(Int index)\n\n\nRemoves a specific button. Returns Bool.\n\n\ninfo_outline\n\n\n\n\n\n\n\n\nGet Functions\n\u00b6\n\n\nThese functions obtain information from an object.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\ninfo_outline\n\n\n\n\n\n\n\n\n\n\ngetColorTint()\n\n\nReturns Color tint.\n\n\n\n\n\n\n\n\ngetCustomObject()\n\n\nReturns a Table with the Custom Object information of a Custom Object.\n\n\ninfo_outline\n\n\n\n\n\n\ngetLock()\n\n\nReturns a Bool of the lock status. True is locked.\n\n\n\n\n\n\n\n\ngetObjects()\n\n\nReturns a Table of objects in the script zone/bag/deck.\n\n\ninfo_outline\n\n\n\n\n\n\ngetQuantity()\n\n\nReturns an Int of how many objects are in the stack. Returns -1 if the Object is not a stack.\n\n\n\n\n\n\n\n\ngetRotationValues()\n\n\nReturns a Table of rotation values. Rotation values are used to give value to different rotations (like dice).\n\n\ninfo_outline\n\n\n\n\n\n\ngetStateId()\n\n\nReturns an Int for the current \nstate\n ID (index) an object is it. Returns -1 if there are no other states. State ids (indexes) start at 1.\n\n\n\n\n\n\n\n\ngetStates()\n\n\nReturns a Table of information on the \nstates\n of an Object.\n\n\ninfo_outline\n\n\n\n\n\n\ngetValue()\n\n\nReturns an Int as the value. What the value represents depends on what type of Object this function is used on.\n\n\ninfo_outline\n\n\n\n\n\n\n\n\nSet Functions\n\u00b6\n\n\nThese functions apply action to an object. They take some property in order to work.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\ninfo_outline\n\n\n\n\n\n\n\n\n\n\nsetColorTint(Color)\n\n\nSets the Color tint. Returns Bool.\n\n\n\n\n\n\n\n\nsetCustomObject(Table parameters)\n\n\nSets a custom Object's properties. Returns Bool.\n\n\ninfo_outline\n\n\n\n\n\n\nsetLock(Bool lock)\n\n\nSets if an object is locked in place. Returns Bool.\n\n\n\n\n\n\n\n\nsetRotationValues(Table rotation_values)\n\n\nSets rotation values of an object. Rotation values are used to give value to different rotations (like dice). Returns Bool.\n\n\ninfo_outline\n\n\n\n\n\n\nsetState(Int state_id)\n\n\nReturns Object of set \nstate\n of an Object. State ids (indexes) start at 1.\n\n\n\n\n\n\n\n\nsetValue(Var value)\n\n\nSets an Int as the value. What the value represents depends on what type of Object it is. Returns Bool.\n\n\ninfo_outline\n\n\n\n\n\n\n\n\nAction Function\n\u00b6\n\n\nThese functions perform general actions on objects and do not require any input parameters.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\ninfo_outline\n\n\n\n\n\n\n\n\n\n\ncall(String func_name,\nTable func_params)\n\n\nUsed to call a Lua function on this Object. Returns Var.\n\n\ninfo_outline\n\n\n\n\n\n\nflip()\n\n\nFlip Object over. Returns Bool.\n\n\n\n\n\n\n\n\nclone(Table parameters)\n\n\nCopy/Paste this Object, returns a reference to the new Object.\n\n\ninfo_outline\n\n\n\n\n\n\ncut()\n\n\nCuts (splits in half) a deck or stack Object.\n\n\n\n\n\n\n\n\ndeal(Int number,\nString player_color, Int index)\n\n\nDeals Objects. Will deal from decks/bags/stacks/individual items. Returns Object dealt.\n\n\ninfo_outline\n\n\n\n\n\n\ndealToColorWithOffset\n(Vector, Bool flip, String player_color)\n\n\nDeals from a deck to a position relative to the hand zone. Returns Object dealt.\n\n\ninfo_outline\n\n\n\n\n\n\ndestruct()\n\n\nDestroys Object. Allows for \nself.destruct()\n. Returns Bool.\n\n\n\n\n\n\n\n\nhighlightOn(Color, Float duration)\n\n\nCreates a highlight around an Object. Returns Bool.\n\n\n\n\n\n\n\n\nhighlightOff(Color)\n\n\nRemoves a highlight from around an Object. Returns Bool.\n\n\n\n\n\n\n\n\nputObject(Object put_object)\n\n\nPlaces an object into a container (chip stacks/bags/decks). Returns Bool.\n\n\ninfo_outline\n\n\n\n\n\n\nrandomize()\n\n\nShuffles deck/bag, rolls dice/coin, lifts other objects into the air. Same as pressing \nR\n by default. Returns Bool.\n\n\n\n\n\n\n\n\nreload()\n\n\nReturns Object reference of itself after it respawns itself.\n\n\ninfo_outline\n\n\n\n\n\n\nroll()\n\n\nRolls dice/coins. Returns Bool.\n\n\n\n\n\n\n\n\nshuffle()\n\n\nShuffles/shakes up contents of a deck or bag. Returns Bool.\n\n\n\n\n\n\n\n\nshuffleStates()\n\n\nReturns an Object reference to a new \nstate\n after randomly selecting and changing to one.\n\n\n\n\n\n\n\n\ntakeObject(Table parameters)\n\n\nReturns an Object reference of Object taken from a container (bag/deck/chip stack) and placed into the world.\n\n\ninfo_outline\n\n\n\n\n\n\n\n\n\n\nFunction Details\n\u00b6\n\n\nTransform Function Details\n\u00b6\n\n\naddForce(...)\n\u00b6\n\n\nAdds force to an object in a directional Vector.\n\n\n\n\naddForce(Vector, Int force_type)\n\n\n\n\nVector\n: A Vector of the direction and magnitude of force.\n\n\nForce Type\n: An Int representing the force type to apply. Options below.\n\n\nOptional, defaults to 3.\n\n\n1\n: Continuous force, uses mass. \n(Force)\n\n\n2\n: Continuous acceleration, ignores mass. \n(Acceleration)\n\n\n3\n: Instant force impulse, uses mass. \n(Impulse)\n\n\n4\n: Instant velocity change, ignores mass. \n(Velocity Change)\n\n\n\n\n\n\n\n\n\n\n\n\naddTorque(...)\n\u00b6\n\n\nAdds torque to an object in a rotational Vector.\n\n\n\n\naddTorque(Vector, Int force_type)\n\n\n\n\nVector\n: A Vector of the direction and magnitude of rotational force.\n\n\nForce Type\n: An Int representing the force type to apply. Options below.\n\n\nOptional, defaults to 3.\n\n\n1\n: Continuous force, uses mass. \n(Force)\n\n\n2\n: Continuous acceleration, ignores mass. \n(Acceleration)\n\n\n3\n: Instant force impulse, uses mass. \n(Impulse)\n\n\n4\n: Instant velocity change, ignores mass. \n(Velocity Change)\n\n\n\n\n\n\n\n\n\n\n\n\ngetBounds()\n\u00b6\n\n\nReturns a Table of Vector information describing the size of an object in Global terms. \nBounds\n are part of Unity, and represent an imaginary square box that can be drawn around an object. Unlike scale, it can help indicate the size of an object in in-game units, not just relative model size.\n\n\n\n\nReturn Table\n\n\n\n\ncenter\n: The center of the bounding box.\n\n\nsize\n: The size of the bounding box.\n\n\noffset\n: The offset of the center of the bounding box from the middle of the Object model.\n\n\n\n\n\n\n--Example returned Table\n\n\n{\n\n    \ncenter\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n3\n,\n \nz\n=\n0\n,\n \n0\n,\n \n3\n,\n \n0\n},\n\n    \nsize\n \n=\n \n{\nx\n=\n5\n,\n \ny\n=\n5\n,\n \nz\n=\n5\n},\n \n5\n,\n \n5\n,\n \n5\n},\n\n    \noffset\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=-\n1\n,\n \nz\n=\n0\n,\n \n0\n,\n \n-\n1\n,\n \n0\n}\n\n\n}\n\n\n\n\n\n\n\ngetBoundsNormalized()\n\u00b6\n\n\nReturns a Table of Vector information describing the size of an object in Global terms, as if it was rotated to {0,0,0}. \nBounds\n are part of Unity, and represent an imaginary square box that can be drawn around an object. Unlike scale, it can help indicate the size of an object in in-game units, not just relative model size.\n\n\n\n\nReturn Table\n\n\n\n\ncenter\n: The center of the bounding box.\n\n\nsize\n: The size of the bounding box.\n\n\noffset\n: The offset of the center of the bounding box from the middle of the Object model.\n\n\n\n\n\n\n--Example returned Table\n\n\n{\n\n    \ncenter\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n3\n,\n \nz\n=\n0\n,\n \n0\n,\n \n3\n,\n \n0\n},\n\n    \nsize\n \n=\n \n{\nx\n=\n5\n,\n \ny\n=\n5\n,\n \nz\n=\n5\n},\n \n5\n,\n \n5\n,\n \n5\n},\n\n    \noffset\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=-\n1\n,\n \nz\n=\n0\n,\n \n0\n,\n \n-\n1\n,\n \n0\n}\n\n\n}\n\n\n\n\n\n\n\ngetScale()\n\u00b6\n\n\nReturns a Vector of the current scale. Scale is not an absolute measurement, it is a multiple of the Object's default model size. So {x=2, y=2, z=2} would be a model twice its default size, not 2 units large.\n\n\n\n\ngetTransformForward()\n\u00b6\n\n\nReturns a Vector of the forward direction of this Object. The direction is relative to how the object is facing.\n\n\n--Example of moving forward 5 units\n\n\nfunction\n \nonLoad\n()\n\n    \ndistance\n \n=\n \n5\n\n    \npos_target\n \n=\n \nself\n.\ngetTransformForward\n()\n\n    \npos_current\n \n=\n \nself\n.\ngetPosition\n()\n\n    \npos\n \n=\n \n{\n\n        \nx\n \n=\n \npos_current\n.\nx\n \n+\n \npos_target\n.\nx\n \n*\n \ndistance\n,\n\n        \ny\n \n=\n \npos_current\n.\ny\n \n+\n \npos_target\n.\ny\n \n*\n \ndistance\n,\n\n        \nz\n \n=\n \npos_current\n.\nz\n \n+\n \npos_target\n.\nz\n \n*\n \ndistance\n,\n\n    \n}\n\n    \nself\n.\nsetPositionSmooth\n(\npos\n)\n\n\nend\n\n\n\n\n\n\n\ngetTransformRight()\n\u00b6\n\n\nReturns a Vector of the forward direction of this object. The direction is relative to how the object is facing.\n\n\n--Example of moving right 5 units\n\n\nfunction\n \nonLoad\n()\n\n    \ndistance\n \n=\n \n5\n\n    \npos_target\n \n=\n \nself\n.\ngetTransformRight\n()\n\n    \npos_current\n \n=\n \nself\n.\ngetPosition\n()\n\n    \npos\n \n=\n \n{\n\n        \nx\n \n=\n \npos_current\n.\nx\n \n+\n \npos_target\n.\nx\n \n*\n \ndistance\n,\n\n        \ny\n \n=\n \npos_current\n.\ny\n \n+\n \npos_target\n.\ny\n \n*\n \ndistance\n,\n\n        \nz\n \n=\n \npos_current\n.\nz\n \n+\n \npos_target\n.\nz\n \n*\n \ndistance\n,\n\n    \n}\n\n    \nself\n.\nsetPositionSmooth\n(\npos\n)\n\n\nend\n\n\n\n\n\n\n\ngetTransformUp()\n\u00b6\n\n\nReturns a Vector of the up direction of this Object. The direction is relative to how the object is facing.\n\n\n--Example of moving up 5 units\n\n\nfunction\n \nonLoad\n()\n\n    \ndistance\n \n=\n \n5\n\n    \npos_target\n \n=\n \nself\n.\ngetTransformUp\n()\n\n    \npos_current\n \n=\n \nself\n.\ngetPosition\n()\n\n    \npos\n \n=\n \n{\n\n        \nx\n \n=\n \npos_current\n.\nx\n \n+\n \npos_target\n.\nx\n \n*\n \ndistance\n,\n\n        \ny\n \n=\n \npos_current\n.\ny\n \n+\n \npos_target\n.\ny\n \n*\n \ndistance\n,\n\n        \nz\n \n=\n \npos_current\n.\nz\n \n+\n \npos_target\n.\nz\n \n*\n \ndistance\n,\n\n    \n}\n\n    \nself\n.\nsetPositionSmooth\n(\npos\n)\n\n\nend\n\n\n\n\n\n\n\npositionToLocal(...)\n\u00b6\n\n\nReturns a Vector after converting a world vector to a local Vector. A world Vector is a positional Vector using the world's coordinate system. A Local Vector is a positional Vector that is relative to the position of the given object.\n\n\n\n\npositionToWorld(...)\n\u00b6\n\n\nReturns a Vector after converting a local Vector to a world Vector. A world Vector is a positional Vector using the world's coordinate system. A Local Vector is a positional Vector that is relative to the position of the given object.\n\n\n\n\nrotate(Vector)\n\u00b6\n\n\nRotates Object smoothly in the direction of the given Vector. This does not set the Object to face a specific rotation, it rotates the Object around by the number of degrees given for x/y/z.\n\n\n--Rotates object 90 degrees around its Y axis\n\n\nself\n.\nrotate\n({\nx\n=\n0\n,\n \ny\n=\n90\n,\n \nz\n=\n0\n})\n\n\n\n\n\n\n\nscale(...)\n\u00b6\n\n\nScales Object by a multiple. This does not set the Object to a specific scale, it scales the Object by the given multiple.\n\n\n\n\nscale(Vector or Float)\n\n\nThis function accepts either a Vector or Float as a parameter. If you use a Float, it will multiple the Object's x/y/z by that number.\n\n\n\n\n--Both examples work to scale an object to be twice its current scale\n\n\nself\n.\nscale\n({\nx\n=\n2\n,\n \ny\n=\n2\n,\n \nz\n=\n2\n})\n\n\nself\n.\nscale\n(\n2\n)\n\n\n\n\n\n\n\nsetPositionSmooth(...)\n\u00b6\n\n\nMoves the Object smoothly to the given Vector.\n\n\n\n\nsetPositionSmooth(Vector, Bool collide, Bool fast)\n\n\n\n\nVector\n: A positional Vector.\n\n\nBool collide\n: A Bool for if the Object will collide with other Objects while moving.\n\n\nBool fast\n: A Bool for if the Object is moved quickly.\n\n\n\n\n\n\n\n\nsetRotationSmooth(...)\n\u00b6\n\n\nRotates the Object smoothly to the given Vector.\n\n\n\n\nsetRotationSmooth(Vector, Bool collide, Bool fast)\n\n\n\n\nVector\n: A rotational Vector.\n\n\nBool collide\n: A Bool for if the Object will collide with other Objects while rotating.\n\n\nBool fast\n: A Bool for if the Object is rotated quickly.\n\n\n\n\n\n\n\n\nUI Function Details\n\u00b6\n\n\ncreateButton(...)\n\u00b6\n\n\nCreates a scripted button attached to the Object. Scripted buttons are buttons that can be clicked while in-game that trigger a function in a script.\n\n\nButton Tips\nButtons can not be clicked from their back side.\nButtons can not be clicked if there is another object between the pointer and the button. This does not include the Object the button is attached to.\nButtons are placed relative to the Object they are attached to.\nThe maximum font size is capped at 1000.\nThe minimum width/height is 60. Any lower number (besides 0) will appear to be 60. This prevents visual glitches involving the corner rounding.\nA button width/height of 0 will cause the button not to be drawn, but its label will be. This can be a way to attach text to an Object.\nYou cannot assign an index to a button. It is given one automatically.\n\n\ncreateButton(Table parameters)\n\n\n\n\nTable parameters\n: A Table containing the information used to spawn the button.\n\n\nparameters.click_function\n: A String of the function's name that will be run when button is clicked.\n\n\nparameters.function_owner\n: The Object which contains the click_function function.\n\n\nOptional, Defaults to Global.\n\n\n\n\n\n\nparameters.label\n: A String of text that appears on the button.\n\n\nOptional, defaults to an empty string.\n\n\n\n\n\n\nparameters.position\n: A Vector of where the button appears, relative to the Object's center.\n\n\nOptional, defaults to {x=0, y=0, z=0}.\n\n\n\n\n\n\nparameters.rotation\n: A Vector of how the button is rotated, relative to the Object's rotation.\n\n\nOptional, defaults to {x=0, y=0, z=0}.\n\n\n\n\n\n\nparameters.scale\n: A Vector of the scale of the button, relative to the Object's scale.\n\n\nOptional, defaults to {x=1, y=1, z=1}.\n\n\n\n\n\n\nparameters.width\n: An Int of how wide the button will be, relative to the Object.\n\n\nOptional, defaults to 100.\n\n\n\n\n\n\nparameters.height\n: An Int of how tall the button will be, relative to the Object.\n\n\nOptional, defaults to 100.\n\n\n\n\n\n\nparameters.font_size\n: An Int of the size the label font will be, relative to the Object.\n\n\nOptional, defaults to 100.\n\n\n\n\n\n\nparameters.color\n: A Color for the clickable button.\n\n\nOptional, defaults to {r=1, g=1, b=1}.\n\n\n\n\n\n\nparameters.font_color\n: A Color for the label text.\n\n\nOptional, defaults to {r=0, g=0, b=0}.\n\n\n\n\n\n\nparameters.tooltip\n: A String for a popup of text, similar to how an Object's name is displayed on mouseover.\n\n\nOptional, defaults to an empty string.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclick_function(Object obj, String player_clicker_color)\n\n\nThe click function which is activated by clicking this button has its own parameters it is passed automatically.\n\n\n\n\nObject obj\n: The Object the button is attached to.\n\n\nString player_clicker_color\n: A String of the Color of the player that pressed the button.\n\n\n\n\n\n\nfunction\n \nonLoad\n()\n\n    \nparams\n \n=\n \n{\n\n        \nclick_function\n \n=\n \n\"click_func\"\n,\n\n        \nfunction_owner\n \n=\n \nself\n,\n\n        \nlabel\n          \n=\n \n\"Test\"\n,\n\n        \nposition\n       \n=\n \n{\n0\n,\n \n1\n,\n \n0\n},\n\n        \nrotation\n       \n=\n \n{\n0\n,\n \n180\n,\n \n0\n},\n\n        \nwidth\n          \n=\n \n800\n,\n\n        \nheight\n         \n=\n \n400\n,\n\n        \nfont_size\n      \n=\n \n340\n,\n\n        \ncolor\n          \n=\n \n{\n0.5\n,\n \n0.5\n,\n \n0.5\n},\n\n        \nfont_color\n     \n=\n \n{\n1\n,\n \n1\n,\n \n1\n},\n\n        \ntooltip\n        \n=\n \n\"This text appears on mouseover.\"\n,\n\n    \n}\n\n    \nself\n.\ncreateButton\n(\nparams\n)\n\n\nend\n\n\n\nfunction\n \nclick_func\n(\nobj\n,\n \ncolor\n)\n\n    \nprint\n(\nobj\n)\n\n    \nprint\n(\ncolor\n)\n\n\nend\n\n\n\n\n\n\n\nBug\n\n\nButton scale currently distorts button height and width if the button is rotated at anything besides \n{0,0,0}\n.\n\n\n\n\n\n\ncreateInput(...)\n\u00b6\n\n\nCreates a scripted input attached to the Object. Scripted inputs are boxes you can click inside of in-game to input/edit text. Every letter typed triggers the function. The bool that is returned as part of the input_function allows you to determine when a player has finished editing the input.\n\n\nInput Tips\nInputs can not be clicked from their back side.\nInputs can not be clicked if there is another object between the pointer and the inputs. This does not include the Object the input is attached to.\nInputs are placed relative to the Object they are attached to.\nThe maximum font size is capped at 1000.\nThe minimum width/height is 60. Any lower number (besides 0) will appear to be 60. This prevents visual glitches involving the corner rounding.\nFont that does not fit in the input window's width/height does NOT display. To know how much height you need for each line, the formula is \n(font_size * # of lines) + 23\n. In other words, multiply how many lines of text you want to display by your font_size and add 23. That is your height value.\nYou cannot assign an index to an input. It is given one automatically.\n\n\ncreateInput(Table parameters)\n\n\n\n\nTable parameters\n: A Table containing the information used to spawn the input.\n\n\nparameters.input_function\n: A String of the function's name that will be run when a key is used or when it is deselected.\n\n\nparameters.function_owner\n: The Object which contains the input_function function.\n\n\nOptional, Defaults to Global.\n\n\n\n\n\n\nparameters.label\n: A String of text that appears as greyed out text when there is no value in the input.\n\n\nOptional, defaults to an empty string.\n\n\n\n\n\n\nparameters.position\n: A Vector of where the input appears, relative to the Object's center.\n\n\nOptional, defaults to {x=0, y=0, z=0}.\n\n\n\n\n\n\nparameters.rotation\n: A Vector of how the input is rotated, relative to the Object's rotation.\n\n\nOptional, defaults to {x=0, y=0, z=0}.\n\n\n\n\n\n\nparameters.scale\n: A Vector of the scale of the input, relative to the Object's scale.\n\n\nOptional, defaults to {x=1, y=1, z=1}.\n\n\n\n\n\n\nparameters.width\n: An Int of how wide the input will be, relative to the Object.\n\n\nOptional, defaults to 100.\n\n\n\n\n\n\nparameters.height\n: An Int of how tall the input will be, relative to the Object.\n\n\nOptional, defaults to 100.\n\n\n\n\n\n\nparameters.font_size\n: An Int of the size the label/value font will be, relative to the Object.\n\n\nOptional, defaults to 100.\n\n\n\n\n\n\nparameters.color\n: A Color for the input's background.\n\n\nOptional, defaults to {r=1, g=1, b=1}.\n\n\n\n\n\n\nparameters.font_color\n: A Color for the value text.\n\n\nOptional, defaults to {r=0, g=0, b=0}.\n\n\n\n\n\n\nparameters.tooltip\n: A String for a popup of text, similar to how an Object's name is displayed on mouseover.\n\n\nOptional, defaults to an empty string.\n\n\n\n\n\n\nparameters.alignment\n: An Int for how text is aligned in the input box.\n\n\nOptional, defaults to 1.\n\n\n1\n: Automatic\n\n\n2\n: Left\n\n\n3\n: Center\n\n\n4\n: Right\n\n\n5\n: Justified\n\n\n\n\n\n\nparameters.value\n: A String of the text entered into the input.\n\n\nOptional, defaults to an empty string.\n\n\n\n\n\n\nparameters.validation\n: An Int which determines what characters can be input into the value.\n\n\nOptional, defaults to 1.\n\n\n1\n: None\n\n\n2\n: Integer\n\n\n3\n: Float\n\n\n4\n: Alphanumeric\n\n\n5\n: Username\n\n\n6\n: Name\n\n\n\n\n\n\nparameters.tab\n: An Int which determines how pressing tab is handled when inputting.\n\n\nOptional, defaults to 1.\n\n\n1\n: None\n\n\n2\n: Select Next Input\n\n\n3\n: Indent\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninput_function(Object obj, String player_clicker_color, String input_value, Bool selected)\n\n\nThe click function which is activated by clicking this button has its own parameters it is passed automatically.\n\n\n\n\nObject obj\n: The Object the input is attached to.\n\n\nString player_clicker_color\n: A String of the Color of the player that has selected/edited the input.\n\n\nString input_value\n: A String of the text currently in the input.\n\n\nBool selected\n: A Bool for if the value box is still being edited or not.\n\n\n\n\n\n\nfunction\n \nonLoad\n()\n\n    \nself\n.\ncreateInput\n({\n\n        \ninput_function\n \n=\n \n\"input_func\"\n,\n\n        \nfunction_owner\n \n=\n \nself\n,\n\n        \nlabel\n          \n=\n \n\"Gold\"\n,\n\n        \nalignment\n      \n=\n \n4\n,\n\n        \nposition\n       \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n1\n,\n \nz\n=\n0\n},\n\n        \nwidth\n          \n=\n \n800\n,\n\n        \nheight\n         \n=\n \n300\n,\n\n        \nfont_size\n      \n=\n \n323\n,\n\n        \nvalidation\n     \n=\n \n2\n,\n\n    \n})\n\n\nend\n\n\n\nfunction\n \ninput_func\n(\nobj\n,\n \ncolor\n,\n \ninput\n,\n \nstillEditing\n)\n\n    \nprint\n(\ninput\n)\n\n    \nif\n \nnot\n \nstillEditing\n \nthen\n\n        \nprint\n(\n\"Finished editing.\"\n)\n\n    \nend\n\n\nend\n\n\n\n\n\n\n\neditButton(...)\n\u00b6\n\n\nModify an existing button. The only parameter that is required is the index. The rest are optional, and not using them will cause the edited button's element to remain. Indexes start at 0. The first button on any given Object has an index of 0, the next button on it has an index of 1, etc. Each Object has its own indexes.\n\n\n\n\neditButton(Table parameters)\n\n\n\n\nTable parameters\n: A Table containing the information used to spawn the button.\n\n\nparameters.index\n: An Int of the index of the button you want to edit.\n\n\nparameters.click_function\n: A String of the function's name that will be run when button is clicked.\n\n\nparameters.function_owner\n: The Object which contains the click_function function.\n\n\nparameters.label\n: A String of text that appears on the button.\n\n\nparameters.position\n: A Vector of where the button appears, relative to the Object's center.\n\n\nparameters.rotation\n: A Vector of how the button is rotated, relative to the Object's rotation.\n\n\nparameters.scale\n: A Vector of the scale of the button, relative to the Object's scale.\n\n\nparameters.width\n: An Int of how wide the button will be, relative to the Object.\n\n\nparameters.height\n: An Int of how tall the button will be, relative to the Object.\n\n\nparameters.font_size\n: An Int of the size the label font will be, relative to the Object.\n\n\nparameters.color\n: A Color for the clickable button.\n\n\nparameters.font_color\n: A Color for the label text.\n\n\nparameters.tooltip\n: A String for a popup of text, similar to how an Object's name is displayed on mouseover.\n\n\n\n\n\n\n\n\n\n\nself\n.\neditButton\n({\nindex\n=\n0\n,\n \nlabel\n=\n\"New Label\"\n})\n\n\n\n\n\n\n\neditInput(...)\n\u00b6\n\n\nModify an existing input. The only parameter that is required is the index. The rest are optional, and not using them will cause the edited input's element to remain. Indexes start at 0. The first input on any given Object has an index of 0, the next input on it has an index of 1, etc. Each Object has its own indexes.\n\n\n\n\neditInput(Table parameters)\n\n\n\n\nTable parameters\n: A Table containing the information used to spawn the input.\n\n\nparameters.index\n: An Int of the index of the input you want to edit.\n\n\nparameters.input_function\n: A String of the function's name that will be run when a key is used or when it is deselected.\n\n\nparameters.function_owner\n: The Object which contains the input_function function.\n\n\nparameters.label\n: A String of text that appears as greyed out text when there is no value in the input.\n\n\nparameters.position\n: A Vector of where the input appears, relative to the Object's center.\n\n\nparameters.rotation\n: A Vector of how the input is rotated, relative to the Object's rotation.\n\n\nparameters.scale\n: A Vector of the scale of the input, relative to the Object's scale.\n\n\nparameters.width\n: An Int of how wide the input will be, relative to the Object.\n\n\nparameters.height\n: An Int of how tall the input will be, relative to the Object.\n\n\nparameters.font_size\n: An Int of the size the label/value font will be, relative to the Object.\n\n\nparameters.color\n: A Color for the input's background.\n\n\nparameters.font_color\n: A Color for the value text.\n\n\nparameters.tooltip\n: A String for a popup of text, similar to how an Object's name is displayed on mouseover.\n\n\nparameters.alignment\n: An Int for how text is aligned in the input box.\n\n\n1\n: Automatic\n\n\n2\n: Left\n\n\n3\n: Center\n\n\n4\n: Right\n\n\n5\n: Justified\n\n\n\n\n\n\nparameters.value\n: A String of the text entered into the input.\n\n\nparameters.validation\n: An Int which determines what characters can be input into the value.\n\n\n1\n: None\n\n\n2\n: Integer\n\n\n3\n: Float\n\n\n4\n: Alphanumeric\n\n\n5\n: Username\n\n\n6\n: Name\n\n\n\n\n\n\nparameters.tab\n: An Int which determines how pressing tab is handled when inputting.\n\n\n1\n: None\n\n\n2\n: Select Next Input\n\n\n3\n: Indent\n\n\n\n\n\n\n\n\n\n\n\n\nself\n.\neditInput\n({\nindex\n=\n0\n,\n \nvalue\n=\n\"New Value\"\n})\n\n\n\n\n\n\n\n\n\ngetButtons()\n\u00b6\n\n\nReturns a Table of all buttons on this Object. The Table contains parameters tables with the same keys as seen in the \ncreateButton\n section, except each Table of parameters also contains an \nindex\n entry. This is used to identify each button, used by \neditButton\n and \nremoveButton\n.\n\n\nIndexes start at 0.\n\n\n\n\ngetInputs()\n\u00b6\n\n\nReturns a Table of all inputs on this Object. The Table contains parameters tables with the same keys as seen in the \ncreateInput\n section, except each Table of parameters also contains an \nindex\n entry. This is used to identify each input, used by \neditInput\n and \nremoveInput\n.\n\n\nIndexes start at 0.\n\n\n\n\nremoveButton(...)\n\u00b6\n\n\nRemoves a specific button. Indexes start at 0. The first button on any given Object has an index of 0, the next button on it has an index of 1, etc. Each Object has its own indexes.\n\n\nRemoving an index instantly causes all other higher indexes to shift down 1.\n\n\n\n\nremoveButton(Int index)\n\n\n\n\nInt index\n: An Int of the button's index to remove.\n\n\n\n\n\n\n\n\nremoveInput(...)\n\u00b6\n\n\nRemoves a specific input. Indexes start at 0. The first button on any given Object has an index of 0, the next input on it has an index of 1, etc. Each Object has its own indexes.\n\n\nRemoving an index instantly causes all other higher indexes to shift down 1.\n\n\n\n\nremoveInput(Int index)\n\n\n\n\nInt index\n: An Int of the input's index to remove.\n\n\n\n\n\n\n\n\nGet Function Details\n\u00b6\n\n\ngetCustomObject()\n\u00b6\n\n\nReturns a Table with the Custom Object information of a Custom Object. See the \nSpawnable Objects\n page for the kind of information returned.\n\n\n--Example returned Table for a custom token\n\n\n{\n\n    \nimage\n \n=\n \n\"SOME URL HERE\"\n,\n\n    \nthickness\n \n=\n \n0.2\n,\n\n    \nmerge_distance\n \n=\n \n15\n,\n\n    \nstackable\n \n=\n \nfalse\n,\n\n\n}\n\n\n\n\n\n\n\ngetObjects()\n\u00b6\n\n\nReturns a Table of objects in the script zone/bag/deck. What it returns varies depending on the type of Object it is used on.\n\n\nIf an Object is inside of a container, it does not exist in-game. As a result, you only get data on each Object, not an Object reference.\n\n\n\n\nReturn Table by Object Type\n\n\n\n\nScripting Zone\"\n\n\nReturns a Table of Object references to every object in the scripting zone.\n\n\n{\n\n    \nobject_1\n,\n\n    \nobject_2\n,\n\n\n}\n\n\n\n\n\n\n\n\n\nBag\n\n\nReturns a Table of sub-Tables, each sub-Table containing data on 1 bagged item. Indexes start at 0.\n\n\n\n\nString name\n: A String of the name of the Object.\n\n\nString guid\n: A String of the GUID of the Object.\n\n\nInt index\n: A String of the index of the Object, represents the Object's place in the bag.\n\n\n\n\n{\n\n    \nname\n  \n=\n \n\"Object Name\"\n,\n\n    \nguid\n  \n=\n \n\"AAA111\"\n,\n\n    \nindex\n \n=\n \n0\n,\n  \n\n}\n\n\n\n\n\n\n\n\n\nDeck\n\n\nReturns a Table of sub-Tables, each sub-Table containing data on 1 card. Indexes start at 0.\n\n\n\n\nString nickname\n: A String of the name of the card.\n\n\nString description\n: A String of the description of the card.\n\n\nString guid\n: A String of the guid of the card.\n\n\nInt index\n: An Int of the index of the card, represents the card's order in the deck.\n\n\nString lua_script\n: A String of any Lua scripting saved on the card.\n\n\n\n\n{\n\n    \nnickname\n    \n=\n \n\"Object Name\"\n,\n\n    \ndescription\n \n=\n \n\"Object Descripotion\"\n,\n\n    \nguid\n        \n=\n \n\"AAA111\"\n,\n\n    \nindex\n       \n=\n \n0\n,\n\n    \nlua_script\n  \n=\n \n\"Any Lua Script On This Card\"\n,\n\n\n}\n\n\n\n\n\n\n\n\n\nThis function is often used with \ntakeObject(...)\n to remove objects from containers.\n\n\n\n\ngetRotationValues()\n\u00b6\n\n\nReturns a Table of rotation values. Rotation values are used to give value to different rotations (like dice) based on which side is pointed \"up\". It works by checking all of the rotation values assigned to an object and determining which one of them is closest to pointing up, and then displaying the value associated with that rotation.\n\n\nYou can manually assign rotation values to objects using the Rotation Value Gizmo tool (in the left side Gizmo menu) or using \nsetRotationValues(...)\n.\n\n\n\n\nReturn Table\n\n\nThe returned Table contains sub-Tables, each sub-Table containing these 2 key/value pairs.\n\n\n\n\nVar value\n: A Var of what value is associated with a given rotation. Often a String or Int.\n\n\nVector rotation\n: A Vector of the rotation of the object  that best represents the given value.\n\n\n\n\n\n\n--Example returned Table for a coin\n\n\n{\n\n    \n{\nvalue\n=\n\"Heads\"\n,\n \nrotation\n=\n{\nx\n=\n0\n,\n \ny\n=\n0\n,\n \nz\n=\n0\n}},\n\n    \n{\nvalue\n=\n\"Tails\"\n,\n \nrotation\n=\n{\nx\n=\n0\n,\n \ny\n=\n180\n,\n \nz\n=\n0\n}},\n\n\n}\n\n\n\n\n\n\n\ngetStates()\n\u00b6\n\n\nReturns a Table of information on the \nstates\n of an Object. Stated Objects have ids (indexes) starting with 1.\n\n\n\n\nReturn Table\n\n\n\n\nString name\n: A String of name of the Object.\n\n\nString guid\n: A String of the GUID of the Object.\n\n\nInt id\n: An Int of the id (index) of the state.\n\n\n\n\n\n\n--Example returned Table\n\n\n{\n\n    \n{\n\n        \nname\n \n=\n \n\"First State\"\n,\n\n        \nguid\n \n=\n \n\"AAA111\"\n,\n\n        \nid\n   \n=\n \n1\n,\n\n    \n},\n\n    \n{\n\n        \nname\n \n=\n \n\"Second State\"\n,\n\n        \nguid\n \n=\n \n\"BBB222\"\n,\n\n        \nid\n   \n=\n \n2\n,\n\n    \n},\n\n\n}\n\n\n\n\n\n\n\ngetValue()\n\u00b6\n\n\nReturns an Int as the value. What the value represents depends on what type of Object this function is used on.\n\n\n\n\n\n\n\n\nObject\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nClock\n\n\nReturns Int of stopwatch/timer current time \n(in seconds)\n.\n\n\n\n\n\n\nCounter\n\n\nReturns Int of counter value.\n\n\n\n\n\n\nRotation Value\n\n\nReturns Var of the face-up value.\n\n\n\n\n\n\nHidden Zone\n\n\nReturns String of the Player \nColor\n of the zone.\n\n\n\n\n\n\nPoker Chip\n\n\nReturns Int of the face value. \nDoes not work on custom chips.\n\n\n\n\n\n\nTablet\n\n\nReturns String of the current URL.\n\n\n\n\n\n\n\n\n\n\nSet Function Details\n\u00b6\n\n\nsetCustomObject(...)\n\u00b6\n\n\nSets a custom Object's properties. It can be used after \nspawnObject\n or on an already existing custom Object. If used on an already existing custom Object, you must use \nreload\n on the object after setCustomObject for the changes to be displayed.\n\n\n\n\nsetCustomObject(Table parameters)\n\n\nThe Table of parameters varies, depending on which type of custom Object it is. See the \nSpawnable Object\n page for the parameters needed.\n\n\n\n\n--Example of a custom token\n\n\nparams\n \n=\n \n{\n\n    \nimage\n \n=\n \n\"SOME URL HERE\"\n,\n\n    \nthickness\n \n=\n \n0.2\n,\n\n    \nmerge_distance\n \n=\n \n15\n,\n\n    \nstackable\n \n=\n \nfalse\n,\n\n\n}\n\n\nobj\n.\nsetCustomObject\n(\nparams\n)\n\n\n\n\n\n\n\nsetRotationValues(...)\n\u00b6\n\n\nSets rotation values of an object. Rotation values are used to give value to different rotations (like dice). It works by checking all of the rotation values assigned to an object and determining which one of them is closest to pointing up, and then displaying the value associated with that rotation.\n\n\n\n\nsetRotationValues(Table rotation_values)\n\n\n\n\nTable rotation_values\n: A Table containing Tables with the following values. 1 sub-Table per \"face\".\n\n\nrotation_values.value\n: A Var of what value is associated with a given rotation. Often a String or Int.\n\n\nrotation_values.rotation\n: A Vector of the rotation of the object  that best represents the given value.\n\n\n\n\n\n\n\n\n\n\n--Example setting of rotation values for a coin\n\n\nrotation_values\n \n=\n \n{\n\n    \n{\nvalue\n=\n\"Heads\"\n,\n \nrotation\n=\n{\nx\n=\n0\n,\n \ny\n=\n0\n,\n \nz\n=\n0\n}},\n\n    \n{\nvalue\n=\n\"Tails\"\n,\n \nrotation\n=\n{\nx\n=\n0\n,\n \ny\n=\n180\n,\n \nz\n=\n0\n}},\n\n\n}\n\n\nself\n.\nsetRotationValues\n(\nrotation_values\n)\n\n\n\n\n\n\n\nsetValue(...)\n\u00b6\n\n\nSets an Int as the value of an Object. What the value represents depends on what type of Object it is.\n\n\n\n\n\n\n\n\nObject\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nClock\n\n\nSet Int for stopwatch/timer current time \n(in seconds)\n.\n\n\n\n\n\n\nCounter\n\n\nSet Int for counter value.\n\n\n\n\n\n\nRotation Value\n\n\nSet Var for the face-up value.\n\n\n\n\n\n\nHidden Zone\n\n\nSet String for the Player \nColor\n of the zone.\n\n\n\n\n\n\nTablet\n\n\nSet String for the current URL.\n\n\n\n\n\n\n\n\n\n\nAction Function Details\n\u00b6\n\n\ncall(...)\n\u00b6\n\n\ntestFunc\n:  Used to call a Lua function on this Object. This is used to remotely call functions in other scripts, either in Global or Object scripts. \nGlobal\n is the \"Object\" to use to call a function in the Global script.\n\n\n\n\nReturns Var\n\n\n\n\nVar is only returned if the function called has a \nreturn\n. Otherwise return is \nnil\n. See example.\n\n\n\n\ncall(String func_name, Table func_params)\n\n\n\n\nString func_name\n: A String of the function name you want to activate.\n\n\nTable func_name\n: A Table containing any data you want to pass to that function.\n\n\nOptional, will not be sent by default.\n\n\n\n\n\n\n\n\n\n\n--Call, used from an Object script\n\n\nparams\n \n=\n \n{\n\n    \nmsg\n   \n=\n \n\"Hello world!\"\n,\n\n    \ncolor\n \n=\n \n{\nr\n=\n0.2\n,\n \ng\n=\n1\n,\n \nb\n=\n0.2\n},\n\n\n}\n\n\n--Success would be set to true by the return value in the function\n\n\nsuccess\n \n=\n \nGlobal\n.\ncall\n(\n\"testFunc\"\n,\n \nparams\n)\n\n\n\n\n--Function in Global\n\n\nfunction\n \ntestFunc\n(\nparams\n)\n\n    \nbroadcastToAll\n(\nparams\n.\nmsg\n,\n \nparams\n.\ncolor\n)\n\n    \nreturn\n \ntrue\n\n\nend\n\n\n\n\n\n\nclone(...)\n\u00b6\n\n\nCopy/Paste this Object.\n\n\n\n\nReturns Object pasted\n\n\n\n\n\n\nclone(Table parameters)\n\n\n\n\nTable parameters\n: A Table with information used when pasting.\n\n\nparameters.position\n: A Vector of where the Object is placed.\n\n\nOptional, defaults to {x=0, y=3, z=0}.\n\n\n\n\n\n\nparameters.snap_to_grid\n: A Bool for if the Object snaps to grid.\n\n\nOptional, defaults to false.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndeal(...)\n\u00b6\n\n\nDeals Objects to hand zones. Will deal from decks/bags/stacks as well as individual items. If dealing an individual item to a hand zone, it is a good idea to make sure that its \nMember Variable\n for \nuse_hands\n is \ntrue\n.\n\n\n\n\nReturns Bool\n\n\n\n\n\n\ndeal(Int number, String player_color, Int index)\n\n\n\n\nInt number\n: An Int of how many to deal.\n\n\nString player_color\n: A String of the Color to deal to.\n\n\nOptional, defaults to an empty string. If not supplied, it will attempt to deal to all seated players.\n\n\n\n\n\n\nInt index\n: An Int of which Object to deal from a container.\n\n\nOptional, defaults to 0. If not supplied it will deal in regular order.\n\n\n\n\n\n\n\n\n\n\n\n\ndealToColorWithOffset(...)\n\u00b6\n\n\nDeals from a deck to a position relative to the hand zone.\n\n\n\n\nReturns Object of dealt card\n\n\n\n\n\n\ndealToColorWithOffset(Vector, Bool flip, String player_color)\n\n\n\n\nVector\n: A Vector of the x/y/z offset to deal to around the given hand zone.\n\n\nBool flip\n: A Bool for if the card is flipped over when dealt.\n\n\nString player_color\n: A String of the hand zone Color to offset dealing to.\n\n\n\n\n\n\n--Example of dealing 2 cards in front of the White player, face up.\n\n\nself\n.\ndealToColorWithOffset\n({\n-\n2\n,\n0\n,\n5\n},\n \ntrue\n,\n \n\"White\"\n)\n\n\nself\n.\ndealToColorWithOffset\n({\n \n2\n,\n0\n,\n5\n},\n \ntrue\n,\n \n\"White\"\n)\n\n\n\n\n\nputObject(...)\n\u00b6\n\n\nPlaces an object into a container (chip stacks/bags/decks).\n\n\n\n\nReturns Bool\n\n\n\n\n\n\nputObject(Object put_object)\n\n\n\n\nObject put_object\n: An Object to place into the container.\n\n\n\n\n\n\n--Example of a script on a bag that places Object into itself\n\n\nlocal\n \nobj\n \n=\n \ngetObjectFromGUID\n(\n\"AAA111\"\n)\n\n\nself\n.\nputObject\n(\nobj\n)\n\n\n\n\n\n\n\nreload()\n\u00b6\n\n\nReturns Object reference of itself after it respawns itself. This function causes the Object to be deleted and respawned instantly to refresh it, so its old Object reference will no longer be valid.\n\n\nMost often this is used after using \nsetCustomObject(...)\n to modify a custom object.\n\n\n\n\nReturns Object of itself after respawn\n\n\n\n\n\n\ntakeObject(...)\n\u00b6\n\n\nTakes an object from a container (bag/deck/chip stack) and places it in the world.\n\n\n\n\nReturns Object of the Object taken\n\n\n\n\n\n\nTip\n\n\nSpawned Objects take a moment to be physically spawned into the game. The purpose of the callback functionality is to allow you to run additional actions after the Object has been initiated fully into the instance. It is also possible to add a delay using a \ncoroutine\n.\n\n\n\n\n\n\ntakeObject(Table parameters)\n\n\n\n\nTable parameters\n: A Table of parameters used to determine how takeObject will act.\n\n\nparameters.position\n: A Table Vector of the position to place Object.\n\n\nOptional, defaults to container's position + 2 on the x axis.\n\n\n\n\n\n\nparameters.rotation\n: A Table Vector of the rotation of the Object.\n\n\nOptional, defaults to the container's rotation.\n\n\n\n\n\n\nparameters.flip\n: A Bool for if the Object is flipped over.\n\n\nOptional, defaults to false. Only used with decks, not bags/stacks.\n\n\nIf rotation is used, flip's Bool will be ignored.\n\n\n\n\n\n\nparameters.guid\n: A String of the GUID of the Object to take.\n\n\nOptional,  no default. Only use index or guid, never both.\n\n\n\n\n\n\nparameters.index\n: An Int of the index of the Object to take.\n\n\nOptional,  no default. Only use index or guid, never both.\n\n\n\n\n\n\nparameters.top\n: A Bool for if an object is taken from the top (vs bottom).\n\n\nOptional, defaults to true.\n\n\n\n\n\n\nparameters.smooth\n: A Bool for if the taken Object moves smoothly or instantly. \n\n\nOptional, defaults to true.\n\n\n\n\n\n\nparameters.callback\n: A String of the function name you want activated once the Object is initiated.\n\n\nOptional, no default.\n\n\nA callback function has 2 parameters, the Object spawned and, if used, the Table of params.\n\n\n\n\n\n\nparameters.callback_owner\n: An Object of what Object has the callback function in its script. Global is a valid target.\n\n\nOptional, defaults to container Object. Serves no purpose if callback is not also used.\n\n\n\n\n\n\nparameters.params\n: A Table of data to send to the callback to use as parameters. See example.\n\n\nOptional, no default. Serves no purpose if callback is not also used.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction\n \nonLoad\n()\n\n    \nfutureName\n \n=\n \n\"Taken from container!\"\n\n    \ntakeParams\n \n=\n \n{\n\n        \nposition\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n3\n,\n \nz\n=\n5\n},\n\n        \ncallback\n \n=\n \n\"take_callback\"\n,\n\n        \ncallback_owner\n \n=\n \nself\n,\n\n        \nparams\n \n=\n \n{\nname\n \n=\n \nfutureName\n},\n\n    \n}\n\n    \nself\n.\ntakeObject\n(\ntakeParams\n)\n\n\nend\n\n\n\nfunction\n \ntake_callback\n(\nobject_spawned\n,\n \nparams\n)\n\n    \nobject_spawned\n.\nsetName\n(\nparams\n.\nname\n)\n\n\nend\n\n\n\n\n\nTip for using GUID to pull Object\nWhen getting the GUIDs of objects in a container, it is possible items can have the same GUID while in a container. This is because only once two items try to exist at the same time is one of them given a new GUID, and Objects in a container do not currently exist. Removing all Objects from the container at once will force all of them to be given unique GUIDs.\nTip for using index to pull Object\nWhen you take an Object from the container, all higher indexes are reduced by 1 instantly. If you pull more than once Object at once by their index, you must account for this index changing.",
            "title": "Object"
        },
        {
            "location": "/object/#member-variable-summary",
            "text": "",
            "title": "Member Variable Summary"
        },
        {
            "location": "/object/#member-variables",
            "text": "These are variables that objects share. They allow for direct access to an Object's property information without a helping function. Some are read-only.  Read Example =  isResting = self.resting  Write Example =  self.resting = true     Variable  Description  Type      angular_drag  Angular drag.  Unity rigidbody property .  Float    auto_raise  If an object should be lifted above other objects to avoid collision when held by a player.  Bool    bounciness  Bounciness, value of 0-1.  Unity physics material .  Float    drag  Drag.  Unity rigidbody property .  Float    dynamic_friction  Dynamic friction, value of 0-1.  Unity physics material .  Float    grid_projection  If grid lines can appear on the Object if visible grids are turned on.  Bool    guid  The 6 character unique Object identifier within Tabletop Simulator.  String    held_by_color  The Color of the Player that is holding the object.  String    interactable  If an object can be interacted with by Players. Other object will still be able to interact with it.  Bool    mass  Mass.  Unity rigidbody property .  Float    name  The Object's name. Read only, use  setName(\"\")  to write to it.  String    resting  If an Object is at rest.  Unity rigidbody property .  Bool    script_code  The Lua Script on the Object.  String    script_state  The saved data on the object. See  onSave() .  String    static_friction  Static friction, value of 0-1.  Unity physics material .  Float    sticky  If other Objects on top of this one are also picked up when this Object is.  Bool    tag  This object's type. Read only.  String    tooltip  If the tooltip opens when a pointer hovers over the object. Tooltips display name and description.  Bool    use_gravity  If gravity affects this object.  Bool    use_grid  If snapping to grid is enabled or not.  Bool    use_hands  If this object can be held in a hand zone.  Bool    use_snap_points  If snap points are used or ignored.  Bool     These member variables are classes of their own, and have their own member variables. Each one is for a special type of Object.     Variable Name  Description      AssetBundle  An  AssetBundle , which is a type of custom object made in Unity.    Clock  A  Clock , which is the in-game digital clock.    Counter  A  Counter , which is the in-game digital counter.    RPGFigurine  An  RPGFigurine , which is an in-game animated figurine.    TextTool  A  TextTool , which is an in-game text display system.",
            "title": "Member Variables"
        },
        {
            "location": "/object/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/object/#transform-functions",
            "text": "These functions handle the physical attributes of an Object: Position, Rotation, Scale, Bounds, Velocity. In other words, moving objects around as well as getting information on how they are moving.     Function Name  Description  info_outline      addForce(Vector, Int force_type)  Adds force to an object in a directional Vector. Returns Bool.  info_outline    addTorque(Vector, Int force_type)  Adds torque to an object in a rotational Vector. Returns Bool.  info_outline    getAngularVelocity()  Returns a Vector of the current angular velocity.     getBounds()  Returns a Table of Vector information describing the size of an object in Global terms.  info_outline    getBoundsNormalized()  Returns a Table of Vector information describing the size of an object in Global terms, as if it was rotated to {0,0,0}.  info_outline    getPosition()  Returns a Vector of the current world position.     getRotation()  Returns a Vector of the current rotation.     getScale()  Returns a Vector of the current scale.  info_outline    getTransformForward()  Returns a Vector of the forward direction of this object.  info_outline    getTransformRight()  Returns a Vector of the right direction of this object.  info_outline    getTransformUp()  Returns a Vector of the up direction of this object.  info_outline    getVelocity()  Returns a Vector of the current velocity.     isSmoothMoving()  Indicates if an object is traveling as part of a Smooth move. Smooth moving is performed by setPositionSmooth and setRotationSmooth. Returns Bool.     positionToLocal(Vector)  Returns a Vector after converting a world Vector to a local Vector.  info_outline    positionToWorld(Vector)  Returns a Vector after converting a local Vector to a world Vector.  info_outline    rotate(Vector)  Rotates Object smoothly in the direction of the given Vector. Returns Bool.     scale(Vector or Float)  Scales Object by a multiple. Returns Bool.  info_outline    setAngularVelocity(Vector)  Sets a Vector as the current angular velocity. Returns Bool.     setPosition(Vector)  Instantly moves an Object to the given Vector. Returns Bool.     setPositionSmooth (Vector, Bool collide, Bool fast)  Moves the Object smoothly to the given Vector. Returns Bool.  info_outline    setRotation(Vector)  Instantly rotates an Object to the given Vector.     setRotationSmooth (Vector, Bool collide, Bool fast)  Rotates the Object smoothly to the given Vector. Returns Bool.  info_outline    setScale(Vector)  Sets a Vector as the current scale. Returns Bool.     setVelocity(Vector)  Sets a Vector as the current velocity. Returns Bool.     translate(Vector)  Smoothly moves Object by the given Vector offset. Returns Bool.",
            "title": "Transform Functions"
        },
        {
            "location": "/object/#ui-functions",
            "text": "These functions allow for the creation/editing/removal of functional buttons and text inputs which themselves trigger code within your scripts.     Function Name  Description  info_outline      clearButtons()  Removes all scripted buttons. Returns Bool.     clearInputs()  Removes all scripted inputs. Returns Bool.     createButton(Table parameters)  Creates a scripted button attached to the Object. Returns Bool.  info_outline    createInput(Table parameters)  Creates a scripted input attached to the Object. Returns Bool.  info_outline    editButton(Table parameters)  Modify an existing button. Returns Bool.  info_outline    editInput(Table parameters)  Modify an existing input. Returns Bool.  info_outline    getButtons()  Returns a Table of all buttons on this Object.  info_outline    getInputs()  Returns a Table of all inputs on this Object.  info_outline    removeButton(Int index)  Removes a specific button. Returns Bool.  info_outline    removeInput(Int index)  Removes a specific button. Returns Bool.  info_outline",
            "title": "UI Functions"
        },
        {
            "location": "/object/#get-functions",
            "text": "These functions obtain information from an object.     Function Name  Description  info_outline      getColorTint()  Returns Color tint.     getCustomObject()  Returns a Table with the Custom Object information of a Custom Object.  info_outline    getLock()  Returns a Bool of the lock status. True is locked.     getObjects()  Returns a Table of objects in the script zone/bag/deck.  info_outline    getQuantity()  Returns an Int of how many objects are in the stack. Returns -1 if the Object is not a stack.     getRotationValues()  Returns a Table of rotation values. Rotation values are used to give value to different rotations (like dice).  info_outline    getStateId()  Returns an Int for the current  state  ID (index) an object is it. Returns -1 if there are no other states. State ids (indexes) start at 1.     getStates()  Returns a Table of information on the  states  of an Object.  info_outline    getValue()  Returns an Int as the value. What the value represents depends on what type of Object this function is used on.  info_outline",
            "title": "Get Functions"
        },
        {
            "location": "/object/#set-functions",
            "text": "These functions apply action to an object. They take some property in order to work.     Function Name  Description  info_outline      setColorTint(Color)  Sets the Color tint. Returns Bool.     setCustomObject(Table parameters)  Sets a custom Object's properties. Returns Bool.  info_outline    setLock(Bool lock)  Sets if an object is locked in place. Returns Bool.     setRotationValues(Table rotation_values)  Sets rotation values of an object. Rotation values are used to give value to different rotations (like dice). Returns Bool.  info_outline    setState(Int state_id)  Returns Object of set  state  of an Object. State ids (indexes) start at 1.     setValue(Var value)  Sets an Int as the value. What the value represents depends on what type of Object it is. Returns Bool.  info_outline",
            "title": "Set Functions"
        },
        {
            "location": "/object/#action-function",
            "text": "These functions perform general actions on objects and do not require any input parameters.     Function Name  Description  info_outline      call(String func_name, Table func_params)  Used to call a Lua function on this Object. Returns Var.  info_outline    flip()  Flip Object over. Returns Bool.     clone(Table parameters)  Copy/Paste this Object, returns a reference to the new Object.  info_outline    cut()  Cuts (splits in half) a deck or stack Object.     deal(Int number, String player_color, Int index)  Deals Objects. Will deal from decks/bags/stacks/individual items. Returns Object dealt.  info_outline    dealToColorWithOffset (Vector, Bool flip, String player_color)  Deals from a deck to a position relative to the hand zone. Returns Object dealt.  info_outline    destruct()  Destroys Object. Allows for  self.destruct() . Returns Bool.     highlightOn(Color, Float duration)  Creates a highlight around an Object. Returns Bool.     highlightOff(Color)  Removes a highlight from around an Object. Returns Bool.     putObject(Object put_object)  Places an object into a container (chip stacks/bags/decks). Returns Bool.  info_outline    randomize()  Shuffles deck/bag, rolls dice/coin, lifts other objects into the air. Same as pressing  R  by default. Returns Bool.     reload()  Returns Object reference of itself after it respawns itself.  info_outline    roll()  Rolls dice/coins. Returns Bool.     shuffle()  Shuffles/shakes up contents of a deck or bag. Returns Bool.     shuffleStates()  Returns an Object reference to a new  state  after randomly selecting and changing to one.     takeObject(Table parameters)  Returns an Object reference of Object taken from a container (bag/deck/chip stack) and placed into the world.  info_outline",
            "title": "Action Function"
        },
        {
            "location": "/object/#function-details",
            "text": "",
            "title": "Function Details"
        },
        {
            "location": "/object/#transform-function-details",
            "text": "",
            "title": "Transform Function Details"
        },
        {
            "location": "/object/#addforce",
            "text": "Adds force to an object in a directional Vector.   addForce(Vector, Int force_type)   Vector : A Vector of the direction and magnitude of force.  Force Type : An Int representing the force type to apply. Options below.  Optional, defaults to 3.  1 : Continuous force, uses mass.  (Force)  2 : Continuous acceleration, ignores mass.  (Acceleration)  3 : Instant force impulse, uses mass.  (Impulse)  4 : Instant velocity change, ignores mass.  (Velocity Change)",
            "title": "addForce(...)"
        },
        {
            "location": "/object/#addtorque",
            "text": "Adds torque to an object in a rotational Vector.   addTorque(Vector, Int force_type)   Vector : A Vector of the direction and magnitude of rotational force.  Force Type : An Int representing the force type to apply. Options below.  Optional, defaults to 3.  1 : Continuous force, uses mass.  (Force)  2 : Continuous acceleration, ignores mass.  (Acceleration)  3 : Instant force impulse, uses mass.  (Impulse)  4 : Instant velocity change, ignores mass.  (Velocity Change)",
            "title": "addTorque(...)"
        },
        {
            "location": "/object/#getbounds",
            "text": "Returns a Table of Vector information describing the size of an object in Global terms.  Bounds  are part of Unity, and represent an imaginary square box that can be drawn around an object. Unlike scale, it can help indicate the size of an object in in-game units, not just relative model size.   Return Table   center : The center of the bounding box.  size : The size of the bounding box.  offset : The offset of the center of the bounding box from the middle of the Object model.    --Example returned Table  { \n     center   =   { x = 0 ,   y = 3 ,   z = 0 ,   0 ,   3 ,   0 }, \n     size   =   { x = 5 ,   y = 5 ,   z = 5 },   5 ,   5 ,   5 }, \n     offset   =   { x = 0 ,   y =- 1 ,   z = 0 ,   0 ,   - 1 ,   0 }  }",
            "title": "getBounds()"
        },
        {
            "location": "/object/#getboundsnormalized",
            "text": "Returns a Table of Vector information describing the size of an object in Global terms, as if it was rotated to {0,0,0}.  Bounds  are part of Unity, and represent an imaginary square box that can be drawn around an object. Unlike scale, it can help indicate the size of an object in in-game units, not just relative model size.   Return Table   center : The center of the bounding box.  size : The size of the bounding box.  offset : The offset of the center of the bounding box from the middle of the Object model.    --Example returned Table  { \n     center   =   { x = 0 ,   y = 3 ,   z = 0 ,   0 ,   3 ,   0 }, \n     size   =   { x = 5 ,   y = 5 ,   z = 5 },   5 ,   5 ,   5 }, \n     offset   =   { x = 0 ,   y =- 1 ,   z = 0 ,   0 ,   - 1 ,   0 }  }",
            "title": "getBoundsNormalized()"
        },
        {
            "location": "/object/#getscale",
            "text": "Returns a Vector of the current scale. Scale is not an absolute measurement, it is a multiple of the Object's default model size. So {x=2, y=2, z=2} would be a model twice its default size, not 2 units large.",
            "title": "getScale()"
        },
        {
            "location": "/object/#gettransformforward",
            "text": "Returns a Vector of the forward direction of this Object. The direction is relative to how the object is facing.  --Example of moving forward 5 units  function   onLoad () \n     distance   =   5 \n     pos_target   =   self . getTransformForward () \n     pos_current   =   self . getPosition () \n     pos   =   { \n         x   =   pos_current . x   +   pos_target . x   *   distance , \n         y   =   pos_current . y   +   pos_target . y   *   distance , \n         z   =   pos_current . z   +   pos_target . z   *   distance , \n     } \n     self . setPositionSmooth ( pos )  end",
            "title": "getTransformForward()"
        },
        {
            "location": "/object/#gettransformright",
            "text": "Returns a Vector of the forward direction of this object. The direction is relative to how the object is facing.  --Example of moving right 5 units  function   onLoad () \n     distance   =   5 \n     pos_target   =   self . getTransformRight () \n     pos_current   =   self . getPosition () \n     pos   =   { \n         x   =   pos_current . x   +   pos_target . x   *   distance , \n         y   =   pos_current . y   +   pos_target . y   *   distance , \n         z   =   pos_current . z   +   pos_target . z   *   distance , \n     } \n     self . setPositionSmooth ( pos )  end",
            "title": "getTransformRight()"
        },
        {
            "location": "/object/#gettransformup",
            "text": "Returns a Vector of the up direction of this Object. The direction is relative to how the object is facing.  --Example of moving up 5 units  function   onLoad () \n     distance   =   5 \n     pos_target   =   self . getTransformUp () \n     pos_current   =   self . getPosition () \n     pos   =   { \n         x   =   pos_current . x   +   pos_target . x   *   distance , \n         y   =   pos_current . y   +   pos_target . y   *   distance , \n         z   =   pos_current . z   +   pos_target . z   *   distance , \n     } \n     self . setPositionSmooth ( pos )  end",
            "title": "getTransformUp()"
        },
        {
            "location": "/object/#positiontolocal",
            "text": "Returns a Vector after converting a world vector to a local Vector. A world Vector is a positional Vector using the world's coordinate system. A Local Vector is a positional Vector that is relative to the position of the given object.",
            "title": "positionToLocal(...)"
        },
        {
            "location": "/object/#positiontoworld",
            "text": "Returns a Vector after converting a local Vector to a world Vector. A world Vector is a positional Vector using the world's coordinate system. A Local Vector is a positional Vector that is relative to the position of the given object.",
            "title": "positionToWorld(...)"
        },
        {
            "location": "/object/#rotatevector",
            "text": "Rotates Object smoothly in the direction of the given Vector. This does not set the Object to face a specific rotation, it rotates the Object around by the number of degrees given for x/y/z.  --Rotates object 90 degrees around its Y axis  self . rotate ({ x = 0 ,   y = 90 ,   z = 0 })",
            "title": "rotate(Vector)"
        },
        {
            "location": "/object/#scale",
            "text": "Scales Object by a multiple. This does not set the Object to a specific scale, it scales the Object by the given multiple.   scale(Vector or Float)  This function accepts either a Vector or Float as a parameter. If you use a Float, it will multiple the Object's x/y/z by that number.   --Both examples work to scale an object to be twice its current scale  self . scale ({ x = 2 ,   y = 2 ,   z = 2 })  self . scale ( 2 )",
            "title": "scale(...)"
        },
        {
            "location": "/object/#setpositionsmooth",
            "text": "Moves the Object smoothly to the given Vector.   setPositionSmooth(Vector, Bool collide, Bool fast)   Vector : A positional Vector.  Bool collide : A Bool for if the Object will collide with other Objects while moving.  Bool fast : A Bool for if the Object is moved quickly.",
            "title": "setPositionSmooth(...)"
        },
        {
            "location": "/object/#setrotationsmooth",
            "text": "Rotates the Object smoothly to the given Vector.   setRotationSmooth(Vector, Bool collide, Bool fast)   Vector : A rotational Vector.  Bool collide : A Bool for if the Object will collide with other Objects while rotating.  Bool fast : A Bool for if the Object is rotated quickly.",
            "title": "setRotationSmooth(...)"
        },
        {
            "location": "/object/#ui-function-details",
            "text": "",
            "title": "UI Function Details"
        },
        {
            "location": "/object/#createbutton",
            "text": "Creates a scripted button attached to the Object. Scripted buttons are buttons that can be clicked while in-game that trigger a function in a script.  Button Tips Buttons can not be clicked from their back side. Buttons can not be clicked if there is another object between the pointer and the button. This does not include the Object the button is attached to. Buttons are placed relative to the Object they are attached to. The maximum font size is capped at 1000. The minimum width/height is 60. Any lower number (besides 0) will appear to be 60. This prevents visual glitches involving the corner rounding. A button width/height of 0 will cause the button not to be drawn, but its label will be. This can be a way to attach text to an Object. You cannot assign an index to a button. It is given one automatically.  createButton(Table parameters)   Table parameters : A Table containing the information used to spawn the button.  parameters.click_function : A String of the function's name that will be run when button is clicked.  parameters.function_owner : The Object which contains the click_function function.  Optional, Defaults to Global.    parameters.label : A String of text that appears on the button.  Optional, defaults to an empty string.    parameters.position : A Vector of where the button appears, relative to the Object's center.  Optional, defaults to {x=0, y=0, z=0}.    parameters.rotation : A Vector of how the button is rotated, relative to the Object's rotation.  Optional, defaults to {x=0, y=0, z=0}.    parameters.scale : A Vector of the scale of the button, relative to the Object's scale.  Optional, defaults to {x=1, y=1, z=1}.    parameters.width : An Int of how wide the button will be, relative to the Object.  Optional, defaults to 100.    parameters.height : An Int of how tall the button will be, relative to the Object.  Optional, defaults to 100.    parameters.font_size : An Int of the size the label font will be, relative to the Object.  Optional, defaults to 100.    parameters.color : A Color for the clickable button.  Optional, defaults to {r=1, g=1, b=1}.    parameters.font_color : A Color for the label text.  Optional, defaults to {r=0, g=0, b=0}.    parameters.tooltip : A String for a popup of text, similar to how an Object's name is displayed on mouseover.  Optional, defaults to an empty string.         click_function(Object obj, String player_clicker_color)  The click function which is activated by clicking this button has its own parameters it is passed automatically.   Object obj : The Object the button is attached to.  String player_clicker_color : A String of the Color of the player that pressed the button.    function   onLoad () \n     params   =   { \n         click_function   =   \"click_func\" , \n         function_owner   =   self , \n         label            =   \"Test\" , \n         position         =   { 0 ,   1 ,   0 }, \n         rotation         =   { 0 ,   180 ,   0 }, \n         width            =   800 , \n         height           =   400 , \n         font_size        =   340 , \n         color            =   { 0.5 ,   0.5 ,   0.5 }, \n         font_color       =   { 1 ,   1 ,   1 }, \n         tooltip          =   \"This text appears on mouseover.\" , \n     } \n     self . createButton ( params )  end  function   click_func ( obj ,   color ) \n     print ( obj ) \n     print ( color )  end    Bug  Button scale currently distorts button height and width if the button is rotated at anything besides  {0,0,0} .",
            "title": "createButton(...)"
        },
        {
            "location": "/object/#createinput",
            "text": "Creates a scripted input attached to the Object. Scripted inputs are boxes you can click inside of in-game to input/edit text. Every letter typed triggers the function. The bool that is returned as part of the input_function allows you to determine when a player has finished editing the input.  Input Tips Inputs can not be clicked from their back side. Inputs can not be clicked if there is another object between the pointer and the inputs. This does not include the Object the input is attached to. Inputs are placed relative to the Object they are attached to. The maximum font size is capped at 1000. The minimum width/height is 60. Any lower number (besides 0) will appear to be 60. This prevents visual glitches involving the corner rounding. Font that does not fit in the input window's width/height does NOT display. To know how much height you need for each line, the formula is  (font_size * # of lines) + 23 . In other words, multiply how many lines of text you want to display by your font_size and add 23. That is your height value. You cannot assign an index to an input. It is given one automatically.  createInput(Table parameters)   Table parameters : A Table containing the information used to spawn the input.  parameters.input_function : A String of the function's name that will be run when a key is used or when it is deselected.  parameters.function_owner : The Object which contains the input_function function.  Optional, Defaults to Global.    parameters.label : A String of text that appears as greyed out text when there is no value in the input.  Optional, defaults to an empty string.    parameters.position : A Vector of where the input appears, relative to the Object's center.  Optional, defaults to {x=0, y=0, z=0}.    parameters.rotation : A Vector of how the input is rotated, relative to the Object's rotation.  Optional, defaults to {x=0, y=0, z=0}.    parameters.scale : A Vector of the scale of the input, relative to the Object's scale.  Optional, defaults to {x=1, y=1, z=1}.    parameters.width : An Int of how wide the input will be, relative to the Object.  Optional, defaults to 100.    parameters.height : An Int of how tall the input will be, relative to the Object.  Optional, defaults to 100.    parameters.font_size : An Int of the size the label/value font will be, relative to the Object.  Optional, defaults to 100.    parameters.color : A Color for the input's background.  Optional, defaults to {r=1, g=1, b=1}.    parameters.font_color : A Color for the value text.  Optional, defaults to {r=0, g=0, b=0}.    parameters.tooltip : A String for a popup of text, similar to how an Object's name is displayed on mouseover.  Optional, defaults to an empty string.    parameters.alignment : An Int for how text is aligned in the input box.  Optional, defaults to 1.  1 : Automatic  2 : Left  3 : Center  4 : Right  5 : Justified    parameters.value : A String of the text entered into the input.  Optional, defaults to an empty string.    parameters.validation : An Int which determines what characters can be input into the value.  Optional, defaults to 1.  1 : None  2 : Integer  3 : Float  4 : Alphanumeric  5 : Username  6 : Name    parameters.tab : An Int which determines how pressing tab is handled when inputting.  Optional, defaults to 1.  1 : None  2 : Select Next Input  3 : Indent         input_function(Object obj, String player_clicker_color, String input_value, Bool selected)  The click function which is activated by clicking this button has its own parameters it is passed automatically.   Object obj : The Object the input is attached to.  String player_clicker_color : A String of the Color of the player that has selected/edited the input.  String input_value : A String of the text currently in the input.  Bool selected : A Bool for if the value box is still being edited or not.    function   onLoad () \n     self . createInput ({ \n         input_function   =   \"input_func\" , \n         function_owner   =   self , \n         label            =   \"Gold\" , \n         alignment        =   4 , \n         position         =   { x = 0 ,   y = 1 ,   z = 0 }, \n         width            =   800 , \n         height           =   300 , \n         font_size        =   323 , \n         validation       =   2 , \n     })  end  function   input_func ( obj ,   color ,   input ,   stillEditing ) \n     print ( input ) \n     if   not   stillEditing   then \n         print ( \"Finished editing.\" ) \n     end  end",
            "title": "createInput(...)"
        },
        {
            "location": "/object/#editbutton",
            "text": "Modify an existing button. The only parameter that is required is the index. The rest are optional, and not using them will cause the edited button's element to remain. Indexes start at 0. The first button on any given Object has an index of 0, the next button on it has an index of 1, etc. Each Object has its own indexes.   editButton(Table parameters)   Table parameters : A Table containing the information used to spawn the button.  parameters.index : An Int of the index of the button you want to edit.  parameters.click_function : A String of the function's name that will be run when button is clicked.  parameters.function_owner : The Object which contains the click_function function.  parameters.label : A String of text that appears on the button.  parameters.position : A Vector of where the button appears, relative to the Object's center.  parameters.rotation : A Vector of how the button is rotated, relative to the Object's rotation.  parameters.scale : A Vector of the scale of the button, relative to the Object's scale.  parameters.width : An Int of how wide the button will be, relative to the Object.  parameters.height : An Int of how tall the button will be, relative to the Object.  parameters.font_size : An Int of the size the label font will be, relative to the Object.  parameters.color : A Color for the clickable button.  parameters.font_color : A Color for the label text.  parameters.tooltip : A String for a popup of text, similar to how an Object's name is displayed on mouseover.      self . editButton ({ index = 0 ,   label = \"New Label\" })",
            "title": "editButton(...)"
        },
        {
            "location": "/object/#editinput",
            "text": "Modify an existing input. The only parameter that is required is the index. The rest are optional, and not using them will cause the edited input's element to remain. Indexes start at 0. The first input on any given Object has an index of 0, the next input on it has an index of 1, etc. Each Object has its own indexes.   editInput(Table parameters)   Table parameters : A Table containing the information used to spawn the input.  parameters.index : An Int of the index of the input you want to edit.  parameters.input_function : A String of the function's name that will be run when a key is used or when it is deselected.  parameters.function_owner : The Object which contains the input_function function.  parameters.label : A String of text that appears as greyed out text when there is no value in the input.  parameters.position : A Vector of where the input appears, relative to the Object's center.  parameters.rotation : A Vector of how the input is rotated, relative to the Object's rotation.  parameters.scale : A Vector of the scale of the input, relative to the Object's scale.  parameters.width : An Int of how wide the input will be, relative to the Object.  parameters.height : An Int of how tall the input will be, relative to the Object.  parameters.font_size : An Int of the size the label/value font will be, relative to the Object.  parameters.color : A Color for the input's background.  parameters.font_color : A Color for the value text.  parameters.tooltip : A String for a popup of text, similar to how an Object's name is displayed on mouseover.  parameters.alignment : An Int for how text is aligned in the input box.  1 : Automatic  2 : Left  3 : Center  4 : Right  5 : Justified    parameters.value : A String of the text entered into the input.  parameters.validation : An Int which determines what characters can be input into the value.  1 : None  2 : Integer  3 : Float  4 : Alphanumeric  5 : Username  6 : Name    parameters.tab : An Int which determines how pressing tab is handled when inputting.  1 : None  2 : Select Next Input  3 : Indent       self . editInput ({ index = 0 ,   value = \"New Value\" })",
            "title": "editInput(...)"
        },
        {
            "location": "/object/#getbuttons",
            "text": "Returns a Table of all buttons on this Object. The Table contains parameters tables with the same keys as seen in the  createButton  section, except each Table of parameters also contains an  index  entry. This is used to identify each button, used by  editButton  and  removeButton .  Indexes start at 0.",
            "title": "getButtons()"
        },
        {
            "location": "/object/#getinputs",
            "text": "Returns a Table of all inputs on this Object. The Table contains parameters tables with the same keys as seen in the  createInput  section, except each Table of parameters also contains an  index  entry. This is used to identify each input, used by  editInput  and  removeInput .  Indexes start at 0.",
            "title": "getInputs()"
        },
        {
            "location": "/object/#removebutton",
            "text": "Removes a specific button. Indexes start at 0. The first button on any given Object has an index of 0, the next button on it has an index of 1, etc. Each Object has its own indexes.  Removing an index instantly causes all other higher indexes to shift down 1.   removeButton(Int index)   Int index : An Int of the button's index to remove.",
            "title": "removeButton(...)"
        },
        {
            "location": "/object/#removeinput",
            "text": "Removes a specific input. Indexes start at 0. The first button on any given Object has an index of 0, the next input on it has an index of 1, etc. Each Object has its own indexes.  Removing an index instantly causes all other higher indexes to shift down 1.   removeInput(Int index)   Int index : An Int of the input's index to remove.",
            "title": "removeInput(...)"
        },
        {
            "location": "/object/#get-function-details",
            "text": "",
            "title": "Get Function Details"
        },
        {
            "location": "/object/#getcustomobject",
            "text": "Returns a Table with the Custom Object information of a Custom Object. See the  Spawnable Objects  page for the kind of information returned.  --Example returned Table for a custom token  { \n     image   =   \"SOME URL HERE\" , \n     thickness   =   0.2 , \n     merge_distance   =   15 , \n     stackable   =   false ,  }",
            "title": "getCustomObject()"
        },
        {
            "location": "/object/#getobjects",
            "text": "Returns a Table of objects in the script zone/bag/deck. What it returns varies depending on the type of Object it is used on.  If an Object is inside of a container, it does not exist in-game. As a result, you only get data on each Object, not an Object reference.   Return Table by Object Type   Scripting Zone\"  Returns a Table of Object references to every object in the scripting zone.  { \n     object_1 , \n     object_2 ,  }     Bag  Returns a Table of sub-Tables, each sub-Table containing data on 1 bagged item. Indexes start at 0.   String name : A String of the name of the Object.  String guid : A String of the GUID of the Object.  Int index : A String of the index of the Object, represents the Object's place in the bag.   { \n     name    =   \"Object Name\" , \n     guid    =   \"AAA111\" , \n     index   =   0 ,    }     Deck  Returns a Table of sub-Tables, each sub-Table containing data on 1 card. Indexes start at 0.   String nickname : A String of the name of the card.  String description : A String of the description of the card.  String guid : A String of the guid of the card.  Int index : An Int of the index of the card, represents the card's order in the deck.  String lua_script : A String of any Lua scripting saved on the card.   { \n     nickname      =   \"Object Name\" , \n     description   =   \"Object Descripotion\" , \n     guid          =   \"AAA111\" , \n     index         =   0 , \n     lua_script    =   \"Any Lua Script On This Card\" ,  }     This function is often used with  takeObject(...)  to remove objects from containers.",
            "title": "getObjects()"
        },
        {
            "location": "/object/#getrotationvalues",
            "text": "Returns a Table of rotation values. Rotation values are used to give value to different rotations (like dice) based on which side is pointed \"up\". It works by checking all of the rotation values assigned to an object and determining which one of them is closest to pointing up, and then displaying the value associated with that rotation.  You can manually assign rotation values to objects using the Rotation Value Gizmo tool (in the left side Gizmo menu) or using  setRotationValues(...) .   Return Table  The returned Table contains sub-Tables, each sub-Table containing these 2 key/value pairs.   Var value : A Var of what value is associated with a given rotation. Often a String or Int.  Vector rotation : A Vector of the rotation of the object  that best represents the given value.    --Example returned Table for a coin  { \n     { value = \"Heads\" ,   rotation = { x = 0 ,   y = 0 ,   z = 0 }}, \n     { value = \"Tails\" ,   rotation = { x = 0 ,   y = 180 ,   z = 0 }},  }",
            "title": "getRotationValues()"
        },
        {
            "location": "/object/#getstates",
            "text": "Returns a Table of information on the  states  of an Object. Stated Objects have ids (indexes) starting with 1.   Return Table   String name : A String of name of the Object.  String guid : A String of the GUID of the Object.  Int id : An Int of the id (index) of the state.    --Example returned Table  { \n     { \n         name   =   \"First State\" , \n         guid   =   \"AAA111\" , \n         id     =   1 , \n     }, \n     { \n         name   =   \"Second State\" , \n         guid   =   \"BBB222\" , \n         id     =   2 , \n     },  }",
            "title": "getStates()"
        },
        {
            "location": "/object/#getvalue",
            "text": "Returns an Int as the value. What the value represents depends on what type of Object this function is used on.     Object  Value      Clock  Returns Int of stopwatch/timer current time  (in seconds) .    Counter  Returns Int of counter value.    Rotation Value  Returns Var of the face-up value.    Hidden Zone  Returns String of the Player  Color  of the zone.    Poker Chip  Returns Int of the face value.  Does not work on custom chips.    Tablet  Returns String of the current URL.",
            "title": "getValue()"
        },
        {
            "location": "/object/#set-function-details",
            "text": "",
            "title": "Set Function Details"
        },
        {
            "location": "/object/#setcustomobject",
            "text": "Sets a custom Object's properties. It can be used after  spawnObject  or on an already existing custom Object. If used on an already existing custom Object, you must use  reload  on the object after setCustomObject for the changes to be displayed.   setCustomObject(Table parameters)  The Table of parameters varies, depending on which type of custom Object it is. See the  Spawnable Object  page for the parameters needed.   --Example of a custom token  params   =   { \n     image   =   \"SOME URL HERE\" , \n     thickness   =   0.2 , \n     merge_distance   =   15 , \n     stackable   =   false ,  }  obj . setCustomObject ( params )",
            "title": "setCustomObject(...)"
        },
        {
            "location": "/object/#setrotationvalues",
            "text": "Sets rotation values of an object. Rotation values are used to give value to different rotations (like dice). It works by checking all of the rotation values assigned to an object and determining which one of them is closest to pointing up, and then displaying the value associated with that rotation.   setRotationValues(Table rotation_values)   Table rotation_values : A Table containing Tables with the following values. 1 sub-Table per \"face\".  rotation_values.value : A Var of what value is associated with a given rotation. Often a String or Int.  rotation_values.rotation : A Vector of the rotation of the object  that best represents the given value.      --Example setting of rotation values for a coin  rotation_values   =   { \n     { value = \"Heads\" ,   rotation = { x = 0 ,   y = 0 ,   z = 0 }}, \n     { value = \"Tails\" ,   rotation = { x = 0 ,   y = 180 ,   z = 0 }},  }  self . setRotationValues ( rotation_values )",
            "title": "setRotationValues(...)"
        },
        {
            "location": "/object/#setvalue",
            "text": "Sets an Int as the value of an Object. What the value represents depends on what type of Object it is.     Object  Value      Clock  Set Int for stopwatch/timer current time  (in seconds) .    Counter  Set Int for counter value.    Rotation Value  Set Var for the face-up value.    Hidden Zone  Set String for the Player  Color  of the zone.    Tablet  Set String for the current URL.",
            "title": "setValue(...)"
        },
        {
            "location": "/object/#action-function-details",
            "text": "",
            "title": "Action Function Details"
        },
        {
            "location": "/object/#call",
            "text": "testFunc\n:  Used to call a Lua function on this Object. This is used to remotely call functions in other scripts, either in Global or Object scripts.  Global  is the \"Object\" to use to call a function in the Global script.   Returns Var   Var is only returned if the function called has a  return . Otherwise return is  nil . See example.   call(String func_name, Table func_params)   String func_name : A String of the function name you want to activate.  Table func_name : A Table containing any data you want to pass to that function.  Optional, will not be sent by default.      --Call, used from an Object script  params   =   { \n     msg     =   \"Hello world!\" , \n     color   =   { r = 0.2 ,   g = 1 ,   b = 0.2 },  }  --Success would be set to true by the return value in the function  success   =   Global . call ( \"testFunc\" ,   params )   --Function in Global  function   testFunc ( params ) \n     broadcastToAll ( params . msg ,   params . color ) \n     return   true  end",
            "title": "call(...)"
        },
        {
            "location": "/object/#clone",
            "text": "Copy/Paste this Object.   Returns Object pasted    clone(Table parameters)   Table parameters : A Table with information used when pasting.  parameters.position : A Vector of where the Object is placed.  Optional, defaults to {x=0, y=3, z=0}.    parameters.snap_to_grid : A Bool for if the Object snaps to grid.  Optional, defaults to false.",
            "title": "clone(...)"
        },
        {
            "location": "/object/#deal",
            "text": "Deals Objects to hand zones. Will deal from decks/bags/stacks as well as individual items. If dealing an individual item to a hand zone, it is a good idea to make sure that its  Member Variable  for  use_hands  is  true .   Returns Bool    deal(Int number, String player_color, Int index)   Int number : An Int of how many to deal.  String player_color : A String of the Color to deal to.  Optional, defaults to an empty string. If not supplied, it will attempt to deal to all seated players.    Int index : An Int of which Object to deal from a container.  Optional, defaults to 0. If not supplied it will deal in regular order.",
            "title": "deal(...)"
        },
        {
            "location": "/object/#dealtocolorwithoffset",
            "text": "Deals from a deck to a position relative to the hand zone.   Returns Object of dealt card    dealToColorWithOffset(Vector, Bool flip, String player_color)   Vector : A Vector of the x/y/z offset to deal to around the given hand zone.  Bool flip : A Bool for if the card is flipped over when dealt.  String player_color : A String of the hand zone Color to offset dealing to.    --Example of dealing 2 cards in front of the White player, face up.  self . dealToColorWithOffset ({ - 2 , 0 , 5 },   true ,   \"White\" )  self . dealToColorWithOffset ({   2 , 0 , 5 },   true ,   \"White\" )",
            "title": "dealToColorWithOffset(...)"
        },
        {
            "location": "/object/#putobject",
            "text": "Places an object into a container (chip stacks/bags/decks).   Returns Bool    putObject(Object put_object)   Object put_object : An Object to place into the container.    --Example of a script on a bag that places Object into itself  local   obj   =   getObjectFromGUID ( \"AAA111\" )  self . putObject ( obj )",
            "title": "putObject(...)"
        },
        {
            "location": "/object/#reload",
            "text": "Returns Object reference of itself after it respawns itself. This function causes the Object to be deleted and respawned instantly to refresh it, so its old Object reference will no longer be valid.  Most often this is used after using  setCustomObject(...)  to modify a custom object.   Returns Object of itself after respawn",
            "title": "reload()"
        },
        {
            "location": "/object/#takeobject",
            "text": "Takes an object from a container (bag/deck/chip stack) and places it in the world.   Returns Object of the Object taken    Tip  Spawned Objects take a moment to be physically spawned into the game. The purpose of the callback functionality is to allow you to run additional actions after the Object has been initiated fully into the instance. It is also possible to add a delay using a  coroutine .    takeObject(Table parameters)   Table parameters : A Table of parameters used to determine how takeObject will act.  parameters.position : A Table Vector of the position to place Object.  Optional, defaults to container's position + 2 on the x axis.    parameters.rotation : A Table Vector of the rotation of the Object.  Optional, defaults to the container's rotation.    parameters.flip : A Bool for if the Object is flipped over.  Optional, defaults to false. Only used with decks, not bags/stacks.  If rotation is used, flip's Bool will be ignored.    parameters.guid : A String of the GUID of the Object to take.  Optional,  no default. Only use index or guid, never both.    parameters.index : An Int of the index of the Object to take.  Optional,  no default. Only use index or guid, never both.    parameters.top : A Bool for if an object is taken from the top (vs bottom).  Optional, defaults to true.    parameters.smooth : A Bool for if the taken Object moves smoothly or instantly.   Optional, defaults to true.    parameters.callback : A String of the function name you want activated once the Object is initiated.  Optional, no default.  A callback function has 2 parameters, the Object spawned and, if used, the Table of params.    parameters.callback_owner : An Object of what Object has the callback function in its script. Global is a valid target.  Optional, defaults to container Object. Serves no purpose if callback is not also used.    parameters.params : A Table of data to send to the callback to use as parameters. See example.  Optional, no default. Serves no purpose if callback is not also used.        function   onLoad () \n     futureName   =   \"Taken from container!\" \n     takeParams   =   { \n         position   =   { x = 0 ,   y = 3 ,   z = 5 }, \n         callback   =   \"take_callback\" , \n         callback_owner   =   self , \n         params   =   { name   =   futureName }, \n     } \n     self . takeObject ( takeParams )  end  function   take_callback ( object_spawned ,   params ) \n     object_spawned . setName ( params . name )  end   Tip for using GUID to pull Object When getting the GUIDs of objects in a container, it is possible items can have the same GUID while in a container. This is because only once two items try to exist at the same time is one of them given a new GUID, and Objects in a container do not currently exist. Removing all Objects from the container at once will force all of them to be given unique GUIDs. Tip for using index to pull Object When you take an Object from the container, all higher indexes are reduced by 1 instantly. If you pull more than once Object at once by their index, you must account for this index changing.",
            "title": "takeObject(...)"
        },
        {
            "location": "/assetbundle/",
            "text": "AssetBundle is a special \nObject\n type that has access to assetbundle related functions like looping and trigger effects. Once you have a reference to an Object you can call these functions like this: \nobj.AssetBundle.getLoopingEffects()\n.\n\n\nFunction Summary\n\u00b6\n\n\nObject Functions\n\u00b6\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngetLoopingEffectIndex()\n\n\nReturns the index of the currently looping effect.\n\n\n\n\n\n\ngetLoopingEffects()\n\n\nReturns a Table with the keys \"index\" and \"name\" for each looping effect.\n\n\n\n\n\n\ngetTriggerEffects()\n\n\nReturns a Table with the keys \"index\" and \"name\" for each trigger effect.\n\n\n\n\n\n\nplayLoopingEffect(Int index)\n\n\nStarts playing a looping effect. Index starts at 0.\n\n\n\n\n\n\nplayTriggerEffect(Int index)\n\n\nStarts playing a trigger effect. Index starts at 0.\n\n\n\n\n\n\n\n\n\n\nFunction Details\n\u00b6\n\n\ngetLoopingEffectIndex()\n\u00b6\n\n\nReturns the \nint\n of the index of the currently looping effect.\n\n\n    \nindex\n \n=\n \nself\n.\nAssetBundle\n.\ngetLoopingEffectIndex\n()\n\n\n\n\n\n\n\ngetLoopingEffects()\n\u00b6\n\n\nReturns a \ntable\n with the keys \"index\" and \"name\" for each looping effect.\n\n\n    \n--Example usage\n\n    \neffectTable\n \n=\n \nself\n.\nAssetBundle\n.\ngetLoopingEffects\n()\n\n\n\n\n    \n--Example returned table\n\n    \n{\n\n        \n{\nindex\n=\n0\n,\n \nname\n=\n\"Effect Name 1\"\n},\n\n        \n{\nindex\n=\n1\n,\n \nname\n=\n\"Effect Name 2\"\n},\n\n    \n}\n\n\n\n\n\n\ngetTriggerEffects()\n\u00b6\n\n\nReturns a \ntable\n with the keys \"index\" and \"name\" for each trigger effect.\n\n\n    \n--Example usage\n\n    \neffectTable\n \n=\n \nself\n.\nAssetBundle\n.\ngetTriggerEffects\n()\n\n\n\n\n    \n--Example returned table\n\n    \n{\n\n        \n{\nindex\n=\n0\n,\n \nname\n=\n\"Effect Name 1\"\n},\n\n        \n{\nindex\n=\n1\n,\n \nname\n=\n\"Effect Name 2\"\n},\n\n    \n}\n\n\n\n\n\n\nplayLoopingEffect(...)\n\u00b6\n\n\nStarts playing a looping effect. Indexes for AssetBundles start at 0.\n\n\n\n\nplayLoopingEffect(Int index)\n\n\n\n\nInt index\n: Numeric index for the effect.\n\n\n\n\n\n\n    \nself\n.\nAssetBundle\n.\nplayLoopingEffect\n(\n0\n)\n\n\n\n\n\n\n\nplayTriggerEffect(...)\n\u00b6\n\n\nStarts playing a trigger effect. Indexes for AssetBundles start at 0.\n\n\n\n\nplayTriggerEffect(Int index)\n\n\n\n\nInt index\n: Numeric index for the effect.\n\n\n\n\n\n\n    \nself\n.\nAssetBundle\n.\nplayTriggerEffect\n(\n0\n)",
            "title": "AssetBundle"
        },
        {
            "location": "/assetbundle/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/assetbundle/#object-functions",
            "text": "Function Name  Description      getLoopingEffectIndex()  Returns the index of the currently looping effect.    getLoopingEffects()  Returns a Table with the keys \"index\" and \"name\" for each looping effect.    getTriggerEffects()  Returns a Table with the keys \"index\" and \"name\" for each trigger effect.    playLoopingEffect(Int index)  Starts playing a looping effect. Index starts at 0.    playTriggerEffect(Int index)  Starts playing a trigger effect. Index starts at 0.",
            "title": "Object Functions"
        },
        {
            "location": "/assetbundle/#function-details",
            "text": "",
            "title": "Function Details"
        },
        {
            "location": "/assetbundle/#getloopingeffectindex",
            "text": "Returns the  int  of the index of the currently looping effect.       index   =   self . AssetBundle . getLoopingEffectIndex ()",
            "title": "getLoopingEffectIndex()"
        },
        {
            "location": "/assetbundle/#getloopingeffects",
            "text": "Returns a  table  with the keys \"index\" and \"name\" for each looping effect.       --Example usage \n     effectTable   =   self . AssetBundle . getLoopingEffects ()        --Example returned table \n     { \n         { index = 0 ,   name = \"Effect Name 1\" }, \n         { index = 1 ,   name = \"Effect Name 2\" }, \n     }",
            "title": "getLoopingEffects()"
        },
        {
            "location": "/assetbundle/#gettriggereffects",
            "text": "Returns a  table  with the keys \"index\" and \"name\" for each trigger effect.       --Example usage \n     effectTable   =   self . AssetBundle . getTriggerEffects ()        --Example returned table \n     { \n         { index = 0 ,   name = \"Effect Name 1\" }, \n         { index = 1 ,   name = \"Effect Name 2\" }, \n     }",
            "title": "getTriggerEffects()"
        },
        {
            "location": "/assetbundle/#playloopingeffect",
            "text": "Starts playing a looping effect. Indexes for AssetBundles start at 0.   playLoopingEffect(Int index)   Int index : Numeric index for the effect.         self . AssetBundle . playLoopingEffect ( 0 )",
            "title": "playLoopingEffect(...)"
        },
        {
            "location": "/assetbundle/#playtriggereffect",
            "text": "Starts playing a trigger effect. Indexes for AssetBundles start at 0.   playTriggerEffect(Int index)   Int index : Numeric index for the effect.         self . AssetBundle . playTriggerEffect ( 0 )",
            "title": "playTriggerEffect(...)"
        },
        {
            "location": "/clock/",
            "text": "The clock is an in-game Object which either tells time or acts as a timer. It has its own class, Clock, with functions/members associated with it. This allows you to manipulate the special properties of a clock. You call these functions like this: \nself.Clock.pauseStart()\n.\nClocks have 3 modes:\n\n\n\n\nCurrent Time\n: Displays the current time of the host.\n\n\nStopwatch\n: Displays a running count up.\n\n\nTimer\n: Displays a countdown and beeps once complete.\n\n\n\n\nMember Variables\n\u00b6\n\n\nLike \nObject member variables\n, Clocks have their own member variable.\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\npaused\n\n\nIf the clock timer is paused.\n\n\nBool\n\n\n\n\n\n\n\n\n\n\nFunction Summary\n\u00b6\n\n\nObject Functions\n\u00b6\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\ninfo_outline\n\n\n\n\n\n\n\n\n\n\ngetValue()\n\n\nReturns Int of the time in stopwatch or timer mode. Clock mode returns 0. This function acts the same as \nObject's getValue()\n.\n\n\n\n\n\n\n\n\npauseStart()\n\n\nPauses/resumes a Clock in stopwatch or timer mode. Returns Bool.\n\n\n\n\n\n\n\n\nsetValue(Int seconds)\n\n\nSwitches clock to timer and sets countdown time. This function acts the same as \nObject's setValue()\n. Returns Bool.\n\n\ninfo_outline\n\n\n\n\n\n\nshowCurrentTime()\n\n\nSwitches clock to display current time. It will clear any stopwatch or timer. Returns Bool.\n\n\n\n\n\n\n\n\nstartStopwatch()\n\n\nSwitches clock to stopwatch, setting time to 0. It will reset time if already in stopwatch mode. Returns Bool.\n\n\n\n\n\n\n\n\n\n\n\n\nFunction Details\n\u00b6\n\n\nsetValue(...)\n\u00b6\n\n\nSet the timer to display a number of seconds. This function acts the same as \nObject's setValue()\n. If the Clock is not in timer mode, it will be switched. If it is in timer mode, it will be paused and the remaining time will be changed. This will not start the countdown on its own.\n\n\n\n\nReturns Bool\n\n\n\n\n\n\nsetValue(Int seconds)\n\n\n\n\nInt seconds\n: An Int of how many seconds will be counted down.\n\n\n\n\n\n\nself\n.\nClock\n.\nsetValue\n(\n30\n)",
            "title": "Clock"
        },
        {
            "location": "/clock/#member-variables",
            "text": "Like  Object member variables , Clocks have their own member variable.     Variable  Description  Type      paused  If the clock timer is paused.  Bool",
            "title": "Member Variables"
        },
        {
            "location": "/clock/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/clock/#object-functions",
            "text": "Function Name  Description  info_outline      getValue()  Returns Int of the time in stopwatch or timer mode. Clock mode returns 0. This function acts the same as  Object's getValue() .     pauseStart()  Pauses/resumes a Clock in stopwatch or timer mode. Returns Bool.     setValue(Int seconds)  Switches clock to timer and sets countdown time. This function acts the same as  Object's setValue() . Returns Bool.  info_outline    showCurrentTime()  Switches clock to display current time. It will clear any stopwatch or timer. Returns Bool.     startStopwatch()  Switches clock to stopwatch, setting time to 0. It will reset time if already in stopwatch mode. Returns Bool.",
            "title": "Object Functions"
        },
        {
            "location": "/clock/#function-details",
            "text": "",
            "title": "Function Details"
        },
        {
            "location": "/clock/#setvalue",
            "text": "Set the timer to display a number of seconds. This function acts the same as  Object's setValue() . If the Clock is not in timer mode, it will be switched. If it is in timer mode, it will be paused and the remaining time will be changed. This will not start the countdown on its own.   Returns Bool    setValue(Int seconds)   Int seconds : An Int of how many seconds will be counted down.    self . Clock . setValue ( 30 )",
            "title": "setValue(...)"
        },
        {
            "location": "/counter/",
            "text": "The Counter is an in-game Object of a digital counter. It has its own class, Counter, with functions/members associated with it. This allows you to manipulate the special properties of a Counter. You call these functions like this: \nself.Counter.increment()\n.\n\n\nFunction Summary\n\u00b6\n\n\nObject Functions\n\u00b6\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\ninfo_outline\n\n\n\n\n\n\n\n\n\n\nclear()\n\n\nResets Counter to 0. Returns Bool.\n\n\n\n\n\n\n\n\ndecrement()\n\n\nReduces Counter's value by 1. Returns Bool.\n\n\n\n\n\n\n\n\ngetValue()\n\n\nReturns Int of the current value displayed by the Counter. This function acts the same as \nObject's getValue()\n. Returns Bool.\n\n\n\n\n\n\n\n\nincrement()\n\n\nIncreases Counter's value by 1. Returns Bool.\n\n\n\n\n\n\n\n\nsetValue()\n\n\nSets the current value of the Counter. This function acts the same as \nObject's setValue()\n. Returns Bool.",
            "title": "Counter"
        },
        {
            "location": "/counter/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/counter/#object-functions",
            "text": "Function Name  Description  info_outline      clear()  Resets Counter to 0. Returns Bool.     decrement()  Reduces Counter's value by 1. Returns Bool.     getValue()  Returns Int of the current value displayed by the Counter. This function acts the same as  Object's getValue() . Returns Bool.     increment()  Increases Counter's value by 1. Returns Bool.     setValue()  Sets the current value of the Counter. This function acts the same as  Object's setValue() . Returns Bool.",
            "title": "Object Functions"
        },
        {
            "location": "/json/",
            "text": "The static global JSON class provides the ability to encode/decode data into JSON strings. This is largely used by the \nonSave()\n event function, but has other potential applications as well. The JSON class can be used on any String, Int, Float or Table. You call these functions like this: \nJSON.encode(...)\n.\n\n\n\n\nWarning\n\n\nThis class \ndoes not\n work with Object references. Use the Object's GUID instead.\n\n\n\n\nFunction Summary\n\u00b6\n\n\nObject Functions\n\u00b6\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\ninfo_outline\n\n\n\n\n\n\n\n\n\n\ndecode(String json_string)\n\n\nReturns Var from the decoded String.\n\n\ninfo_outline\n\n\n\n\n\n\nencode(Var data)\n\n\nReturns String of the encoded data from a number, String or Table.\n\n\ninfo_outline\n\n\n\n\n\n\nencode_pretty(Var data)\n\n\nReturns String of the encoded data from a number, String or Table. This version is slightly less efficient than encode(...) but is easier to read.\n\n\ninfo_outline\n\n\n\n\n\n\n\n\n\n\nFunction Details\n\u00b6\n\n\ndecode(...)\n\u00b6\n\n\nReturns Var from the decoded string.\n\n\n\n\ndecode(String json_string)\n\n\n\n\nString json_string\n: A String that is decoded, generally created by encode(...) or encode_pretty(...).\n\n\n\n\n\n\ncoded\n \n=\n \nJSON\n.\nencode\n(\n\"Test\"\n)\n\n\nprint\n(\ncoded\n)\n \n--Prints \"Test\"\n\n\ndecoded\n \n=\n \nJSON\n.\ndecode\n(\ncoded\n)\n\n\nprint\n(\ndecoded\n)\n \n--Prints Test\n\n\n\n\n\n\n\nencode(...)\n\u00b6\n\n\nReturns String of the encoded data from a number, String or Table.\n\n\n\n\nencode(Var data)\n\n\n\n\nVar data\n: A Var, either String, Int, Float or Table, to encode as a string.\n\n\n\n\n\n\n\n\nencode_pretty(...)\n\u00b6\n\n\nReturns String of the encoded data from a number, String or Table. This version is slightly less efficient than encode(...) but is easier to read.\n\n\n\n\nencode_pretty(Var data)\n\n\n\n\nVar data\n: A Var, either String, Int, Float or Table, to encode as a string.",
            "title": "JSON"
        },
        {
            "location": "/json/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/json/#object-functions",
            "text": "Function Name  Description  info_outline      decode(String json_string)  Returns Var from the decoded String.  info_outline    encode(Var data)  Returns String of the encoded data from a number, String or Table.  info_outline    encode_pretty(Var data)  Returns String of the encoded data from a number, String or Table. This version is slightly less efficient than encode(...) but is easier to read.  info_outline",
            "title": "Object Functions"
        },
        {
            "location": "/json/#function-details",
            "text": "",
            "title": "Function Details"
        },
        {
            "location": "/json/#decode",
            "text": "Returns Var from the decoded string.   decode(String json_string)   String json_string : A String that is decoded, generally created by encode(...) or encode_pretty(...).    coded   =   JSON . encode ( \"Test\" )  print ( coded )   --Prints \"Test\"  decoded   =   JSON . decode ( coded )  print ( decoded )   --Prints Test",
            "title": "decode(...)"
        },
        {
            "location": "/json/#encode",
            "text": "Returns String of the encoded data from a number, String or Table.   encode(Var data)   Var data : A Var, either String, Int, Float or Table, to encode as a string.",
            "title": "encode(...)"
        },
        {
            "location": "/json/#encode_pretty",
            "text": "Returns String of the encoded data from a number, String or Table. This version is slightly less efficient than encode(...) but is easier to read.   encode_pretty(Var data)   Var data : A Var, either String, Int, Float or Table, to encode as a string.",
            "title": "encode_pretty(...)"
        },
        {
            "location": "/lighting/",
            "text": "Lighting, a static global class, is the in-game light of the map. It allows you to modify the lighting of the instance in the same way that the \nin-game lighting menu\n does. You call these functions like this: \nLighting.apply()\n.\n\n\nFor more information on lighting in Unity, \nrefer to the Unity documentation\n.\n\n\nMember Variables\n\u00b6\n\n\nLike \nObject member variables\n, Lighting has its own member variables. They are all numbers, and have specific valid ranges.\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nambient_type\n\n\nThe source of ambient light. 1 = background, 2 = gradient.\n\n\nInt\n\n\n\n\n\n\nambient_intensity\n\n\nThe strength of the ambient light. Range = 0 to 4.\n\n\nFloat\n\n\n\n\n\n\nlight_intensity\n\n\nThe strength of the directional light shining down in the scene. Range = 0 to 4.\n\n\nFloat\n\n\n\n\n\n\nreflection_intensity\n\n\nThe strength of the reflections from the background. Range = 0 to 1.\n\n\nFloat\n\n\n\n\n\n\n\n\nFunction Summary\n\u00b6\n\n\nFunctions\n\u00b6\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\ninfo_outline\n\n\n\n\n\n\n\n\n\n\napply()\n\n\nApplies changes made to the lighting Class using these functions or member variables. Return Bool.\n\n\n\n\n\n\n\n\ngetAmbientEquatorColor()\n\n\nReturns Color Table of the gradient equator. Not used if \nambient_type = 1\n.\n\n\n\n\n\n\n\n\ngetAmbientGroundColor()\n\n\nReturns Color Table of the gradient ground. Not used if \nambient_type = 1\n.\n\n\n\n\n\n\n\n\ngetAmbientSkyColor()\n\n\nReturns Color Table of the gradient sky. Not used if \nambient_type = 1\n.\n\n\n\n\n\n\n\n\ngetLightColor()\n\n\nReturns Color Table of the directional light, which shines straight down on the table.\n\n\n\n\n\n\n\n\nsetAmbientEquatorColor(Color)\n\n\nSets the color of the gradient equator. Not used if \nambient_type = 1\n. Returns Bool.\n\n\n\n\n\n\n\n\nsetAmbientGroundColor(Color)\n\n\nSets the color of the gradient ground. Not used if \nambient_type = 1\n. Returns Bool.\n\n\n\n\n\n\n\n\nsetAmbientSkyColor(Color)\n\n\nSets the color of the gradient sky. Not used if \nambient_type = 1\n. Returns Bool.\n\n\n\n\n\n\n\n\nsetLightColor(Color)\n\n\nSets the color of the directional light, which shines straight down on the table. Returns Bool.\n\n\n\n\n\n\n\n\n\n\n\n\nFunction Details\n\u00b6\n\n\nExample of making light red and bright\n\u00b6\n\n\nfunction\n \nonLoad\n()\n\n    \nred\n \n=\n \n{\nr\n=\n1\n,\n \ng\n=\n0.6\n,\n \nb\n=\n0.6\n}\n\n    \nLighting\n.\nlight_intensity\n \n=\n \n2\n\n    \nLighting\n.\nsetLightColor\n(\nred\n)\n\n    \nLighting\n.\napply\n()\n\n\nend",
            "title": "Lighting"
        },
        {
            "location": "/lighting/#member-variables",
            "text": "Like  Object member variables , Lighting has its own member variables. They are all numbers, and have specific valid ranges.     Variable  Description  Type      ambient_type  The source of ambient light. 1 = background, 2 = gradient.  Int    ambient_intensity  The strength of the ambient light. Range = 0 to 4.  Float    light_intensity  The strength of the directional light shining down in the scene. Range = 0 to 4.  Float    reflection_intensity  The strength of the reflections from the background. Range = 0 to 1.  Float",
            "title": "Member Variables"
        },
        {
            "location": "/lighting/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/lighting/#functions",
            "text": "Function Name  Description  info_outline      apply()  Applies changes made to the lighting Class using these functions or member variables. Return Bool.     getAmbientEquatorColor()  Returns Color Table of the gradient equator. Not used if  ambient_type = 1 .     getAmbientGroundColor()  Returns Color Table of the gradient ground. Not used if  ambient_type = 1 .     getAmbientSkyColor()  Returns Color Table of the gradient sky. Not used if  ambient_type = 1 .     getLightColor()  Returns Color Table of the directional light, which shines straight down on the table.     setAmbientEquatorColor(Color)  Sets the color of the gradient equator. Not used if  ambient_type = 1 . Returns Bool.     setAmbientGroundColor(Color)  Sets the color of the gradient ground. Not used if  ambient_type = 1 . Returns Bool.     setAmbientSkyColor(Color)  Sets the color of the gradient sky. Not used if  ambient_type = 1 . Returns Bool.     setLightColor(Color)  Sets the color of the directional light, which shines straight down on the table. Returns Bool.",
            "title": "Functions"
        },
        {
            "location": "/lighting/#function-details",
            "text": "",
            "title": "Function Details"
        },
        {
            "location": "/lighting/#example-of-making-light-red-and-bright",
            "text": "function   onLoad () \n     red   =   { r = 1 ,   g = 0.6 ,   b = 0.6 } \n     Lighting . light_intensity   =   2 \n     Lighting . setLightColor ( red ) \n     Lighting . apply ()  end",
            "title": "Example of making light red and bright"
        },
        {
            "location": "/physics/",
            "text": "Physics, a static global class, allows access to casts and gravity. Physics casts are a way to detect Objects. You call these functions like this: \nPhysics.getGravity()\n.\n\n\nFor more information on physics casts in Unity, \nrefer to the Unity documentation\n under BoxCast/RayCast/SphereCast.\n\n\nFunction Summary\n\u00b6\n\n\nFunctions\n\u00b6\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\ninfo_outline\n\n\n\n\n\n\n\n\n\n\ncast(Table parameters)\n\n\nReturns Table containing information on hit Objects.\n\n\ninfo_outline\n\n\n\n\n\n\ngetGravity()\n\n\nReturns directional Vector of the direction gravity is pulling.\n\n\n\n\n\n\n\n\nsetGravity(Vector)\n\n\nSets the direction gravity gravity pulls.\n\n\n\n\n\n\n\n\n\n\n\n\nFunction Details\n\u00b6\n\n\ncast(...)\n\u00b6\n\n\nReturns Table containing information on hit Objects. There are three kinds of casts:\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nRay\n\n\nA line.\n\n\n\n\n\n\nBox\n\n\nA cube, rectangle, plane.\n\n\n\n\n\n\nSphere\n\n\nA round ball. You cannot make ovals.\n\n\n\n\n\n\n\n\nIt draws the imaginary cast, then moves the rap/box/sphere along that path instantly. The debug Bool in the parameters allows you to see this shape, to aid in setup, but the visual is not instant (due to that making it pointless, if you can't see it).\n\n\n\n\nWarning\n\n\nPhysics casts are somewhat expensive. When running 30+ at once it will cause your game to stutter and/or crash. Do not overuse.\n\n\n\n\n\n\ncast(Table parameters)\n\n\n\n\nTable parameters\n: A Table of parameters used to guide the function.\n\n\nparameters.origin\n: A Vector of the starting point.\n\n\nOptional, defaults to {x=0, y=0, z=0}.\n\n\n\n\n\n\nparameters.direction\n: A directional Vector for the cast to move in.\n\n\nOptional, but cast is motionless without a direction.\n\n\n\n\n\n\nparameters.type\n: An Int of the type of cast. 1 = Ray, 2 = Sphere, 3= Box.\n\n\nOptional, defaults to 1.\n\n\n\n\n\n\nparameters.size\n: A Vector of the size of the cast. Sphere/Box only.\n\n\nOptional, defaults to {x=0, y=0, z=0}.\n\n\n\n\n\n\nparameters.orientation\n: A rotational Vector of the cast. Box only.\n\n\nOptional, defaults to {x=0, y=0, z=0}.\n\n\n\n\n\n\nparameters.max_distance\n: A Float of how fast the cast will travel.\n\n\nOptional, defaults to infinity. Won't move without direction.\n\n\n\n\n\n\nparameters.debug\n: A Bool for if the cast is visualized for the user.\n\n\nOptional, defaults to false.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReturned Table of Hit Objects\n\n\n\n\nTable\n: A numerically indexed Table, one entry for each hit Object. Entries are in the order of being hit.\n\n\nVector point\n: A Vector of the position the cast impact.\n\n\nVector normal\n: A Vector of the surface normal of the impact point.\n\n\nFloat distance\n: A Float of the distance between cast origin and impact point.\n\n\nObject hit_object\n: An Object reference to the object hit by the cast.\n\n\n\n\n\n\n\n\n\n\n--Example usage\n\n\n--This function, when called, returns a table of hit data\n\n\nfunction\n \nfindHitsInRadius\n(\npos\n,\n \nradius\n)\n\n    \nlocal\n \nradius\n \n=\n \n(\nradius\n \nor\n \n1\n)\n\n    \nlocal\n \nhitList\n \n=\n \nPhysics\n.\ncast\n({\n\n        \norigin\n       \n=\n \npos\n,\n\n        \ndirection\n    \n=\n \n{\n0\n,\n1\n,\n0\n},\n\n        \ntype\n         \n=\n \n2\n,\n\n        \nsize\n         \n=\n \n{\nradius\n,\nradius\n,\nradius\n},\n\n        \nmax_distance\n \n=\n \n0\n,\n\n        \ndebug\n        \n=\n \ntrue\n,\n\n    \n})\n\n\n    \nreturn\n \nhitList\n\n\nend\n\n\n\n\n\n--Example returned Table\n\n\n{\n\n    \n{\n\n        \npoint\n \n=\n \n{\nx\n=\n0\n,\ny\n=\n0\n,\nz\n=\n0\n},\n\n        \nnormal\n \n=\n \n{\nx\n=\n1\n,\n0\n,\n0\n},\n\n        \ndistance\n \n=\n \n4\n,\n\n        \nhit_object\n \n=\n \nobjectreference1\n,\n\n    \n},\n\n    \n{\n\n        \npoint\n \n=\n \n{\nx\n=\n1\n,\ny\n=\n0\n,\nz\n=\n0\n},\n\n        \nnormal\n \n=\n \n{\nx\n=\n2\n,\n0\n,\n0\n},\n\n        \ndistance\n \n=\n \n5\n,\n\n        \nhit_object\n \n=\n \nobjectreference2\n,\n\n    \n},\n\n\n}",
            "title": "Physics"
        },
        {
            "location": "/physics/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/physics/#functions",
            "text": "Function Name  Description  info_outline      cast(Table parameters)  Returns Table containing information on hit Objects.  info_outline    getGravity()  Returns directional Vector of the direction gravity is pulling.     setGravity(Vector)  Sets the direction gravity gravity pulls.",
            "title": "Functions"
        },
        {
            "location": "/physics/#function-details",
            "text": "",
            "title": "Function Details"
        },
        {
            "location": "/physics/#cast",
            "text": "Returns Table containing information on hit Objects. There are three kinds of casts:     Type  Description      Ray  A line.    Box  A cube, rectangle, plane.    Sphere  A round ball. You cannot make ovals.     It draws the imaginary cast, then moves the rap/box/sphere along that path instantly. The debug Bool in the parameters allows you to see this shape, to aid in setup, but the visual is not instant (due to that making it pointless, if you can't see it).   Warning  Physics casts are somewhat expensive. When running 30+ at once it will cause your game to stutter and/or crash. Do not overuse.    cast(Table parameters)   Table parameters : A Table of parameters used to guide the function.  parameters.origin : A Vector of the starting point.  Optional, defaults to {x=0, y=0, z=0}.    parameters.direction : A directional Vector for the cast to move in.  Optional, but cast is motionless without a direction.    parameters.type : An Int of the type of cast. 1 = Ray, 2 = Sphere, 3= Box.  Optional, defaults to 1.    parameters.size : A Vector of the size of the cast. Sphere/Box only.  Optional, defaults to {x=0, y=0, z=0}.    parameters.orientation : A rotational Vector of the cast. Box only.  Optional, defaults to {x=0, y=0, z=0}.    parameters.max_distance : A Float of how fast the cast will travel.  Optional, defaults to infinity. Won't move without direction.    parameters.debug : A Bool for if the cast is visualized for the user.  Optional, defaults to false.         Returned Table of Hit Objects   Table : A numerically indexed Table, one entry for each hit Object. Entries are in the order of being hit.  Vector point : A Vector of the position the cast impact.  Vector normal : A Vector of the surface normal of the impact point.  Float distance : A Float of the distance between cast origin and impact point.  Object hit_object : An Object reference to the object hit by the cast.      --Example usage  --This function, when called, returns a table of hit data  function   findHitsInRadius ( pos ,   radius ) \n     local   radius   =   ( radius   or   1 ) \n     local   hitList   =   Physics . cast ({ \n         origin         =   pos , \n         direction      =   { 0 , 1 , 0 }, \n         type           =   2 , \n         size           =   { radius , radius , radius }, \n         max_distance   =   0 , \n         debug          =   true , \n     }) \n\n     return   hitList  end   --Example returned Table  { \n     { \n         point   =   { x = 0 , y = 0 , z = 0 }, \n         normal   =   { x = 1 , 0 , 0 }, \n         distance   =   4 , \n         hit_object   =   objectreference1 , \n     }, \n     { \n         point   =   { x = 1 , y = 0 , z = 0 }, \n         normal   =   { x = 2 , 0 , 0 }, \n         distance   =   5 , \n         hit_object   =   objectreference2 , \n     },  }",
            "title": "cast(...)"
        },
        {
            "location": "/player/",
            "text": "Player, a static global class, allows control over in-game players and their \nhand zones\n. You call these functions like this: \nPlayer[\"White\"].seated\n or \nPlayer[\"Green\"].mute()\n.\n\n\nMember Variables\n\u00b6\n\n\nLike \nObject member variables\n, Player has its own member variables.\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nadmin\n\n\nIf the player is promoted or the host of the game. Read only.\n\n\nBool\n\n\n\n\n\n\nblindfolded\n\n\nIf the player is blindfolded.\n\n\nBool\n\n\n\n\n\n\ncolor\n\n\nThe player's \nPlayer Color\n. Read only.\n\n\nString\n\n\n\n\n\n\nhost\n\n\nIf the player is the host. Read only.\n\n\nBool\n\n\n\n\n\n\nlift_height\n\n\nThe lift height for the player. This is how far an object is raised when held in a player's hand. Value is ranged 0 to 1.\n\n\nFloat\n\n\n\n\n\n\npromoted\n\n\nIf the current player is promoted.\n\n\nBool\n\n\n\n\n\n\nseated\n\n\nIf a player is currently seated at this color. Read only.\n\n\nBool\n\n\n\n\n\n\nsteam_id\n\n\nThe Steam ID of the player. This is unique to each player's Steam account. Read only.\n\n\nString\n\n\n\n\n\n\nsteam_name\n\n\nThe Steam name of the player. Read only.\n\n\nString\n\n\n\n\n\n\nTeam\n\n\nThe team of the player.\nOptions: \n\"None\", \"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\", \"Jokers\"\n.\n\n\nString\n\n\n\n\n\n\n\n\n\n\nFunction Summary\n\u00b6\n\n\nClass Functions\n\u00b6\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\ninfo_outline\n\n\n\n\n\n\n\n\n\n\nattachCameraToObject(Table parameters)\n\n\nMakes a Player's camera follow an Object. Returns Bool.\n\n\ninfo_outline\n\n\n\n\n\n\nbroadcast(String message, Color)\n\n\nPrint message on Player's screen and their game chat log. Returns Bool.\n\n\ninfo_outline\n\n\n\n\n\n\nchangeColor(String player_color)\n\n\nChanges player to this \nPlayer Color\n. Returns Bool.\n\n\ninfo_outline\n\n\n\n\n\n\ngetHandCount()\n\n\nReturns the number of \nhand zones\n owned by this color.\n\n\n\n\n\n\n\n\ngetHandObjects(Int hand_index)\n\n\nReturns a Table of Objects that are in this \nhand zone\n.\n\n\ninfo_outline\n\n\n\n\n\n\ngetHandTransform(Int hand_index)\n\n\nReturns a Table of data on this \nhand zone\n.\n\n\ninfo_outline\n\n\n\n\n\n\ngetHoldingObjects()\n\n\nReturns Table of Objects a Player is holding in their hand.\n\n\n\n\n\n\n\n\ngetHoverObject()\n\n\nReturns Object that the Player's pointer is hovering over.\n\n\n\n\n\n\n\n\ngetPointerPosition()\n\n\nReturns Vector of the Player's pointer coordinates.\n\n\n\n\n\n\n\n\ngetSelectedObjects()\n\n\nReturns Table of Objects that the Player has selected with an area selection.\n\n\n\n\n\n\n\n\nkick()\n\n\nKicks Player out of the room. Returns Bool.\n\n\n\n\n\n\n\n\nlookAt(Table parameters)\n\n\nMoves a Player's camera, forcing 3'rd person camera mode. Returns Bool.\n\n\ninfo_outline\n\n\n\n\n\n\nmute()\n\n\nMutes or unmutes Player, preventing/allowing voice chat. Returns Bool.\n\n\n\n\n\n\n\n\nprint(String message, Color)\n\n\nPrints a message into the Player's game chat. Returns Bool.\n\n\ninfo_outline\n\n\n\n\n\n\npromote()\n\n\nPromotes/demotes a Player. Promoted players have access to most host privileges. Returns Bool.\n\n\n\n\n\n\n\n\nsetHandTransform(Table parameters, Int hand_index)\n\n\nSets transform elements of a hand zone. Returns Bool.\n\n\ninfo_outline\n\n\n\n\n\n\n\n\nDirect Class Functions\n\u00b6\n\n\nThese functions return direct references to Players, not a Player Color. \n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\ninfo_outline\n\n\n\n\n\n\n\n\n\n\ngetPlayers()\n\n\nReturns Table of all Players in the instance.\n\n\ninfo_outline\n\n\n\n\n\n\ngetSpectators()\n\n\nReturns Table of all Players in spectator (Grey).\n\n\ninfo_outline\n\n\n\n\n\n\n\n\n\n\nFunction Details\n\u00b6\n\n\nClass Function Details\n\u00b6\n\n\nattachCameraToObject(...)\n\u00b6\n\n\nMakes a Player's camera follow an Object. Returns Bool.\n\n\n\n\nReturns Bool\n\n\n\n\n\n\nattachCameraToObject(Table parameters)\n\n\n\n\nTable parameters\n: A Table with parameters which guide the function.\n\n\nparameters.object\n: The Object to attach the camera to.\n\n\nparameters.offset\n: A Vector to offset the camera by.\n\n\nOptional, defaults to {x=0, y=0, z=0}.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nself\n.\nattachCameraToObject\n({\nobject\n=\nself\n})\n\n\n\n\n\n\n\nbroadcast(...)\n\u00b6\n\n\nPrint message on Player's screen and their game chat log.\n\n\n\n\nReturns Bool.\n\n\n\n\n\n\nbroadcast(String message, Color)\n\n\n\n\nString message\n: A String to be displayed.\n\n\nColor\n: A Color Table for the text to be tinted.\n\n\nOptional, defaults to {r=1, g=1, b=1}.\n\n\n\n\n\n\n\n\n\n\n\n\nchangeColor(...)\n\u00b6\n\n\nChanges player to this \nPlayer Color\n.\n\n\n\n\nReturns Bool.\n\n\n\n\n\n\nchangeColor(String player_color)\n\n\n\n\nString player_color\n: A String of the color seat to move the Player to.\n\n\n\n\n\n\nPlayer\n[\n\"White\"\n].\nchangeColor\n(\n\"Red\"\n)\n\n\n\n\n\n\n\ngetHandObjects(...)\n\u00b6\n\n\nReturns a Table of Objects that are in this \nhand zone\n.\n\n\n\n\ngetHandObjects(Int hand_index)\n\n\n\n\nInt hand_index\n: An Int of the index, representing which hand zone to return Objects for.\n\n\nOptional, defaults to 1.\n\n\n\n\n\n\n\n\n\n\n\n\nIndexing\n\n\nHand indexes start at 1 and are numbered in the order of their creation. Each Player color has its own indexes.\n\n\n\n\n\n\ngetHandTransform(Int hand_index)\n\u00b6\n\n\nReturns a Table of data on this \nhand zone\n.\n\n\n\n\ngetHandTransform(Int hand_index)\n\n\n\n\nInt hand_index\n: An Int of the index, representing which hand zone to return data on.\n\n\nOptional, defaults to 1.\n\n\n\n\n\n\n\n\n\n\n\n\nReturn Data Table\n\n\n\n\nTable data\n: The Table the data is returned in\n\n\ndata.position\n: A Vector of the position of the hand zone.\n\n\ndata.rotation\n: A Vector of the rotation of the hand zone.\n\n\ndata.scale\n: A Vector of the scale of the hand zone.\n\n\ndata.forward\n: A Vector of the forward direction of the hand zone.\n\n\ndata.right\n: A Vector of the right direction of the hand zone.\n\n\ndata.up\n: A Vector of the up direction of the hand zone.\n\n\n\n\n\n\n\n\n\n\n\n\nIndexing\n\n\nHand indexes start at 1 and are numbered in the order of their creation. Each Player color has its own indexes.\n\n\n\n\n\n\nlookAt(...)\n\u00b6\n\n\nMoves a Player's camera, forcing 3'rd person camera mode.\n\n\n\n\nReturns Bool.\n\n\n\n\n\n\nlookAt(Table parameters)\n\n\n\n\nTable parameters\n: A Table of controlling parameters to point the player camera.\n\n\nparameters.position\n: A Vector of the position to center the camera to.\n\n\nparameters.pitch\n: A Float of the pitch angle of the camera. 0 to 90.\n\n\nOptional, defaults to 0.\n\n\n\n\n\n\nparameters.yaw\n: A Float of the yaw angle of the camera. -180 to 180.\n\n\nOptional, defaults to 0.\n\n\n\n\n\n\nparameters.distance\n: A Float of the distance the camera is from the position Vector.\n\n\nOptional, defaults to 40.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n--Assuming someone is in the White seat\n\n\nPlayer\n[\n\"White\"\n].\nlookAt\n({\n\n    \nposition\n \n=\n \n{\nx\n=\n0\n,\ny\n=\n0\n,\nz\n=\n0\n},\n\n    \npitch\n    \n=\n \n25\n,\n\n    \nyaw\n      \n=\n \n180\n,\n\n    \ndistance\n \n=\n \n20\n,\n\n\n})\n\n\n\n\n\n\n\nprint(...)\n\u00b6\n\n\nPrints a message into the Player's game chat.\n\n\n\n\nReturns Bool.\n\n\n\n\n\n\nprint(String message, Color)\n\n\n\n\nString message\n: A String to be displayed.\n\n\nColor\n: A Color Table for the text to be tinted.\n\n\nOptional, defaults to {r=1, g=1, b=1}.\n\n\n\n\n\n\n\n\n\n\n\n\nsetHandTransform(...)\n\u00b6\n\n\nSets transform elements of a \nhand zone\n.\n\n\n\n\nReturns Bool.\n\n\n\n\n\n\nsetHandTransform(Table parameters, Int hand_index)\n\n\n\n\nTable parameters\n: The Table the data to transform the hand zone with.\n\n\nparameters.position\n: A Vector of the position of the hand zone.\n\n\nOptional, defaults to {x=0, y=0, z=0}.\n\n\n\n\n\n\nparameters.rotation\n: A Vector of the rotation of the hand zone.\n\n\nOptional, defaults to {x=0, y=0, z=0}.\n\n\n\n\n\n\nparameters.scale\n: A Vector of the scale of the hand zone.\n\n\nOptional, defaults to {x=0, y=0, z=0}.\n\n\n\n\n\n\n\n\n\n\nInt hand_index\n: An Int of the index, representing which hand zone to modify.\n\n\nOptional, defaults to 1.\n\n\n\n\n\n\n\n\n\n\n\n\nIndexing\n\n\nHand indexes start at 1 and are numbered in the order of their creation. Each Player color has its own indexes.\n\n\n\n\n--Example of moving/rotating/scaling hand zone\n\n\nparams\n \n=\n \n{\n\n    \nposition\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n5\n,\n \nz\n=\n0\n},\n\n    \nrotation\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n45\n,\n \nz\n=\n0\n},\n\n    \nscale\n    \n=\n \n{\nx\n=\n2\n,\n \ny\n=\n2\n,\n \nz\n=\n2\n},\n\n\n}\n\n\nPlayer\n[\n\"White\"\n].\nsetHandTransform\n(\nparams\n,\n \n2\n)\n\n\n\n\n\n\n\nDirect Class Function Details\n\u00b6\n\n\ngetPlayers()\n\u00b6\n\n\nReturns Table of all Players in the instance.\n\n\n--Blindfolding all players\n\n\nplayerList\n \n=\n \nPlayer\n.\ngetPlayers\n()\n\n\nfor\n \n_\n,\n \nplayerReference\n \nin\n \nipairs\n(\nplayerList\n)\n \ndo\n\n    \nplayerReference\n.\nblindfolded\n \n=\n \ntrue\n\n\nend\n\n\n\n\n\n\n\ngetSpectators()\n\u00b6\n\n\nReturns Table of all Players in spectator (Grey).\n\n\n--Printing steam name of all players to host chat\n\n\nplayerList\n \n=\n \nPlayer\n.\ngetSpectators\n()\n\n\nfor\n \n_\n,\n \nplayerReference\n \nin\n \nipairs\n(\nplayerList\n)\n \ndo\n\n    \nprint\n(\nplayerReference\n.\nsteam_name\n)\n\n\nend",
            "title": "Player"
        },
        {
            "location": "/player/#member-variables",
            "text": "Like  Object member variables , Player has its own member variables.     Variable  Description  Type      admin  If the player is promoted or the host of the game. Read only.  Bool    blindfolded  If the player is blindfolded.  Bool    color  The player's  Player Color . Read only.  String    host  If the player is the host. Read only.  Bool    lift_height  The lift height for the player. This is how far an object is raised when held in a player's hand. Value is ranged 0 to 1.  Float    promoted  If the current player is promoted.  Bool    seated  If a player is currently seated at this color. Read only.  Bool    steam_id  The Steam ID of the player. This is unique to each player's Steam account. Read only.  String    steam_name  The Steam name of the player. Read only.  String    Team  The team of the player. Options:  \"None\", \"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\", \"Jokers\" .  String",
            "title": "Member Variables"
        },
        {
            "location": "/player/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/player/#class-functions",
            "text": "Function Name  Description  info_outline      attachCameraToObject(Table parameters)  Makes a Player's camera follow an Object. Returns Bool.  info_outline    broadcast(String message, Color)  Print message on Player's screen and their game chat log. Returns Bool.  info_outline    changeColor(String player_color)  Changes player to this  Player Color . Returns Bool.  info_outline    getHandCount()  Returns the number of  hand zones  owned by this color.     getHandObjects(Int hand_index)  Returns a Table of Objects that are in this  hand zone .  info_outline    getHandTransform(Int hand_index)  Returns a Table of data on this  hand zone .  info_outline    getHoldingObjects()  Returns Table of Objects a Player is holding in their hand.     getHoverObject()  Returns Object that the Player's pointer is hovering over.     getPointerPosition()  Returns Vector of the Player's pointer coordinates.     getSelectedObjects()  Returns Table of Objects that the Player has selected with an area selection.     kick()  Kicks Player out of the room. Returns Bool.     lookAt(Table parameters)  Moves a Player's camera, forcing 3'rd person camera mode. Returns Bool.  info_outline    mute()  Mutes or unmutes Player, preventing/allowing voice chat. Returns Bool.     print(String message, Color)  Prints a message into the Player's game chat. Returns Bool.  info_outline    promote()  Promotes/demotes a Player. Promoted players have access to most host privileges. Returns Bool.     setHandTransform(Table parameters, Int hand_index)  Sets transform elements of a hand zone. Returns Bool.  info_outline",
            "title": "Class Functions"
        },
        {
            "location": "/player/#direct-class-functions",
            "text": "These functions return direct references to Players, not a Player Color.      Function Name  Description  info_outline      getPlayers()  Returns Table of all Players in the instance.  info_outline    getSpectators()  Returns Table of all Players in spectator (Grey).  info_outline",
            "title": "Direct Class Functions"
        },
        {
            "location": "/player/#function-details",
            "text": "",
            "title": "Function Details"
        },
        {
            "location": "/player/#class-function-details",
            "text": "",
            "title": "Class Function Details"
        },
        {
            "location": "/player/#attachcameratoobject",
            "text": "Makes a Player's camera follow an Object. Returns Bool.   Returns Bool    attachCameraToObject(Table parameters)   Table parameters : A Table with parameters which guide the function.  parameters.object : The Object to attach the camera to.  parameters.offset : A Vector to offset the camera by.  Optional, defaults to {x=0, y=0, z=0}.        self . attachCameraToObject ({ object = self })",
            "title": "attachCameraToObject(...)"
        },
        {
            "location": "/player/#broadcast",
            "text": "Print message on Player's screen and their game chat log.   Returns Bool.    broadcast(String message, Color)   String message : A String to be displayed.  Color : A Color Table for the text to be tinted.  Optional, defaults to {r=1, g=1, b=1}.",
            "title": "broadcast(...)"
        },
        {
            "location": "/player/#changecolor",
            "text": "Changes player to this  Player Color .   Returns Bool.    changeColor(String player_color)   String player_color : A String of the color seat to move the Player to.    Player [ \"White\" ]. changeColor ( \"Red\" )",
            "title": "changeColor(...)"
        },
        {
            "location": "/player/#gethandobjects",
            "text": "Returns a Table of Objects that are in this  hand zone .   getHandObjects(Int hand_index)   Int hand_index : An Int of the index, representing which hand zone to return Objects for.  Optional, defaults to 1.       Indexing  Hand indexes start at 1 and are numbered in the order of their creation. Each Player color has its own indexes.",
            "title": "getHandObjects(...)"
        },
        {
            "location": "/player/#gethandtransformint-hand_index",
            "text": "Returns a Table of data on this  hand zone .   getHandTransform(Int hand_index)   Int hand_index : An Int of the index, representing which hand zone to return data on.  Optional, defaults to 1.       Return Data Table   Table data : The Table the data is returned in  data.position : A Vector of the position of the hand zone.  data.rotation : A Vector of the rotation of the hand zone.  data.scale : A Vector of the scale of the hand zone.  data.forward : A Vector of the forward direction of the hand zone.  data.right : A Vector of the right direction of the hand zone.  data.up : A Vector of the up direction of the hand zone.       Indexing  Hand indexes start at 1 and are numbered in the order of their creation. Each Player color has its own indexes.",
            "title": "getHandTransform(Int hand_index)"
        },
        {
            "location": "/player/#lookat",
            "text": "Moves a Player's camera, forcing 3'rd person camera mode.   Returns Bool.    lookAt(Table parameters)   Table parameters : A Table of controlling parameters to point the player camera.  parameters.position : A Vector of the position to center the camera to.  parameters.pitch : A Float of the pitch angle of the camera. 0 to 90.  Optional, defaults to 0.    parameters.yaw : A Float of the yaw angle of the camera. -180 to 180.  Optional, defaults to 0.    parameters.distance : A Float of the distance the camera is from the position Vector.  Optional, defaults to 40.        --Assuming someone is in the White seat  Player [ \"White\" ]. lookAt ({ \n     position   =   { x = 0 , y = 0 , z = 0 }, \n     pitch      =   25 , \n     yaw        =   180 , \n     distance   =   20 ,  })",
            "title": "lookAt(...)"
        },
        {
            "location": "/player/#print",
            "text": "Prints a message into the Player's game chat.   Returns Bool.    print(String message, Color)   String message : A String to be displayed.  Color : A Color Table for the text to be tinted.  Optional, defaults to {r=1, g=1, b=1}.",
            "title": "print(...)"
        },
        {
            "location": "/player/#sethandtransform",
            "text": "Sets transform elements of a  hand zone .   Returns Bool.    setHandTransform(Table parameters, Int hand_index)   Table parameters : The Table the data to transform the hand zone with.  parameters.position : A Vector of the position of the hand zone.  Optional, defaults to {x=0, y=0, z=0}.    parameters.rotation : A Vector of the rotation of the hand zone.  Optional, defaults to {x=0, y=0, z=0}.    parameters.scale : A Vector of the scale of the hand zone.  Optional, defaults to {x=0, y=0, z=0}.      Int hand_index : An Int of the index, representing which hand zone to modify.  Optional, defaults to 1.       Indexing  Hand indexes start at 1 and are numbered in the order of their creation. Each Player color has its own indexes.   --Example of moving/rotating/scaling hand zone  params   =   { \n     position   =   { x = 0 ,   y = 5 ,   z = 0 }, \n     rotation   =   { x = 0 ,   y = 45 ,   z = 0 }, \n     scale      =   { x = 2 ,   y = 2 ,   z = 2 },  }  Player [ \"White\" ]. setHandTransform ( params ,   2 )",
            "title": "setHandTransform(...)"
        },
        {
            "location": "/player/#direct-class-function-details",
            "text": "",
            "title": "Direct Class Function Details"
        },
        {
            "location": "/player/#getplayers",
            "text": "Returns Table of all Players in the instance.  --Blindfolding all players  playerList   =   Player . getPlayers ()  for   _ ,   playerReference   in   ipairs ( playerList )   do \n     playerReference . blindfolded   =   true  end",
            "title": "getPlayers()"
        },
        {
            "location": "/player/#getspectators",
            "text": "Returns Table of all Players in spectator (Grey).  --Printing steam name of all players to host chat  playerList   =   Player . getSpectators ()  for   _ ,   playerReference   in   ipairs ( playerList )   do \n     print ( playerReference . steam_name )  end",
            "title": "getSpectators()"
        },
        {
            "location": "/player-colors/",
            "text": "Each person able to interact with objects in-game is assigned a Player Color to represent them. This is chosen when a Player picks a seat color or is assigned one by the host. Many functions refer to these Players or their hand zones, and it does so via color names. All color names are strings and are case sensitive within functions.\n\n\nEach color also has an RGB value associated with it. For more information on the RGB Color standard, view the \nColor section\n.\n\n\n\n\n\n\n\n\nColor Name\n\n\nRGB \nColor Sample\n\n\n\n\n\n\n\n\n\n\nWhite\n\n\n Test\n\n\n\n\n\n\nBrown\n\n\nTest \n\n\n\n\n\n\nRed\n\n\n\n\n\n\n\n\nOrange\n\n\n{r=1, g=1, b=1}\n \n\n\n\n\n\n\nYellow\n\n\n\n\n\n\n\n\nGreen\n\n\n\n\n\n\n\n\nTeal\n\n\n\n\n\n\n\n\nBlue\n\n\n\n\n\n\n\n\nPurple\n\n\n\n\n\n\n\n\nPink\n\n\n\n\n\n\n\n\nGrey \nspectator\n\n\n\n\n\n\n\n\nBlack \nDM\n\n\n\n\n\n\n\n\n\n\n\n    \n\n        \nColor Name\n\n        \nColor Swatch\n\n        \nRGB\n\n    \n\n    \n\n        \nWhite\n\n        \n\n        \n {r=1, g=1, b=1} \n\n    \n\n    \n\n        \nBrown\n\n        \n\n        \n0.443, 0.231, 0.09\n\n    \n\n    \n\n        \nRed\n\n        \n\n        \n0.856, 0.1, 0.094\n\n    \n\n    \n\n        \nOrange\n\n        \n\n        \n0.956, 0.392, 0.113\n\n    \n\n    \n\n        \nYellow\n\n        \n\n        \n0.905, 0.898, 0.172\n\n    \n\n    \n\n        \nGreen\n\n        \n\n        \n0.192, 0.701, 0.168\n\n    \n\n    \n\n        \nTeal\n\n        \n\n        \n0.129, 0.694, 0.607\n\n    \n\n    \n\n        \nBlue\n\n        \n\n        \n0.118, 0.53, 1\n\n    \n\n    \n\n        \nPurple\n\n        \n\n        \n0.627, 0.125, 0.941\n\n    \n\n    \n\n        \nPink\n\n        \n\n        \n0.96, 0.439, 0.807\n\n    \n\n    \n\n        \nGrey\n\n        \n\n        \n0.5, 0.5, 0.5\n\n    \n\n    \n\n        \nBlack\n\n        \n\n        \n0.25, 0.25, 0.25",
            "title": "Player Colors"
        },
        {
            "location": "/rpgfigurine/",
            "text": "An RPGFigurine is an in-game Object of a figurine with built-in animations. It has its own class, RPGFigurine, with functions associated with it. This allows you to manipulate the special properties of these figurines.\n\n\nFunction Summary\n\u00b6\n\n\nObject Functions\n\u00b6\n\n\nThese functions are called like this: \nself.RPGFigurine.attack()\n.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\ninfo_outline\n\n\n\n\n\n\n\n\n\n\nattack()\n\n\nPlays a random attack animation. Returns Bool.\n\n\n\n\n\n\n\n\nchangeMode()\n\n\nChanges the figurine's current mode. What the mode represents is based on the figurine. Returns Bool.\n\n\n\n\n\n\n\n\ndie()\n\n\nPlays the death animation or causes it to return to life. Returns Bool.\n\n\n\n\n\n\n\n\n\n\nEvent Functions\n\u00b6\n\n\nThese functions are called by the game whenever a figurine attacks or is attacked. See details for example usage.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\ninfo_outline\n\n\n\n\n\n\n\n\n\n\nonAttack(Table hit_list)\n\n\nActivates when an attack is performed by an identified RPGFigurine Object.\n\n\ninfo_outline\n\n\n\n\n\n\nonHit(Object attacker)\n\n\nActivates when an attack is performed on this RPGFigurine Object.\n\n\ninfo_outline\n\n\n\n\n\n\n\n\n\n\nFunction Details\n\u00b6\n\n\nEvent Function Details\n\u00b6\n\n\nonAttack(...)\n\u00b6\n\n\nActivates when an attack is performed by an identified RPGFigurine Object. An attack is triggered via the context menu or pressing the appropriate number key. If another RPGFigurine is within its attack arch, then the function will be triggered with the figurine hit passed as a parameter.\n\n\n\n\nonAttack(Table hit_list)\n\n\n\n\nTable hit_list\n: A Table of Object references for RPGFigurines within the reach of the attack.\n\n\n\n\n\n\n--Monitoring and announcing a cyclops attacks\n\n\nfunction\n \nonLoad\n()\n\n    \ncyclops\n \n=\n \ngetObjectFromGUID\n(\n\"aaa111\"\n)\n\n\n    \nfunction\n \ncyclops\n.\nRPGFigurine\n.\nonAttack\n(\nhit_list\n)\n\n        \nfor\n \n_\n,\n \nv\n \nin\n \nipairs\n(\nhit_list\n)\n \ndo\n\n            \nprint\n(\nv\n.\ngetName\n()\n \n..\n \n\" was hit!\"\n)\n\n        \nend\n\n    \nend\n\n\nend\n\n\n\n\n\n\n\nonHit(...)\n\u00b6\n\n\nActivates when an attack is performed on this RPGFigurine Object. An attack is triggered via the context menu or pressing the appropriate number key. If this RPGFigurine is within the attack radius, this function is triggered, passing a parameter of the Object which attacked.\n\n\n\n\nonHit(Object attacker)\n\n\n\n\nObject attacker\n: An Object reference of the RPGFigurine attacking the indicated RPGFigurine.\n\n\n\n\n\n\n--Monitoring and announcing a cyclops being hit\n\n\nfunction\n \nonLoad\n()\n\n    \ncyclops\n \n=\n \ngetObjectFromGUID\n(\n\"aaa111\"\n)\n\n\n    \nfunction\n \ncyclops\n.\nRPGFigurine\n.\nonHit\n(\nattacker\n)\n\n        \nprint\n(\nattacker\n.\ngetName\n()\n \n..\n \n\" attacked the Cyclops!\"\n)\n\n    \nend\n\n\nend",
            "title": "RPGFigurine"
        },
        {
            "location": "/rpgfigurine/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/rpgfigurine/#object-functions",
            "text": "These functions are called like this:  self.RPGFigurine.attack() .     Function Name  Description  info_outline      attack()  Plays a random attack animation. Returns Bool.     changeMode()  Changes the figurine's current mode. What the mode represents is based on the figurine. Returns Bool.     die()  Plays the death animation or causes it to return to life. Returns Bool.",
            "title": "Object Functions"
        },
        {
            "location": "/rpgfigurine/#event-functions",
            "text": "These functions are called by the game whenever a figurine attacks or is attacked. See details for example usage.     Function Name  Description  info_outline      onAttack(Table hit_list)  Activates when an attack is performed by an identified RPGFigurine Object.  info_outline    onHit(Object attacker)  Activates when an attack is performed on this RPGFigurine Object.  info_outline",
            "title": "Event Functions"
        },
        {
            "location": "/rpgfigurine/#function-details",
            "text": "",
            "title": "Function Details"
        },
        {
            "location": "/rpgfigurine/#event-function-details",
            "text": "",
            "title": "Event Function Details"
        },
        {
            "location": "/rpgfigurine/#onattack",
            "text": "Activates when an attack is performed by an identified RPGFigurine Object. An attack is triggered via the context menu or pressing the appropriate number key. If another RPGFigurine is within its attack arch, then the function will be triggered with the figurine hit passed as a parameter.   onAttack(Table hit_list)   Table hit_list : A Table of Object references for RPGFigurines within the reach of the attack.    --Monitoring and announcing a cyclops attacks  function   onLoad () \n     cyclops   =   getObjectFromGUID ( \"aaa111\" ) \n\n     function   cyclops . RPGFigurine . onAttack ( hit_list ) \n         for   _ ,   v   in   ipairs ( hit_list )   do \n             print ( v . getName ()   ..   \" was hit!\" ) \n         end \n     end  end",
            "title": "onAttack(...)"
        },
        {
            "location": "/rpgfigurine/#onhit",
            "text": "Activates when an attack is performed on this RPGFigurine Object. An attack is triggered via the context menu or pressing the appropriate number key. If this RPGFigurine is within the attack radius, this function is triggered, passing a parameter of the Object which attacked.   onHit(Object attacker)   Object attacker : An Object reference of the RPGFigurine attacking the indicated RPGFigurine.    --Monitoring and announcing a cyclops being hit  function   onLoad () \n     cyclops   =   getObjectFromGUID ( \"aaa111\" ) \n\n     function   cyclops . RPGFigurine . onHit ( attacker ) \n         print ( attacker . getName ()   ..   \" attacked the Cyclops!\" ) \n     end  end",
            "title": "onHit(...)"
        },
        {
            "location": "/spawnableobjects/",
            "text": "Objects can be spawned by any script using the \nspawnObject()\n function. These are the \ntype\n Strings used to designate the type of Object to spawn. \n\n\nBuilt-in Game Objects\n\u00b6\n\n\nBoards\n\u00b6\n\n\n\n\nbackgammon_board\n\n\nCardBot_Board\n\n\nChecker_Board\n\n\nChess_Board\n\n\nChinese_Checkers_Board\n\n\nGo_Board\n\n\nPachisi_Board\n\n\nreversi_board\n\n\n\n\nContainers\n\u00b6\n\n\n\n\nBag\n\n\nBowl\n\n\nCup\n\n\ngo_game_bowl_black\n\n\ngo_game_bowl_white\n\n\nInfinite_Bag\n\n\n\n\nFigurines\n\u00b6\n\n\n\n\nFigurine_Card_Bot\n\n\nFigurine_Kimi_Kat\n\n\nFigurine_Knil\n\n\nFigurine_Mara\n\n\nFigurine_Sir_Loin\n\n\nFigurine_Zeke\n\n\nFigurine_Zomblor\n\n\n\n\nGame Pieces\n\u00b6\n\n\n\n\nbackgammon_piece_brown\n\n\nbackgammon_piece_white\n\n\nBlockRectangle\n\n\nBlockSquare\n\n\nBlockTriangle\n\n\nCard\n\n\nChecker_black\n\n\nChecker_red\n\n\nChecker_white\n\n\nChess_Bishop\n\n\nChess_King\n\n\nChess_Knight\n\n\nChess_Pawn\n\n\nChess_Queen\n\n\nChess_Rook\n\n\nChinese_Checkers_Piece\n\n\nChip_10\n\n\nChip_50\n\n\nChip_100\n\n\nChip_500\n\n\nChip_1000\n\n\nDeck\n\n\nDie_4\n\n\nDie_6\n\n\nDie_6_Rounded\n\n\nDie_8\n\n\nDie_10\n\n\nDie_12\n\n\nDie_20\n\n\nDie_Piecepack\n\n\nDomino\n\n\ngo_game_piece_black\n\n\ngo_game_piece_white\n\n\nMahjong_Coin\n\n\nMahjong_Stick\n\n\nMahjong_Tile\n\n\nMetal Ball\n\n\nPiecePack_Arms\n\n\nPiecePack_Crowns\n\n\nPiecePack_Moons\n\n\nPiecePack_Suns\n\n\nPlayerPawn\n\n\nQuarter\n\n\nreversi_chip\n\n\n\n\nRPG Figurines\n\u00b6\n\n\n\n\nrpg_BARGHEST\n\n\nrpg_BASILISK\n\n\nrpg_BEAR\n\n\nrpg_BLACK_DRAGON\n\n\nrpg_CENTAUR\n\n\nrpg_CERBERUS\n\n\nrpg_CHIMERA\n\n\nrpg_CRASC\n\n\nrpg_CYCLOP\n\n\nrpg_DARKNESS_WARLORD\n\n\nrpg_DRAGONIDE\n\n\nrpg_EVIL_WATCHER\n\n\nrpg_GHOUL\n\n\nrpg_GIANT_VIPER\n\n\nrpg_GOBLIN\n\n\nrpg_GOLEM\n\n\nrpg_GRIFFON\n\n\nrpg_HYDRA\n\n\nrpg_KNIGHT\n\n\nrpg_KOBOLD\n\n\nrpg_LIZARD_WARRIOR\n\n\nrpg_MAGE\n\n\nrpg_MANTICORA\n\n\nrpg_MUMMY\n\n\nrpg_OGRE\n\n\nrpg_ORC\n\n\nrpg_RANGER\n\n\nrpg_RAT\n\n\nrpg_SKELETON_KNIGHT\n\n\nrpg_TEMPLATE\n\n\nrpg_THIEF\n\n\nrpg_TREE_ENT\n\n\nrpg_TROLL\n\n\nrpg_VAMPIRE\n\n\nrpg_WARRIOR\n\n\nrpg_WEREWOLF\n\n\nrpg_WYVERN\n\n\n\n\nTilesets\n\u00b6\n\n\n\n\nTileset_Barrel\n\n\nTileset_Chair\n\n\nTileset_Chest\n\n\nTileset_Corner\n\n\nTileset_Floor\n\n\nTileset_Rock\n\n\nTileset_Table\n\n\nTileset_Tree\n\n\nTileset_Wall\n\n\n\n\nTools\n\u00b6\n\n\n\n\nCalculator\n\n\nCounter\n\n\nDigital_Clock\n\n\nNotecard\n\n\nTablet\n\n\n\n\nTriggers\n\u00b6\n\n\n\n\nScriptingTrigger\n\n\nA Scripting Zone, a zone used for scripting\n\n\n\n\n\n\nFogOfWarTrigger\n\n\nA \nHidden Zone\n\n\n\n\n\n\n\n\nOther\n\u00b6\n\n\n\n\n3DText\n\n\nThe text that the \nText Tool\n spawns.\n\n\n\n\n\n\n\n\n\n\nCustom Game Objects\n\u00b6\n\n\nYou can also spawn \ncustom Objects\n and then provide the custom content for them after spawning them by calling \nsetCustomObject()\n. \n(See setCustomObject for usage)\n\n\nYou can also use setCustomObject along with \nreload()\n to modify an existing custom Object.\n\n\nCustom AssetBundle\n\u00b6\n\n\n\n\nCustom_AssetBundle\n\n\n\n\n\n\nCustom Parameters\n\n\n\n\nparameters\n: A Table of parameters which determine the properties of the Object.\n\n\n \nassetbundle\n: The path/url for the AssetBundle. \n\n\nassetbundle_secondary\n: The path/url for the secondary AssetBundle property. \n\n\nOptional, is not used by default.\n\n\n\n\n\n\ntype\n: An Int representing the Object's type.\n\n\nOptional, defaults to 0.\n\n\n0\n: Generic\n\n\n1\n: Figurine\n\n\n2\n: Dice\n\n\n3\n: Coin\n\n\n4\n: Board\n\n\n5\n: Chip\n\n\n6\n: Bag\n\n\n7\n: Infinite bag\n\n\n\n\n\n\nmaterial\n: An Int representing the Object's material.\n\n\nOptional, defaults to 0.\n\n\n0\n: Plastic\n\n\n1\n: Wood\n\n\n2\n: Metal\n\n\n3\n: Cardboard\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest\n\n\n\nTest\n\n\n\n1\n\n\n2\n\n\n3\n\n\n\nCustom Board\n\u00b6\n\n\n\n\nCustom_Board\n\n\n\n\n\n\nCustom Parameters\n\n\n\n\n\n\nparameters\n: A Table of parameters which determine the properties of the Object.\n\n\nimage\n: The path/url for the board.\n\n\n\n\n\n\n\n\nCustom Dice\n\u00b6\n\n\n\n\nCustom_Dice\n\n\n\n\n\n\nCustom Parameters\n\n\n\n\n\n\nparameters\n: A Table of parameters which determine the properties of the Object.\n\n\nimage\n: The path/url for the \ncustom die\n.\n\n\ntype\n: The type of die, which determines its number of sides.\n\n\nOptional, defaults to 1.\n\n\n0\n: 4-sided\n\n\n1\n: 6-sided\n\n\n2\n: 8-sided\n\n\n3\n: 10-sided\n\n\n4\n: 12-sided\n\n\n5\n: 20-sided\n\n\n\n\n\n\n\n\n\n\n\n\nCustom Figurine\n\u00b6\n\n\n\n\nFigurine_Custom\n\n\n\n\n\n\nCustom Parameters\n\n\n\n\n\n\nparameters\n: A Table of parameters which determine the properties of the Object.\n\n\nimage\n: The path/url for the \ncustom figurine\n.\n\n\nimage_secondary\n: The path/url for the custom figurine's back.\n\n\nOptional, defaults to \"image\".\n\n\n\n\n\n\n\n\n\n\n\n\nCustom Model\n\u00b6\n\n\n\n\nCustom_Model\n\n\n\n\n\n\nCustom Parameters\n\n\n\n\n\n\nparameters\n: A Table of parameters which determine the properties of the Object.\n\n\nmesh\n: The path/url for the .obj mesh used on the \ncustom model\n.\n\n\ndiffuse\n: The path/url for the diffuse image.\n\n\nnormal\n: The path/url for the normals image.\n\n\nOptional, is not used by default.\n\n\n\n\n\n\ncollider\n: The path/url for the collider mesh.\n\n\nOptional, defaults to a generic box collider.\n\n\n\n\n\n\nconvex\n: If the object model is convex.\n\n\nOptional, defaults to false.\n\n\n\n\n\n\ntype\n: An Int representing the Object's type.\n\n\nOptional, defaults to 0.\n\n\n0\n: Generic\n\n\n1\n: Figurine\n\n\n2\n: Dice\n\n\n3\n: Coin\n\n\n4\n: Board\n\n\n5\n: Chip\n\n\n6\n: Bag\n\n\n7\n: Infinite bag\n\n\n\n\n\n\nmaterial\n: An Int representing the Object's material.\n\n\nOptional, defaults to 0.\n\n\n0\n: Plastic\n\n\n1\n: Wood\n\n\n2\n: Metal\n\n\n3\n: Cardboard\n\n\n\n\n\n\nspecular_intensity\n: The specular intensity.\n\n\nOptional, defaults to 0.1.\n\n\n\n\n\n\nspecular_color\n: The specular Color.\n\n\nOptional, defaults to {r=1, g=1, b=1}.\n\n\n\n\n\n\nspecular_sharpness\n: The specular sharpness.\n\n\nOptional, defaults to 3.\n\n\n\n\n\n\nfreshnel_strength\n: The freshnel strength.\n\n\nOptional, defaults to 0.1.\n\n\n\n\n\n\ncast_shadows\n: If the Object casts shadows.\n\n\nOptional, defaults to true.\n\n\n\n\n\n\n\n\n\n\n\n\nCustom Tile\n\u00b6\n\n\n\n\nCustom_Tile\n\n\n\n\n\n\nCustom Parameters\n\n\n\n\n\n\nparameters\n: A Table of parameters which determine the properties of the Object.\n\n\n\n\nCustom Token\n\u00b6\n\n\n\n\n \nparameters\n: Test of this feature.\n\n\n \nimage\n: Test of this feature.\n\n\n \nmaterial\n: Test of this feature.\n\n\n\n\n \nspecular\n: Test of this feature.\n\n\n\n\n\n\nCustom_Token\n\n\n\n\n\n\n\n\nCustom Parameters\n\n\n\n\n\n\nparameters\n: A Table of parameters which determine the properties of the Object.",
            "title": "Spawnable Objects"
        },
        {
            "location": "/spawnableobjects/#built-in-game-objects",
            "text": "",
            "title": "Built-in Game Objects"
        },
        {
            "location": "/spawnableobjects/#boards",
            "text": "backgammon_board  CardBot_Board  Checker_Board  Chess_Board  Chinese_Checkers_Board  Go_Board  Pachisi_Board  reversi_board",
            "title": "Boards"
        },
        {
            "location": "/spawnableobjects/#containers",
            "text": "Bag  Bowl  Cup  go_game_bowl_black  go_game_bowl_white  Infinite_Bag",
            "title": "Containers"
        },
        {
            "location": "/spawnableobjects/#figurines",
            "text": "Figurine_Card_Bot  Figurine_Kimi_Kat  Figurine_Knil  Figurine_Mara  Figurine_Sir_Loin  Figurine_Zeke  Figurine_Zomblor",
            "title": "Figurines"
        },
        {
            "location": "/spawnableobjects/#game-pieces",
            "text": "backgammon_piece_brown  backgammon_piece_white  BlockRectangle  BlockSquare  BlockTriangle  Card  Checker_black  Checker_red  Checker_white  Chess_Bishop  Chess_King  Chess_Knight  Chess_Pawn  Chess_Queen  Chess_Rook  Chinese_Checkers_Piece  Chip_10  Chip_50  Chip_100  Chip_500  Chip_1000  Deck  Die_4  Die_6  Die_6_Rounded  Die_8  Die_10  Die_12  Die_20  Die_Piecepack  Domino  go_game_piece_black  go_game_piece_white  Mahjong_Coin  Mahjong_Stick  Mahjong_Tile  Metal Ball  PiecePack_Arms  PiecePack_Crowns  PiecePack_Moons  PiecePack_Suns  PlayerPawn  Quarter  reversi_chip",
            "title": "Game Pieces"
        },
        {
            "location": "/spawnableobjects/#rpg-figurines",
            "text": "rpg_BARGHEST  rpg_BASILISK  rpg_BEAR  rpg_BLACK_DRAGON  rpg_CENTAUR  rpg_CERBERUS  rpg_CHIMERA  rpg_CRASC  rpg_CYCLOP  rpg_DARKNESS_WARLORD  rpg_DRAGONIDE  rpg_EVIL_WATCHER  rpg_GHOUL  rpg_GIANT_VIPER  rpg_GOBLIN  rpg_GOLEM  rpg_GRIFFON  rpg_HYDRA  rpg_KNIGHT  rpg_KOBOLD  rpg_LIZARD_WARRIOR  rpg_MAGE  rpg_MANTICORA  rpg_MUMMY  rpg_OGRE  rpg_ORC  rpg_RANGER  rpg_RAT  rpg_SKELETON_KNIGHT  rpg_TEMPLATE  rpg_THIEF  rpg_TREE_ENT  rpg_TROLL  rpg_VAMPIRE  rpg_WARRIOR  rpg_WEREWOLF  rpg_WYVERN",
            "title": "RPG Figurines"
        },
        {
            "location": "/spawnableobjects/#tilesets",
            "text": "Tileset_Barrel  Tileset_Chair  Tileset_Chest  Tileset_Corner  Tileset_Floor  Tileset_Rock  Tileset_Table  Tileset_Tree  Tileset_Wall",
            "title": "Tilesets"
        },
        {
            "location": "/spawnableobjects/#tools",
            "text": "Calculator  Counter  Digital_Clock  Notecard  Tablet",
            "title": "Tools"
        },
        {
            "location": "/spawnableobjects/#triggers",
            "text": "ScriptingTrigger  A Scripting Zone, a zone used for scripting    FogOfWarTrigger  A  Hidden Zone",
            "title": "Triggers"
        },
        {
            "location": "/spawnableobjects/#other",
            "text": "3DText  The text that the  Text Tool  spawns.",
            "title": "Other"
        },
        {
            "location": "/spawnableobjects/#custom-game-objects",
            "text": "You can also spawn  custom Objects  and then provide the custom content for them after spawning them by calling  setCustomObject() .  (See setCustomObject for usage)  You can also use setCustomObject along with  reload()  to modify an existing custom Object.",
            "title": "Custom Game Objects"
        },
        {
            "location": "/spawnableobjects/#custom-assetbundle",
            "text": "Custom_AssetBundle    Custom Parameters   parameters : A Table of parameters which determine the properties of the Object.    assetbundle : The path/url for the AssetBundle.   assetbundle_secondary : The path/url for the secondary AssetBundle property.   Optional, is not used by default.    type : An Int representing the Object's type.  Optional, defaults to 0.  0 : Generic  1 : Figurine  2 : Dice  3 : Coin  4 : Board  5 : Chip  6 : Bag  7 : Infinite bag    material : An Int representing the Object's material.  Optional, defaults to 0.  0 : Plastic  1 : Wood  2 : Metal  3 : Cardboard        Test",
            "title": "Custom AssetBundle"
        },
        {
            "location": "/spawnableobjects/#custom-board",
            "text": "Custom_Board    Custom Parameters    parameters : A Table of parameters which determine the properties of the Object.  image : The path/url for the board.",
            "title": "Custom Board"
        },
        {
            "location": "/spawnableobjects/#custom-dice",
            "text": "Custom_Dice    Custom Parameters    parameters : A Table of parameters which determine the properties of the Object.  image : The path/url for the  custom die .  type : The type of die, which determines its number of sides.  Optional, defaults to 1.  0 : 4-sided  1 : 6-sided  2 : 8-sided  3 : 10-sided  4 : 12-sided  5 : 20-sided",
            "title": "Custom Dice"
        },
        {
            "location": "/spawnableobjects/#custom-figurine",
            "text": "Figurine_Custom    Custom Parameters    parameters : A Table of parameters which determine the properties of the Object.  image : The path/url for the  custom figurine .  image_secondary : The path/url for the custom figurine's back.  Optional, defaults to \"image\".",
            "title": "Custom Figurine"
        },
        {
            "location": "/spawnableobjects/#custom-model",
            "text": "Custom_Model    Custom Parameters    parameters : A Table of parameters which determine the properties of the Object.  mesh : The path/url for the .obj mesh used on the  custom model .  diffuse : The path/url for the diffuse image.  normal : The path/url for the normals image.  Optional, is not used by default.    collider : The path/url for the collider mesh.  Optional, defaults to a generic box collider.    convex : If the object model is convex.  Optional, defaults to false.    type : An Int representing the Object's type.  Optional, defaults to 0.  0 : Generic  1 : Figurine  2 : Dice  3 : Coin  4 : Board  5 : Chip  6 : Bag  7 : Infinite bag    material : An Int representing the Object's material.  Optional, defaults to 0.  0 : Plastic  1 : Wood  2 : Metal  3 : Cardboard    specular_intensity : The specular intensity.  Optional, defaults to 0.1.    specular_color : The specular Color.  Optional, defaults to {r=1, g=1, b=1}.    specular_sharpness : The specular sharpness.  Optional, defaults to 3.    freshnel_strength : The freshnel strength.  Optional, defaults to 0.1.    cast_shadows : If the Object casts shadows.  Optional, defaults to true.",
            "title": "Custom Model"
        },
        {
            "location": "/spawnableobjects/#custom-tile",
            "text": "Custom_Tile    Custom Parameters    parameters : A Table of parameters which determine the properties of the Object.",
            "title": "Custom Tile"
        },
        {
            "location": "/spawnableobjects/#custom-token",
            "text": "parameters : Test of this feature.    image : Test of this feature.    material : Test of this feature.     specular : Test of this feature.    Custom_Token     Custom Parameters    parameters : A Table of parameters which determine the properties of the Object.",
            "title": "Custom Token"
        }
    ]
}