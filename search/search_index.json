{
    "docs": [
        {
            "location": "/",
            "text": "Introduction\n\u00b6\n\n\nWelcome to \nLua Scripting\n in Tabletop Simulator! Scripting is an advanced feature and it\u2019s expected you already know something about it. However, for complete novices, check out this \nbeginners scripting guide to Lua\n created by MrStump, to help you along the way.\n\n\n\n\nA game is composed of one Global Script and zero to many Object Scripts. The Global Script is a script that lives in your game that can run background tasks and do general game management type functions. Object scripts are attached to an individual object. Objects are anything with a physical model in the game - chess piece, dice, decks, cards, bags, custom models, boards, etc. Both types of scripts can call the same functions, but Object scripts have access to a reference of the Object it is attached to with the \nself\n keyword.\n\n\nResources\n\u00b6\n\n\nYou are able to follow the links on the left side of the page for available tools to help utiliz and learn the basics of scripting. When at the top of the page, you will see a link to the Lua API for documentation on all of the available Tabletop Simulator Lua functionality. Links on the right side of the page help navigate the article you are viewing.\n\n\nWriting Lua Scripts\n\u00b6\n\n\nThe Lua code is written via our in-game code editor or via our \nOfficial Plugin for the Atom Text Editor\n. Lua scripts are stored in the .json file of the save game as a plain text string. There is no need for an external internet host for Lua scripts, everything is self-contained in your game\u2019s save file. Workshop uploads work the same way.",
            "title": "Introduction"
        },
        {
            "location": "/#introduction",
            "text": "Welcome to  Lua Scripting  in Tabletop Simulator! Scripting is an advanced feature and it\u2019s expected you already know something about it. However, for complete novices, check out this  beginners scripting guide to Lua  created by MrStump, to help you along the way.   A game is composed of one Global Script and zero to many Object Scripts. The Global Script is a script that lives in your game that can run background tasks and do general game management type functions. Object scripts are attached to an individual object. Objects are anything with a physical model in the game - chess piece, dice, decks, cards, bags, custom models, boards, etc. Both types of scripts can call the same functions, but Object scripts have access to a reference of the Object it is attached to with the  self  keyword.",
            "title": "Introduction"
        },
        {
            "location": "/#resources",
            "text": "You are able to follow the links on the left side of the page for available tools to help utiliz and learn the basics of scripting. When at the top of the page, you will see a link to the Lua API for documentation on all of the available Tabletop Simulator Lua functionality. Links on the right side of the page help navigate the article you are viewing.",
            "title": "Resources"
        },
        {
            "location": "/#writing-lua-scripts",
            "text": "The Lua code is written via our in-game code editor or via our  Official Plugin for the Atom Text Editor . Lua scripts are stored in the .json file of the save game as a plain text string. There is no need for an external internet host for Lua scripts, everything is self-contained in your game\u2019s save file. Workshop uploads work the same way.",
            "title": "Writing Lua Scripts"
        },
        {
            "location": "/overview/",
            "text": "Available scripting methods\n\u00b6\n\n\nIn-Game Lua Editor\n\u00b6\n\n\nYou can access the in-game Lua Editor by clicking on \nHost -> Scripting\n or by right clicking on an object, choosing Scripting, and then selecting Lua Editor from the contextual menu. In the Lua Editor, the tabs on the left of the editor let you switch between the Global and the Object scripts. Once your Lua code is written, you can use the \nSave and Play\n button to commit your changes to your save file and reload for quick iteration. \nSave and Play\n will only commit your script changes, any changes made that weren't scripting will be lost.\n\n\nThe advantage of this method is it requires no additional setup. However it lacks many features included in some of the other options.\n\n\n\n\nOfficial Atom Plugin\n\u00b6\n\n\nThe preferred method of writing Lua scripts is using our Official Plugin for the Atom Text Editor. It has all of the functionality of the in-game editor plus line numbers, syntax highlighting, autocomplete, and a modern look. \nClick here for setup instructions.\n\n\n\n\nExternal Editor API\n\u00b6\n\n\nIt is also possible to edit inside of other envionments which are not officially supported. Using the External Editor API it is possible to work in other enviornments (like Notepad++).\n\n\n\n\nWarning\n\n\nThis method does not, by default, include many features that Atom provides, like auto-completion of Tabletop Simulator functions/class members.\n\n\n\n\nLua Standard Libraries\n\u00b6\n\n\nWe include a subset of the Lua standard libraries into our interpreter to provide a safe sandbox for user scripts to run.\n\n\n\n\n\n\n\n\nLibrary\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBasic\n\n\nThe basic methods. Includes assert, collectgarbage, error, print, select, type, tonumber, and tostring.\n\n\n\n\n\n\nBit32\n\n\nThe bit32 package.\n\n\n\n\n\n\nCoroutine\n\n\nThe coroutine package.\n\n\n\n\n\n\nDynamic\n\n\nThe dynamic package (introduced by MoonSharp).\n\n\n\n\n\n\nErrorHandling\n\n\nThe error handling methods: pcall and xpcall.\n\n\n\n\n\n\nGlobalConsts\n\n\nThe global constants: _G, _VERSION, and _MOONSHARP.\n\n\n\n\n\n\nMath\n\n\nThe math package.\n\n\n\n\n\n\nMetatables\n\n\nThe metatable methods : setmetatable, getmetatable, rawset, rawget, rawequal, and rawlen.\n\n\n\n\n\n\nOS_Time\n\n\nThe time methods of the os package: clock, difftime, date, and time.\n\n\n\n\n\n\nString\n\n\nThe string package.\n\n\n\n\n\n\nTable\n\n\nThe table package.\n\n\n\n\n\n\nTableIterators\n\n\nThe table iterators: next, ipairs, and pairs.\n\n\n\n\n\n\n\n\nFor further information\n\u00b6\n\n\n\n\nOfficial Lua Website\n\n\nMoonSharp\n\n\n\n\nExample Mods\n\u00b6\n\n\n\n\nBlackJack\n\n\nChess Clock\n\n\nRoulette\n\n\nInteractable",
            "title": "Overview"
        },
        {
            "location": "/overview/#available-scripting-methods",
            "text": "",
            "title": "Available scripting methods"
        },
        {
            "location": "/overview/#in-game-lua-editor",
            "text": "You can access the in-game Lua Editor by clicking on  Host -> Scripting  or by right clicking on an object, choosing Scripting, and then selecting Lua Editor from the contextual menu. In the Lua Editor, the tabs on the left of the editor let you switch between the Global and the Object scripts. Once your Lua code is written, you can use the  Save and Play  button to commit your changes to your save file and reload for quick iteration.  Save and Play  will only commit your script changes, any changes made that weren't scripting will be lost.  The advantage of this method is it requires no additional setup. However it lacks many features included in some of the other options.",
            "title": "In-Game Lua Editor"
        },
        {
            "location": "/overview/#official-atom-plugin",
            "text": "The preferred method of writing Lua scripts is using our Official Plugin for the Atom Text Editor. It has all of the functionality of the in-game editor plus line numbers, syntax highlighting, autocomplete, and a modern look.  Click here for setup instructions.",
            "title": "Official Atom Plugin"
        },
        {
            "location": "/overview/#external-editor-api",
            "text": "It is also possible to edit inside of other envionments which are not officially supported. Using the External Editor API it is possible to work in other enviornments (like Notepad++).   Warning  This method does not, by default, include many features that Atom provides, like auto-completion of Tabletop Simulator functions/class members.",
            "title": "External Editor API"
        },
        {
            "location": "/overview/#lua-standard-libraries",
            "text": "We include a subset of the Lua standard libraries into our interpreter to provide a safe sandbox for user scripts to run.     Library  Description      Basic  The basic methods. Includes assert, collectgarbage, error, print, select, type, tonumber, and tostring.    Bit32  The bit32 package.    Coroutine  The coroutine package.    Dynamic  The dynamic package (introduced by MoonSharp).    ErrorHandling  The error handling methods: pcall and xpcall.    GlobalConsts  The global constants: _G, _VERSION, and _MOONSHARP.    Math  The math package.    Metatables  The metatable methods : setmetatable, getmetatable, rawset, rawget, rawequal, and rawlen.    OS_Time  The time methods of the os package: clock, difftime, date, and time.    String  The string package.    Table  The table package.    TableIterators  The table iterators: next, ipairs, and pairs.",
            "title": "Lua Standard Libraries"
        },
        {
            "location": "/overview/#for-further-information",
            "text": "Official Lua Website  MoonSharp",
            "title": "For further information"
        },
        {
            "location": "/overview/#example-mods",
            "text": "BlackJack  Chess Clock  Roulette  Interactable",
            "title": "Example Mods"
        },
        {
            "location": "/atom/",
            "text": "Atom is a free, open source, and cross-platform text editor created by \nGitHub\n:\n\n\n\n\nAtom is a text editor that's modern, approachable, yet hackable to the core - a tool you can customize to do anything but also use productively without ever touching a config file.\n\n\n\n\nWe created an official plugin for the Atom text editor to make writing Lua scripts for Tabletop Simulator super easy and fun!\n\n\nThis page provides a basic overview of how to install and use the plugin; if you would like a more in-depth explanation of its features and how to install/use it then please \nsee its documentation\n.\n\n\nOur official plugin introduces syntax highlighting, code autocompletion for the Tabletop Simulator Lua API, and functions to interact with the game. The in-game editor will continue to exist for quick access to scripts, but development on it will cease to continue.\n\n\nPrefer another text editor? Take look at our \nExternal Editor API\n to make your own plugin.\n\n\nFeatures\n\u00b6\n\n\nThis is only a summarized list of features Atom offers. Check out a more complete documentation on the plugin specifically in the \nplugin wiki\n.\n\n\nSyntax Highlighting\n\u00b6\n\n\nAll standard Lua syntax is highlighted in multiple colors to help with readability.\n\n\n\n\nCode Autocompletion\n\u00b6\n\n\nThe entire Tabletop Simulator Lua Scripting API (with the exception of the Player class) has been added to the native Atom autocomplete system. Easily see all of the member variables and functions available to you with their parameters, return type, short description, and a link directly to our Knowledge Base with more information for that variable or function. Functions belonging to the Lua standard library classes such as math, coroutine, or os link directly to the official Lua documentation.\n\n\n\n\nTabletop Simulator Interactivity\n\u00b6\n\n\nThe Atom plugin can directly connect to a running instance of Tabletop Simulator to get all of the existing Lua scripts on Objects and to call Save & Play. Both functions can be called directly from the Packages menu or the right click contextual menu. TTS must be running with the game loaded for these functions to work.\n\n\n\n\n\n\n\n\nCommand\n\n\nAction Taken\n\n\n\n\n\n\n\n\n\n\nGet Lua Scripts\n\n\nDownloads all existing scripts in a loaded Tabletop Simulator game with Atom. You will need to call Get Lua Scripts every time you change to a different game in TTS.\n\n\n\n\n\n\nSave & Play\n\n\nSaves all Lua files in Atom, uploads them to a loaded Tabletop Simulator game, and reloads the current game (same as Save & Play in the in-game editor).\n\n\n\n\n\n\n\n\n\n\n\n\n\nEvery time you start up Atom, the cached local *.lua files are deleted.\n\n\n\n\nInstalling Atom\n\u00b6\n\n\nDownload and install Atom \nfrom the official website\n.\n\n\nInstalling the Official Plugin\n\u00b6\n\n\n\n\nClick on File -> Settings\n\n\nSelect the Install tab in Settings\n\n\nType in tabletopsimulator-lua into the search field and press the Enter key or click the Packages button\n\n\nClick the blue Install button for the tabletopsimulator-lua package\n\n\n\n\n\n\nSetting Up Atom\n\u00b6\n\n\nTab Width\n\u00b6\n\n\nBy default, Tabletop Simulator scripts use a tab width of four spaces. You are not required to adhere to this spacing. By default, Atom has a tab width of two spaces. To optionally make Atom default to a tab width of four spaces:\n\n\n\n\nClick on File -> Settings\n\n\nSelect the Settings tab in Settings\n\n\nScroll down to Tab Length\n\n\nSet the Tab Length to 4\n\n\n\n\n\n\nTabls as Pipe Operators\n\u00b6\n\n\nTo enable tabs showing up as pipe operators \"|\" as an indent guide:\n\n\n\n\nClick on File -> Settings\n\n\nSelect the Settings tab in Settings\n\n\nScroll down to Show Indent Guide\n\n\nCheck Show Indent Guide\n\n\n\n\n\n\nUpdating Atom Plugin\n\u00b6\n\n\nThe plugin will automatically check for updates when Atom is started. If a new update is found, it will update itself. You will have to manually restart Atom for the new version of the plugin to be loaded. You can check Atom's console if it found an update (ctrl + alt + i).\n\n\nAtom Tips\n\u00b6\n\n\nThese are just a few basic tips to help get the most out of Atom.\n\n\n\n\nPrint Messages\n\n\nAll print() functions automatically send their messages to Atom's console (ctrl + alt + i).\n\n\n\n\n\n\nError Messages\n\n\nAll Lua errors are automatically sent to Atom's console (ctrl + alt + i).\n\n\n\n\n\n\nQuick Save + Play\n\n\nHitting Ctrl + Shift + S will trigger Save & Play.",
            "title": "Atom"
        },
        {
            "location": "/atom/#features",
            "text": "This is only a summarized list of features Atom offers. Check out a more complete documentation on the plugin specifically in the  plugin wiki .",
            "title": "Features"
        },
        {
            "location": "/atom/#syntax-highlighting",
            "text": "All standard Lua syntax is highlighted in multiple colors to help with readability.",
            "title": "Syntax Highlighting"
        },
        {
            "location": "/atom/#code-autocompletion",
            "text": "The entire Tabletop Simulator Lua Scripting API (with the exception of the Player class) has been added to the native Atom autocomplete system. Easily see all of the member variables and functions available to you with their parameters, return type, short description, and a link directly to our Knowledge Base with more information for that variable or function. Functions belonging to the Lua standard library classes such as math, coroutine, or os link directly to the official Lua documentation.",
            "title": "Code Autocompletion"
        },
        {
            "location": "/atom/#tabletop-simulator-interactivity",
            "text": "The Atom plugin can directly connect to a running instance of Tabletop Simulator to get all of the existing Lua scripts on Objects and to call Save & Play. Both functions can be called directly from the Packages menu or the right click contextual menu. TTS must be running with the game loaded for these functions to work.     Command  Action Taken      Get Lua Scripts  Downloads all existing scripts in a loaded Tabletop Simulator game with Atom. You will need to call Get Lua Scripts every time you change to a different game in TTS.    Save & Play  Saves all Lua files in Atom, uploads them to a loaded Tabletop Simulator game, and reloads the current game (same as Save & Play in the in-game editor).       \nEvery time you start up Atom, the cached local *.lua files are deleted.",
            "title": "Tabletop Simulator Interactivity"
        },
        {
            "location": "/atom/#installing-atom",
            "text": "Download and install Atom  from the official website .",
            "title": "Installing Atom"
        },
        {
            "location": "/atom/#installing-the-official-plugin",
            "text": "Click on File -> Settings  Select the Install tab in Settings  Type in tabletopsimulator-lua into the search field and press the Enter key or click the Packages button  Click the blue Install button for the tabletopsimulator-lua package",
            "title": "Installing the Official Plugin"
        },
        {
            "location": "/atom/#setting-up-atom",
            "text": "",
            "title": "Setting Up Atom"
        },
        {
            "location": "/atom/#tab-width",
            "text": "By default, Tabletop Simulator scripts use a tab width of four spaces. You are not required to adhere to this spacing. By default, Atom has a tab width of two spaces. To optionally make Atom default to a tab width of four spaces:   Click on File -> Settings  Select the Settings tab in Settings  Scroll down to Tab Length  Set the Tab Length to 4",
            "title": "Tab Width"
        },
        {
            "location": "/atom/#tabls-as-pipe-operators",
            "text": "To enable tabs showing up as pipe operators \"|\" as an indent guide:   Click on File -> Settings  Select the Settings tab in Settings  Scroll down to Show Indent Guide  Check Show Indent Guide",
            "title": "Tabls as Pipe Operators"
        },
        {
            "location": "/atom/#updating-atom-plugin",
            "text": "The plugin will automatically check for updates when Atom is started. If a new update is found, it will update itself. You will have to manually restart Atom for the new version of the plugin to be loaded. You can check Atom's console if it found an update (ctrl + alt + i).",
            "title": "Updating Atom Plugin"
        },
        {
            "location": "/atom/#atom-tips",
            "text": "These are just a few basic tips to help get the most out of Atom.   Print Messages  All print() functions automatically send their messages to Atom's console (ctrl + alt + i).    Error Messages  All Lua errors are automatically sent to Atom's console (ctrl + alt + i).    Quick Save + Play  Hitting Ctrl + Shift + S will trigger Save & Play.",
            "title": "Atom Tips"
        },
        {
            "location": "/externaleditorapi/",
            "text": "This page describes how our \nOfficial Atom Plugin\n API works so that you can write your own plugin for your text editor of choice if Atom does not suit your needs. The plugin communicates with Tabletop Simulator via two localhost TCP connections - one for each system acting as a server and the other as a client and vice versa. All communication messages are JSON.\n\n\nTabletop Simulator as the Server\n\u00b6\n\n\n\n\nTTS listens for incoming localhost TCP connections on port 39999.\n\n\n\n\nGet Lua Scripts\n\u00b6\n\n\nAtom sends a JSON message with an ID of 0.\n\n\n{\n\n    \n\"messageID\"\n:\n \n0\n\n\n}\n\n\n\n\n\nTTS sends back a JSON message with an ID of 0 and an array of the Lua Scripts.\n\n\n{\n\n    \n\"messageID\"\n:\n \n0\n,\n\n    \n\"scriptStates\"\n:\n \n[\n\n        \n{\n\n            \n\"name\"\n:\n \n\"Global\"\n,\n\n            \n\"guid\"\n:\n \n\"-1\"\n,\n\n            \n\"script\"\n:\n \n\"...\"\n\n        \n},\n\n        \n{\n\n            \n\"name\"\n:\n \n\"BlackJack Dealer's Deck\"\n,\n\n            \n\"guid\"\n:\n \n\"a0b2d5\"\n,\n\n            \n\"script\"\n:\n \n\"...\"\n\n        \n},\n\n        \n...\n\n    \n]\n\n\n}\n\n\n\n\n\nSave & Play\n\u00b6\n\n\nAtom sends a JSON message with an ID of 1 and an array of the Lua Scripts.\n\n\n{\n\n    \n\"messageID\"\n:\n \n1\n,\n\n    \n\"scriptStates\"\n:\n \n[\n\n        \n{\n\n            \n\"guid\"\n:\n \n\"-1\"\n,\n\n            \n\"script\"\n:\n \n\"...\"\n\n        \n},\n\n        \n{\n\n            \n\"guid\"\n:\n \n\"a0b2d5\"\n,\n\n            \n\"script\"\n:\n \n\"...\"\n\n        \n},\n\n        \n...\n\n    \n]\n\n\n}\n\n\n\n\n\nAtom as the Server\n\u00b6\n\n\n\n\nAtom listens for incoming localhost TCP connections on port 39998.\n\n\n\n\nPushing New Object\n\u00b6\n\n\nWhen clicking on \"Lua Editor\" in the right click contextual menu in-game for an Object that doesn't have a Lua Script yet, it will try to open a new tab in Atom for this Object before falling back to the in-game editor if Atom is not running. TTS sends a JSON message with an ID of 0 and the new Object.\n\n\n{\n\n    \n\"messageID\"\n:\n \n0\n,\n\n    \n\"scriptStates\"\n:\n \n[\n\n        \n{\n\n            \n\"name\"\n:\n \n\"Chess Pawn\"\n,\n\n            \n\"guid\"\n:\n \n\"db3f06\"\n,\n\n            \n\"script\"\n:\n \n\"\"\n\n        \n}\n\n    \n]\n\n\n}\n\n\n\n\n\nLoading a New Game\n\u00b6\n\n\nWhen loading a new game in TTS, TTS will automatically send all the Lua Scripts from the new game to Atom. TTS sends a JSON message with an ID of 1 and an array of the Lua Scripts.\n\n\n{\n\n    \n\"messageID\"\n:\n \n1\n,\n\n    \n\"scriptStates\"\n:\n \n[\n\n        \n{\n\n            \n\"name\"\n:\n \n\"Global\"\n,\n\n            \n\"guid\"\n:\n \n\"-1\"\n,\n\n            \n\"script\"\n:\n \n\"...\"\n\n        \n},\n\n        \n{\n\n            \n\"name\"\n:\n \n\"BlackJack Dealer's Deck\"\n,\n\n            \n\"guid\"\n:\n \n\"a0b2d5\"\n,\n\n            \n\"script\"\n:\n \n\"...\"\n\n        \n},\n\n        \n...\n\n    \n]\n\n\n}\n\n\n\n\n\nPrint/Debug Messages\n\u00b6\n\n\nTTS sends all print() messages to Atom to be displayed in Atom's console (ctrl + alt + i). TTS sends a JSON message with an ID of 2 and the message.\n\n\n{\n\n    \n\"messageID\"\n:\n \n2\n,\n\n    \n\"message\"\n:\n \n\"Hit player! White\"\n\n\n}\n\n\n\n\n\nError Messages\n\u00b6\n\n\nTTS sends all Lua error messages to Atom to be displayed in Atom's console \n(ctrl + alt + i)\n. TTS sends a JSON message with an ID of 3 and the error message.\n\n\n{\n\n    \n\"messageID\"\n:\n \n3\n,\n\n    \n\"error\"\n:\n \n\"chunk_0:(36,4-8): unexpected symbol near 'deck'\"\n,\n\n    \n\"guid\"\n:\n \n\"-1\"\n,\n\n    \n\"errorMessagePrefix\"\n:\n \n\"Error in Global Script: \"\n\n\n}",
            "title": "External Editor API"
        },
        {
            "location": "/externaleditorapi/#tabletop-simulator-as-the-server",
            "text": "TTS listens for incoming localhost TCP connections on port 39999.",
            "title": "Tabletop Simulator as the Server"
        },
        {
            "location": "/externaleditorapi/#get-lua-scripts",
            "text": "Atom sends a JSON message with an ID of 0.  { \n     \"messageID\" :   0  }   TTS sends back a JSON message with an ID of 0 and an array of the Lua Scripts.  { \n     \"messageID\" :   0 , \n     \"scriptStates\" :   [ \n         { \n             \"name\" :   \"Global\" , \n             \"guid\" :   \"-1\" , \n             \"script\" :   \"...\" \n         }, \n         { \n             \"name\" :   \"BlackJack Dealer's Deck\" , \n             \"guid\" :   \"a0b2d5\" , \n             \"script\" :   \"...\" \n         }, \n         ... \n     ]  }",
            "title": "Get Lua Scripts"
        },
        {
            "location": "/externaleditorapi/#save-play",
            "text": "Atom sends a JSON message with an ID of 1 and an array of the Lua Scripts.  { \n     \"messageID\" :   1 , \n     \"scriptStates\" :   [ \n         { \n             \"guid\" :   \"-1\" , \n             \"script\" :   \"...\" \n         }, \n         { \n             \"guid\" :   \"a0b2d5\" , \n             \"script\" :   \"...\" \n         }, \n         ... \n     ]  }",
            "title": "Save &amp; Play"
        },
        {
            "location": "/externaleditorapi/#atom-as-the-server",
            "text": "Atom listens for incoming localhost TCP connections on port 39998.",
            "title": "Atom as the Server"
        },
        {
            "location": "/externaleditorapi/#pushing-new-object",
            "text": "When clicking on \"Lua Editor\" in the right click contextual menu in-game for an Object that doesn't have a Lua Script yet, it will try to open a new tab in Atom for this Object before falling back to the in-game editor if Atom is not running. TTS sends a JSON message with an ID of 0 and the new Object.  { \n     \"messageID\" :   0 , \n     \"scriptStates\" :   [ \n         { \n             \"name\" :   \"Chess Pawn\" , \n             \"guid\" :   \"db3f06\" , \n             \"script\" :   \"\" \n         } \n     ]  }",
            "title": "Pushing New Object"
        },
        {
            "location": "/externaleditorapi/#loading-a-new-game",
            "text": "When loading a new game in TTS, TTS will automatically send all the Lua Scripts from the new game to Atom. TTS sends a JSON message with an ID of 1 and an array of the Lua Scripts.  { \n     \"messageID\" :   1 , \n     \"scriptStates\" :   [ \n         { \n             \"name\" :   \"Global\" , \n             \"guid\" :   \"-1\" , \n             \"script\" :   \"...\" \n         }, \n         { \n             \"name\" :   \"BlackJack Dealer's Deck\" , \n             \"guid\" :   \"a0b2d5\" , \n             \"script\" :   \"...\" \n         }, \n         ... \n     ]  }",
            "title": "Loading a New Game"
        },
        {
            "location": "/externaleditorapi/#printdebug-messages",
            "text": "TTS sends all print() messages to Atom to be displayed in Atom's console (ctrl + alt + i). TTS sends a JSON message with an ID of 2 and the message.  { \n     \"messageID\" :   2 , \n     \"message\" :   \"Hit player! White\"  }",
            "title": "Print/Debug Messages"
        },
        {
            "location": "/externaleditorapi/#error-messages",
            "text": "TTS sends all Lua error messages to Atom to be displayed in Atom's console  (ctrl + alt + i) . TTS sends a JSON message with an ID of 3 and the error message.  { \n     \"messageID\" :   3 , \n     \"error\" :   \"chunk_0:(36,4-8): unexpected symbol near 'deck'\" , \n     \"guid\" :   \"-1\" , \n     \"errorMessagePrefix\" :   \"Error in Global Script: \"  }",
            "title": "Error Messages"
        },
        {
            "location": "/luaapi/",
            "text": "In this section, you will find details on all events/classes/functions specific to Tabletop Simulator's Lua scripting. For more general information on how the scripting language of Lua works and what it does on its own, you can review the \nonline documentation\n. \n\n\n\n\nTODO:\n\n\n\n\nAdd more here on how this docu is set up\n\n\nLink to the tutorial in the top message once I input it\n\n\nInstructions on how to modify if they think changes are needed.\n\n\n\n\n\n\nTemporary paste of data\n\u00b6\n\n\nClasses\n\u00b6\n\n\nFor the purposes of Tabletop Simulator, a class is a collection of methods/functions which all share commonality. That means, for example, that anything within the Object class is for use with in-game object and that anything within the Player class is for interacting with in-game players.\n\n\nClasses\n\u00b6\n\n\n\n\nClock\n\n\nCounter\n\n\nObject\n\n\nAssetBundle\n\n\nRPGFigurine\n\n\nTextTool\n\n\n\n\nStatic Classes\n\u00b6\n\n\n\n\nJSON\n\n\nPlayer\n\n\nTimer\n\n\nWebRequest\n\n\nPhysics\n\n\nLighting",
            "title": "Introduction"
        },
        {
            "location": "/luaapi/#temporary-paste-of-data",
            "text": "",
            "title": "Temporary paste of data"
        },
        {
            "location": "/luaapi/#classes",
            "text": "For the purposes of Tabletop Simulator, a class is a collection of methods/functions which all share commonality. That means, for example, that anything within the Object class is for use with in-game object and that anything within the Player class is for interacting with in-game players.",
            "title": "Classes"
        },
        {
            "location": "/luaapi/#classes_1",
            "text": "Clock  Counter  Object  AssetBundle  RPGFigurine  TextTool",
            "title": "Classes"
        },
        {
            "location": "/luaapi/#static-classes",
            "text": "JSON  Player  Timer  WebRequest  Physics  Lighting",
            "title": "Static Classes"
        },
        {
            "location": "/event/",
            "text": "Events are functions which are activated by Tabletop Simulator when something takes place in-game. It is possible to use all of them within scripts on Objects, and most will also work in Global scripts. \n\n\nFunction Summary\n\u00b6\n\n\nDefault Events (Global & Object)\n\u00b6\n\n\nThese are functions which are triggered by an event taking place in-game. They work when within the script of an Object or the Global script.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nonChat(String message, Player)\n\n\nCalled when a chat message is sent in game chat. \n\u2047\n\n\n\n\n\n\nonExternalMessage(Table)\n\n\nCalled when an external script editor (like \nAtom\n) sends a message back to the game. Used for custom editor functionality. \n\u2047\n\n\n\n\n\n\nonFixedUpdate()\n\n\nCalled \nevery physics tick\n (90 times a second). This is a frame independent onUpdate(). \n\u2047\n\n\n\n\n\n\nonLoad(String save_state)\n\n\nCalled when a game save is finished loading every Object. It is where most setup code will go. \n\u2047\n\n\n\n\n\n\nonObjectDestroy(Object dying_object)\n\n\nCalled whenever any object is destroyed. \n\u2047\n\n\n\n\n\n\nonObjectDrop\n(string player_color, Object dropped_object)\n\n\nCalled whenever any object is dropped by a player. \n\u2047\n\n\n\n\n\n\nonObjectEnterScriptingZone\n(Object zone, Object enter_object)\n\n\nCalled when any object enters any scripting zone. \n\u2047\n\n\n\n\n\n\nonObjectLeaveScriptingZone\n(Object zone, Object enter_object)\n\n\nCalled when any object leaves any scripting zone. \n\u2047\n\n\n\n\n\n\nonObjectLeaveContainer\n(Object container, Object leave_object)\n\n\nCalled when any object leaves any container. \n\u2047\n\n\n\n\n\n\nonObjectLoopingEffect\n(Object loop_object, Int index)\n\n\nCalled whenever the looping effect of an \nAssetBundle\n is activated. \n\u2047\n\n\n\n\n\n\nonObjectPickUp\n(String player_color, Object picked_up_object)\n\n\nCalled whenever a Player picks up an Object. \n\u2047\n\n\n\n\n\n\nonObjectRandomize\n(Object randomize_object, String player_color)\n\n\nCalled when an Object is randomized. Like when shuffling a deck or shaking dice. \n\u2047\n\n\n\n\n\n\nonObjectSpawn(Object spawn_object)\n\n\nCalled when any Object is spawned/created. \n\u2047\n\n\n\n\n\n\nonObjectTriggerEffect\n(Object trigger_object, Int index)\n\n\nCalled whenever the trigger effect of an \nAssetBundle\n is activated. \n\u2047\n\n\n\n\n\n\nonPlayerChangeColor(String \nplayer_color\n)\n\n\nCalled when a player changes color or selects it for the first time. It also returns \n\"Grey\"\n if they disconnect. \n\u2047\n\n\n\n\n\n\nonPlayerTurnEnd\n(String \nplayer_color_end\n, String \nplayer_color_next\n)\n\n\nCalled at the end of a player's turn when using the in-game turn system. \n\u2047\n\n\n\n\n\n\nonPlayerTurnStart\n(String \nplayer_color_start\n, String \nplayer_color_prev\n)\n\n\nCalled at the start of a player's turn when using the in-game turn system. \n\u2047\n\n\n\n\n\n\nonSave()\n\n\nCalled whenever your game is saved. \n\u2047\n\n\n\n\n\n\nonScriptingButtonDown\n(Int index, String \nplayer_color\n)\n\n\nCalled when a scripting button (numpad by default) is pressed. The index range that is returned is 1-10. \n\u2047\n\n\n\n\n\n\nonScriptingButtonUp\n(Int index, String \nplayer_color\n)\n\n\nCalled when a scripting button (numpad by default) is released. The index range that is returned is 1-10. \n\u2047\n\n\n\n\n\n\nonUpdate()\n\n\nCalled \nevery frame\n. \n\u2047\n\n\n\n\n\n\n\n\nDefault Events (Object Only)\n\u00b6\n\n\nThese are functions which are triggered by an event taking place in-game. They only work within scripts that are on Objects, never in Global.\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nonCollisionEnter(Table collision_info)\n\n\nCalled when an Object starts colliding with the Object the function is on. \n\u2047\n\n\n\n\n\n\nonCollisionExit(Table collision_info)\n\n\nCalled when an Object stops colliding with the Object the function is on. \n\u2047\n\n\n\n\n\n\nonCollisionStay(Table collision_info)\n\n\nCalled \nevery frame\n that an Object is colliding with the Object this function is on. \n\u2047\n\n\n\n\n\n\nonDestroy()\n\n\nCalled when an Object it is on is destroyed. \n\u2047\n\n\n\n\n\n\nonDrop(String \nplayer_color\n)\n\n\nCalled when a player releases an Object after picking it up. \n\u2047\n\n\n\n\n\n\nonPickUp(String \nplayer_color\n)\n\n\nCalled when a player picks up an Object. \n\u2047\n\n\n\n\n\n\n\n\n\n\nFunction Details (Global & Object)\n\u00b6\n\n\nonChat(...)\n\u00b6\n\n\nThis function is called when a message is sent through the in-game chat. It does not trigger when global chat messages are sent. Using \nreturn\n \nfalse\n inside of this function prevents the chat message which triggered it to be supressed.\n\n\n!!!info onChat(String message, Player)\n    * \nString message\n: A String containing the chat message which triggered the function.\n    * \nPlayer\n: A reference to the Player which sent the chat message.\n\n\nfunction\n \nonChat\n(\nmessage\n,\n \nplayer\n)\n\n    \nprint\n(\nmessage\n)\n\n    \nprint\n(\nplayer\n.\ncolor\n)\n\n\nend\n\n\n\n\n\n\n\nonExternalMessage(...)\n\u00b6\n\n\nThis function is called when an external script editor (like \nAtom\n) sends a message back to the game. Used for custom editor functionality.\n\n\n\n\nonExternalMessage(Table)\n\n\n\n\nTable\n: The data returned by the external editor into the game.\n\n\n\n\n\n\nfunction\n \nonExternalMessage\n(\ndata\n)\n\n    \nprint\n(\n\"External message received\"\n)\n\n\nend\n\n\n\n\n\n\n\nonFixedUpdate()\n\u00b6\n\n\nCalled \nevery physics tick\n (90 times a second). This is a frame independent onUpdate(). \n\u2047\n\n\n\n\nWarning\n\n\nThis is a very expensive function and can easily slow/crash your game if missused. Use with caution.\n\n\n\n\nfunction\n \nonFixedUpdate\n()\n\n    \nself\n.\naddTorque\n({\n0\n,\n100\n,\n0\n},\n \n1\n)\n\n\nend\n\n\n\n\n\nonLoad(...)\n\u00b6\n\n\nThis function is called when a game save is finished loading every Object. This is where most setup code will go. The fast-forward and rewind feature will also cause this function to activate. If this function is in an Object's script and that Object is spawned, like by removing it from a container, it too will trigger onLoad().\n\n\n\n\nonLoad(String save_state)\n\n\n\n\nString save_state\n: The encoded string containing any save_state (saved) data.\n\n\nIf there is no data saved, this returns an empty String.\n\n\n\n\n\n\n\n\n\n\nfunction\n \nonLoad\n()\n\n    \nprint\n(\n\"Loading complete\"\n)\n\n\nend\n\n\n\n\n\nExample of onLoad and onSave being used to save/load data\n--Runs whenever game is saved/autosaved\n\n\nfunction\n \nonSave\n()\n\n    \nlocal\n \ndata_to_save\n \n=\n \n{\nsomeData\n=\n50\n}\n\n    \nsaved_data\n \n=\n \nJSON\n.\nencode\n(\ndata_to_save\n)\n\n    \n--saved_data = \"\" --Remove -- at start & save to clear save data\n\n    \nreturn\n \nsaved_data\n\n\nend\n\n\n\n--Runs when game is loaded\n\n\nfunction\n \nonLoad\n(\nsaved_data\n)\n\n    \n--Loads the tracking for if the game has started yet\n\n    \nif\n \nsaved_data\n \n~=\n \n\"\"\n \nthen\n\n        \nlocal\n \nloaded_data\n \n=\n \nJSON\n.\ndecode\n(\nsaved_data\n)\n\n        \nsomeData\n \n=\n \nloaded_data\n.\nsomeData\n\n    \nelse\n\n        \nsomeData\n \n=\n \n50\n\n    \nend\n\n\nend\n\n\n\n\n\n\nonObjectDestroy(...)\n\u00b6\n\n\nCalled whenever any object is destroyed. The dying Object has 1 frame left to live. This event fires immediately before the dying Object\u2019s \nonDestroy()\n but their lifetime is the same final frame.\n\n\n\n\nonObjectDestroy(Object dying_object)\n\n\n\n\nObject dying_object\n: The object that was destroyed.\n\n\n\n\n\n\nfunction\n \nonObjectDestroy\n(\ndestroyedObj\n)\n\n    \nprint\n(\ndestroyedObj\n.\ngetName\n())\n\n\nend\n\n\n\n\n\n\n\nonObjectDrop(...)\n\u00b6\n\n\nCalled whenever any object is dropped by a player.\n\n\n\n\nonObjectDrop(String player_color, Object dropped_object)\n\n\n\n\nString player_color\n: A String of the color of the player who dropped the object.\n\n\nObject dropped_object\n: The Object in game which was dropped.\n\n\n\n\n\n\nfunction\n \nonObjectDrop\n(\ncolorName\n,\n \nobj\n)\n\n    \nprint\n(\ncolorName\n \n..\n \n\" dropped \"\n \n..\n \nobj\n.\ngetName\n())\n\n\nend\n\n\n\n\n\n\n\nonObjectEnterScriptingZone(...)\n\u00b6\n\n\nCalled when any object enters any scripting zone.\n\n\n\n\nonObjectEnterScriptingZone(Object zone, Object enter_object)\n\n\n\n\nObject zone\n: The Object of the scripting zone.\n\n\nObject enter_object\n: The Object triggering the function.\n\n\n\n\n\n\nfunction\n \nonObjectEnterScriptingZone\n(\nzone\n,\n \nobj\n)\n\n    \nprint\n(\nobj\n.\ngetGUID\n())\n\n\nend\n\n\n\n\n\n\n\nonObjectLeaveScriptingZone(...)\n\u00b6\n\n\nCalled when any object leaves any scripting zone.\n\n\n\n\nonObjectLeaveScriptingZone(Object zone, Object enter_object)\n\n\n\n\nObject zone\n: The Object of the scripting zone.\n\n\nObject enter_object\n: The Object triggering the function.\n\n\n\n\n\n\nfunction\n \nonObjectLeaveScriptingZone\n(\nzone\n,\n \nobj\n)\n\n    \nprint\n(\nobj\n.\ngetGUID\n())\n\n\nend\n\n\n\n\n\n\n\nonObjectLeaveContainer(...)\n\u00b6\n\n\nCalled when any object leaves any container.\n\n\n\n\nonObjectLeaveContainer(Object container, Object leave_object)\n\n\n\n\nObject container\n: The Object reference for the container the object left.\n\n\nObject leave_object\n: The Object reference for the object that left the container.\n\n\n\n\n\n\nfunction\n \nonObjectLeaveContainer\n(\nbag\n,\n \nobj\n)\n\n    \nprint\n(\nbag\n)\n\n    \nprint\n(\nobj\n)\n\n\nend\n\n\n\n\n\n\n\nonObjectLoopingEffect(...)\n\u00b6\n\n\nCalled whenever the looping effect of an \nAssetBundle\n is activated.\n\n\n\n\nonObjectLoopingEffect(Object loop_object, Int index)\n\n\n\n\nObject loop_object\n: The Object reference to the AssetBundle which had its loop activated.\n\n\nInt index\n: The Int of the index number for the loop activated.\n\n\n\n\n\n\nfunction\n \nonObjectLoopingEffect\n(\nobj\n,\n \nindex\n)\n\n    \nprint\n(\n\"Loop \"\n \n..\n \nindex\n \n..\n \n\" activated.\"\n)\n\n\nend\n\n\n\n\n\n\n\nonObjectPickUp(...)\n\u00b6\n\n\nCalled whenever a Player picks up an Object.\n\n\n\n\nonObjectPickUp(String player_color, Object picked_up_object)\n\n\n\n\nString player_color\n: A String of the color of the player who picked up the object.\n\n\nObject picked_up_object\n: The Object in game which was picked up.\n\n\n\n\n\n\nfunction\n \nonObjectPickUp\n(\ncolorName\n,\n \nobj\n)\n\n    \nprint\n(\ncolorName\n \n..\n \n\" picked up \"\n \n..\n \nobj\n.\ngetName\n())\n\n\nend\n\n\n\n\n\n\n\nonObjectRandomize(...)\n\u00b6\n\n\nCalled when an Object is randomized. Like when shuffling a deck or shaking dice.\n\n\n\n\nonObjectRandomize(Object randomize_object, String player_color)\n\n\n\n\nObject spawn_object\n: The Object which triggered this function.\n\n\nString player_color\n: A String of the color of the player who triggered the function.\n\n\n\n\n\n\nfunction\n \nonObjectRandomize\n(\nobj\n,\n \ncolor\n)\n\n    \nprint\n(\nobj\n.\ngetName\n()\n \n..\n \n\" was randomized by \"\n \n..\n \ncolor\n)\n\n\nend\n\n\n\n\n\n\n\nonObjectSpawn(...)\n\u00b6\n\n\nCalled when any Object is spawned/created.\n\n\n\n\nonObjectSpawn(Object spawn_object)\n\n\n\n\nObject spawn_object\n: The Object which triggered this function.\n\n\n\n\n\n\nfunction\n \nonObjectSpawn\n(\nobj\n)\n\n    \nprint\n(\nobj\n)\n\n\nend\n\n\n\n\n\n\n\nonObjectTriggerEffect(...)\n\u00b6\n\n\nCalled whenever the trigger effect of an \nAssetBundle\n is activated.\n\n\n\n\nonObjectTriggerEffect(Object loop_object, Int index)\n\n\n\n\nObject loop_object\n: The Object reference to the AssetBundle which had its trigger activated.\n\n\nInt index\n: The Int of the index number for the trigger activated.\n\n\n\n\n\n\nfunction\n \nonObjectTriggerEffect\n(\nobj\n,\n \nindex\n)\n\n    \nprint\n(\n\"Loop \"\n \n..\n \nindex\n \n..\n \n\" activated.\"\n)\n\n\nend\n\n\n\n\n\n\n\nonPlayerChangeColor(...)\n\u00b6\n\n\nCalled when a player changes color or selects it for the first time. It also returns \n\"Grey\"\n if they disconnect.\n\n\n\n\nonPlayerChangeColor(String player_color)\n\n\n\n\nString player_color\n: A String of the color of the player who triggered the function.\n\n\n\n\n\n\nfunction\n \nonPlayerChangeColor\n(\ncolor\n)\n\n    \nprint\n(\ncolor\n)\n\n\nend\n\n\n\n\n\n\n\nonPlayerTurnEnd(...)\n\u00b6\n\n\nCalled at the end of a player's turn when using the in-game turn system.\n\n\n\n\nonPlayerTurnEnd(String player_color_end, String player_color_next)\n\n\n\n\nString player_color_end\n: A String of the color of the player who's turn ended.\n\n\nString player_color_next\n: A String of the color of the player who's turn is next.\n\n\n\n\n\n\nfunction\n \nonPlayerTurnEnd\n(\ncolor_end\n,\n \ncolor_next\n)\n\n    \nprint\n(\ncolor_end\n \n..\n \n\"'s turn has ended.\"\n)\n\n    \nprint\n(\ncolor_next\n \n..\n \n\"'s turn starts now.\"\n)\n\n\nend\n\n\n\n\n\n\n\nonPlayerTurnStart(...)\n\u00b6\n\n\nCalled at the end of a player's turn when using the in-game turn system.\n\n\n\n\nonPlayerTurnStart(String player_color_start, String player_color_prev)\n\n\n\n\nString player_color_start\n: A String of the color of the player who's turn is starting.\n\n\nString player_color_prev\n: A String of the color of the player who's turn just ended.\n\n\n\n\n\n\nfunction\n \nonPlayerTurnStart\n(\ncolor_start\n,\n \ncolor_prev\n)\n\n    \nprint\n(\ncolor_start\n \n..\n \n\"'s turn starts now.\"\n)\n\n    \nprint\n(\ncolor_prev\n \n..\n \n\"'s turn has ended.\"\n)\n\n\nend\n\n\n\n\n\n\n\nonSave()\n\u00b6\n\n\nCalled whenever your game is saved, either manually or by auto-save. It is used to allow information to persist through saving/loading. It allows you to place information into a table that is written into the save file. It works on Global information and can also be used to save information onto an Object.\n\n\n\n\nImportant\n\n\nWhen using \nonSave()\n, information is saved into the save file you are using. Using \nSave & Apply\n does NOT cause it to record data, only overwriting your save will update what information \nonSave()\n is trying to record.\n\n\n\n\n\n\nWarning\n\n\nYou can save almost any data in a table using this function, but Object references \nDO NOT\n persist. If you need to record an Object using \nonSave()\n, record its GUID instead.\n\n\n\n\ndata_table\n \n=\n \n{\nanswer\n=\n42\n}\n\n\n\nfunction\n \nonSave\n()\n\n    \nsaved_data\n \n=\n \nJSON\n.\nencode\n(\ndata_table\n)\n\n    \nself\n.\nscript_state\n \n=\n \nsaved_data\n\n\nend\n\n\n\n\n\nCheck the \nonLoad()\n section for how to load the information you record into your save file.\n\n\n\n\nonScriptingButtonDown(...)\n\u00b6\n\n\nCalled when a scripting button (numpad by default) is pressed. The index range that is returned is 1-10.\n\n\n\n\nonScriptingButtonDown(Int index, String player_color)\n\n\n\n\nInt index\n: An Int for the index number, representing which key was pressed.\n\n\nString player_color\n: A String of the color of the player who triggered the function.\n\n\n\n\n\n\nfunction\n \nonScriptingButtonDown\n(\nindex\n,\n \ncolor\n)\n\n    \nprint\n(\nindex\n)\n\n\nend\n\n\n\n\n\n\n\nonScriptingButtonUp(...)\n\u00b6\n\n\nCalled when a scripting button (numpad by default) is released. The index range that is returned is 1-10.\n\n\n\n\nonScriptingButtonUp(Int index, String player_color)\n\n\n\n\nInt index\n: An Int for the index number, representing which key was released.\n\n\nString player_color\n: A String of the color of the player who triggered the function.\n\n\n\n\n\n\nfunction\n \nonScriptingButtonUp\n(\nindex\n,\n \ncolor\n)\n\n    \nprint\n(\nindex\n)\n\n\nend\n\n\n\n\n\n\n\nonUpdate()\n\u00b6\n\n\nCalled \nevery frame\n.\n\n\n\n\nWarning\n\n\nThis is a very expensive function and can easily slow/crash your game if missused. Use with caution.\n\n\n\n\nfunction\n \nonUpdate\n()\n\n    \nprint\n(\n\"This will probably slow your game down.\"\n\n\nend\n\n\n\n\n\n\n\n\n\nFunction Details (Object only)\n\u00b6\n\n\nonCollisionEnter(...)\n\u00b6\n\n\nThis function is called when an Object starts colliding with the Object the function is on. Does not work in Global.\n\n\n\n\nonCollisionEnter(Table collision_info)\n\n\n\n\ntable collision_info\n: A Table containing data on colliding object.\n\n\ncollision_info.\ncollision_object\n = \nObject\n collision_object\n\n\ncollision_info.\ncontact_points\n = Table contact_points\n\n\nThis is an array (table) of tables. Each contact point is a vector.\n\n\n\n\n\n\ncollision_info.\nrelative_velocity\n = \nVector\n\n\n\n\n\n\n\n\n\n\n--Example Usage\n\n\nfunction\n \nonCollisionEnter\n(\ninfo\n)\n\n    \nprint\n(\ninfo\n.\ncollision_object\n)\n\n\nend\n\n\n\n\n--Example returned table\n\n\n{\n\n    \ncollision_object\n \n=\n \nobjectReference\n\n    \ncontact_points\n \n=\n \n{\n\n        \n{\nx\n=\n5\n,\n \ny\n=\n0\n,\n \nz\n=-\n2\n,\n \n5\n,\n \n0\n,\n \n-\n2\n},\n\n    \n}\n\n    \nrelative_velocity\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n20\n,\n \nz\n=\n0\n,\n \n0\n,\n \n20\n,\n \n0\n}\n\n\n}\n\n\n\n\n\n\nonCollisionExit(...)\n\u00b6\n\n\nThis function is called when an Object stops colliding with the Object the function is on. Does not work in Global.\n\n\n\n\nonCollisionExit(Table collision_info)\n\n\n\n\ntable collision_info\n: A Table containing data on colliding object.\n\n\ncollision_info.\ncollision_object\n = \nObject\n collision_object\n\n\ncollision_info.\ncontact_points\n = Table contact_points\n\n\nThis is an array (table) of tables. Each contact point is a vector.\n\n\n\n\n\n\ncollision_info.\nrelative_velocity\n = \nVector\n\n\n\n\n\n\n\n\n\n\n--Example Usage\n\n\nfunction\n \nonCollisionExit\n(\ninfo\n)\n\n    \nprint\n(\ninfo\n.\ncollision_object\n)\n\n\nend\n\n\n\n\n--Example returned table\n\n\n{\n\n    \ncollision_object\n \n=\n \nobjectReference\n\n    \ncontact_points\n \n=\n \n{\n\n        \n{\nx\n=\n5\n,\n \ny\n=\n0\n,\n \nz\n=-\n2\n,\n \n5\n,\n \n0\n,\n \n-\n2\n},\n\n    \n}\n\n    \nrelative_velocity\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n20\n,\n \nz\n=\n0\n,\n \n0\n,\n \n20\n,\n \n0\n}\n\n\n}\n\n\n\n\n\n\nonCollisionStay(...)\n\u00b6\n\n\nThis function is called \nevery frame\n that an Object is colliding with the Object this function is on. Does not work in Global.\n\n\n\n\nWarning\n\n\nThis is a very expensive function and can easily slow/crash your game if missused. Use with caution.\n\n\n\n\n\n\nonCollisionStay(Table collision_info)\n\n\n\n\ntable collision_info\n: A Table containing data on colliding object.\n\n\ncollision_info.\ncollision_object\n = \nObject\n collision_object\n\n\ncollision_info.\ncontact_points\n = Table contact_points\n\n\nThis is an array (table) of tables. Each contact point is a vector.\n\n\n\n\n\n\ncollision_info.\nrelative_velocity\n = \nVector\n\n\n\n\n\n\n\n\n\n\n--Example Usage\n\n\nfunction\n \nonCollisionStay\n(\ninfo\n)\n\n    \nprint\n(\ninfo\n.\ncollision_object\n)\n\n\nend\n\n\n\n\n--Example returned table\n\n\n{\n\n    \ncollision_object\n \n=\n \nobjectReference\n\n    \ncontact_points\n \n=\n \n{\n\n        \n{\nx\n=\n5\n,\n \ny\n=\n0\n,\n \nz\n=-\n2\n,\n \n5\n,\n \n0\n,\n \n-\n2\n},\n\n    \n}\n\n    \nrelative_velocity\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n20\n,\n \nz\n=\n0\n,\n \n0\n,\n \n20\n,\n \n0\n}\n\n\n}\n\n\n\n\n\n\nonDestroy()\n\u00b6\n\n\nThis function is called when an \nObject\n it is on is destroyed. When \nonDestroy()\n is called, the Object has one frame left to live but its recommended to avoid using it as a reference here. This event fires immediately after \nonObjectDestroy()\n but their lifetime is the same final frame. Does not work in Global.\n\n\nfunction\n \nonDestroy\n()\n\n    \nprint\n(\n\"This object was destroyed!\"\n)\n\n\nend\n\n\n\n\n\n\n\nonDrop(...)\n\u00b6\n\n\nThis function is called when this \nObject\n is dropped. Does not work in Global.\n\n\n\n\nonDrop(String player_color)\n\n\n\n\nString player_color\n: A String of a \nPlayer\n's color.\n\n\n\n\n\n\nfunction\n \nonDrop\n(\ncolor\n)\n\n    \nprint\n(\ncolor\n)\n\n\nend\n\n\n\n\n\n\n\nonPickUp(...)\n\u00b6\n\n\nCalled when a player picks up an Object.\n\n\n\n\nonPickUp(String player_color)\n\n\n\n\nString player_color\n: A String of a \nPlayer\n's color.\n\n\n\n\n\n\nfunction\n \nonPickUp\n(\ncolor\n)\n\n    \nprint\n(\ncolor\n)\n\n\nend",
            "title": "Event"
        },
        {
            "location": "/event/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/event/#default-events-global-object",
            "text": "These are functions which are triggered by an event taking place in-game. They work when within the script of an Object or the Global script.     Function Name  Description      onChat(String message, Player)  Called when a chat message is sent in game chat.  \u2047    onExternalMessage(Table)  Called when an external script editor (like  Atom ) sends a message back to the game. Used for custom editor functionality.  \u2047    onFixedUpdate()  Called  every physics tick  (90 times a second). This is a frame independent onUpdate().  \u2047    onLoad(String save_state)  Called when a game save is finished loading every Object. It is where most setup code will go.  \u2047    onObjectDestroy(Object dying_object)  Called whenever any object is destroyed.  \u2047    onObjectDrop (string player_color, Object dropped_object)  Called whenever any object is dropped by a player.  \u2047    onObjectEnterScriptingZone (Object zone, Object enter_object)  Called when any object enters any scripting zone.  \u2047    onObjectLeaveScriptingZone (Object zone, Object enter_object)  Called when any object leaves any scripting zone.  \u2047    onObjectLeaveContainer (Object container, Object leave_object)  Called when any object leaves any container.  \u2047    onObjectLoopingEffect (Object loop_object, Int index)  Called whenever the looping effect of an  AssetBundle  is activated.  \u2047    onObjectPickUp (String player_color, Object picked_up_object)  Called whenever a Player picks up an Object.  \u2047    onObjectRandomize (Object randomize_object, String player_color)  Called when an Object is randomized. Like when shuffling a deck or shaking dice.  \u2047    onObjectSpawn(Object spawn_object)  Called when any Object is spawned/created.  \u2047    onObjectTriggerEffect (Object trigger_object, Int index)  Called whenever the trigger effect of an  AssetBundle  is activated.  \u2047    onPlayerChangeColor(String  player_color )  Called when a player changes color or selects it for the first time. It also returns  \"Grey\"  if they disconnect.  \u2047    onPlayerTurnEnd (String  player_color_end , String  player_color_next )  Called at the end of a player's turn when using the in-game turn system.  \u2047    onPlayerTurnStart (String  player_color_start , String  player_color_prev )  Called at the start of a player's turn when using the in-game turn system.  \u2047    onSave()  Called whenever your game is saved.  \u2047    onScriptingButtonDown (Int index, String  player_color )  Called when a scripting button (numpad by default) is pressed. The index range that is returned is 1-10.  \u2047    onScriptingButtonUp (Int index, String  player_color )  Called when a scripting button (numpad by default) is released. The index range that is returned is 1-10.  \u2047    onUpdate()  Called  every frame .  \u2047",
            "title": "Default Events (Global &amp; Object)"
        },
        {
            "location": "/event/#default-events-object-only",
            "text": "These are functions which are triggered by an event taking place in-game. They only work within scripts that are on Objects, never in Global.     Function Name  Description      onCollisionEnter(Table collision_info)  Called when an Object starts colliding with the Object the function is on.  \u2047    onCollisionExit(Table collision_info)  Called when an Object stops colliding with the Object the function is on.  \u2047    onCollisionStay(Table collision_info)  Called  every frame  that an Object is colliding with the Object this function is on.  \u2047    onDestroy()  Called when an Object it is on is destroyed.  \u2047    onDrop(String  player_color )  Called when a player releases an Object after picking it up.  \u2047    onPickUp(String  player_color )  Called when a player picks up an Object.  \u2047",
            "title": "Default Events (Object Only)"
        },
        {
            "location": "/event/#function-details-global-object",
            "text": "",
            "title": "Function Details (Global &amp; Object)"
        },
        {
            "location": "/event/#onchat",
            "text": "This function is called when a message is sent through the in-game chat. It does not trigger when global chat messages are sent. Using  return   false  inside of this function prevents the chat message which triggered it to be supressed.  !!!info onChat(String message, Player)\n    *  String message : A String containing the chat message which triggered the function.\n    *  Player : A reference to the Player which sent the chat message.  function   onChat ( message ,   player ) \n     print ( message ) \n     print ( player . color )  end",
            "title": "onChat(...)"
        },
        {
            "location": "/event/#onexternalmessage",
            "text": "This function is called when an external script editor (like  Atom ) sends a message back to the game. Used for custom editor functionality.   onExternalMessage(Table)   Table : The data returned by the external editor into the game.    function   onExternalMessage ( data ) \n     print ( \"External message received\" )  end",
            "title": "onExternalMessage(...)"
        },
        {
            "location": "/event/#onfixedupdate",
            "text": "Called  every physics tick  (90 times a second). This is a frame independent onUpdate().  \u2047   Warning  This is a very expensive function and can easily slow/crash your game if missused. Use with caution.   function   onFixedUpdate () \n     self . addTorque ({ 0 , 100 , 0 },   1 )  end",
            "title": "onFixedUpdate()"
        },
        {
            "location": "/event/#onload",
            "text": "This function is called when a game save is finished loading every Object. This is where most setup code will go. The fast-forward and rewind feature will also cause this function to activate. If this function is in an Object's script and that Object is spawned, like by removing it from a container, it too will trigger onLoad().   onLoad(String save_state)   String save_state : The encoded string containing any save_state (saved) data.  If there is no data saved, this returns an empty String.      function   onLoad () \n     print ( \"Loading complete\" )  end   Example of onLoad and onSave being used to save/load data --Runs whenever game is saved/autosaved  function   onSave () \n     local   data_to_save   =   { someData = 50 } \n     saved_data   =   JSON . encode ( data_to_save ) \n     --saved_data = \"\" --Remove -- at start & save to clear save data \n     return   saved_data  end  --Runs when game is loaded  function   onLoad ( saved_data ) \n     --Loads the tracking for if the game has started yet \n     if   saved_data   ~=   \"\"   then \n         local   loaded_data   =   JSON . decode ( saved_data ) \n         someData   =   loaded_data . someData \n     else \n         someData   =   50 \n     end  end",
            "title": "onLoad(...)"
        },
        {
            "location": "/event/#onobjectdestroy",
            "text": "Called whenever any object is destroyed. The dying Object has 1 frame left to live. This event fires immediately before the dying Object\u2019s  onDestroy()  but their lifetime is the same final frame.   onObjectDestroy(Object dying_object)   Object dying_object : The object that was destroyed.    function   onObjectDestroy ( destroyedObj ) \n     print ( destroyedObj . getName ())  end",
            "title": "onObjectDestroy(...)"
        },
        {
            "location": "/event/#onobjectdrop",
            "text": "Called whenever any object is dropped by a player.   onObjectDrop(String player_color, Object dropped_object)   String player_color : A String of the color of the player who dropped the object.  Object dropped_object : The Object in game which was dropped.    function   onObjectDrop ( colorName ,   obj ) \n     print ( colorName   ..   \" dropped \"   ..   obj . getName ())  end",
            "title": "onObjectDrop(...)"
        },
        {
            "location": "/event/#onobjectenterscriptingzone",
            "text": "Called when any object enters any scripting zone.   onObjectEnterScriptingZone(Object zone, Object enter_object)   Object zone : The Object of the scripting zone.  Object enter_object : The Object triggering the function.    function   onObjectEnterScriptingZone ( zone ,   obj ) \n     print ( obj . getGUID ())  end",
            "title": "onObjectEnterScriptingZone(...)"
        },
        {
            "location": "/event/#onobjectleavescriptingzone",
            "text": "Called when any object leaves any scripting zone.   onObjectLeaveScriptingZone(Object zone, Object enter_object)   Object zone : The Object of the scripting zone.  Object enter_object : The Object triggering the function.    function   onObjectLeaveScriptingZone ( zone ,   obj ) \n     print ( obj . getGUID ())  end",
            "title": "onObjectLeaveScriptingZone(...)"
        },
        {
            "location": "/event/#onobjectleavecontainer",
            "text": "Called when any object leaves any container.   onObjectLeaveContainer(Object container, Object leave_object)   Object container : The Object reference for the container the object left.  Object leave_object : The Object reference for the object that left the container.    function   onObjectLeaveContainer ( bag ,   obj ) \n     print ( bag ) \n     print ( obj )  end",
            "title": "onObjectLeaveContainer(...)"
        },
        {
            "location": "/event/#onobjectloopingeffect",
            "text": "Called whenever the looping effect of an  AssetBundle  is activated.   onObjectLoopingEffect(Object loop_object, Int index)   Object loop_object : The Object reference to the AssetBundle which had its loop activated.  Int index : The Int of the index number for the loop activated.    function   onObjectLoopingEffect ( obj ,   index ) \n     print ( \"Loop \"   ..   index   ..   \" activated.\" )  end",
            "title": "onObjectLoopingEffect(...)"
        },
        {
            "location": "/event/#onobjectpickup",
            "text": "Called whenever a Player picks up an Object.   onObjectPickUp(String player_color, Object picked_up_object)   String player_color : A String of the color of the player who picked up the object.  Object picked_up_object : The Object in game which was picked up.    function   onObjectPickUp ( colorName ,   obj ) \n     print ( colorName   ..   \" picked up \"   ..   obj . getName ())  end",
            "title": "onObjectPickUp(...)"
        },
        {
            "location": "/event/#onobjectrandomize",
            "text": "Called when an Object is randomized. Like when shuffling a deck or shaking dice.   onObjectRandomize(Object randomize_object, String player_color)   Object spawn_object : The Object which triggered this function.  String player_color : A String of the color of the player who triggered the function.    function   onObjectRandomize ( obj ,   color ) \n     print ( obj . getName ()   ..   \" was randomized by \"   ..   color )  end",
            "title": "onObjectRandomize(...)"
        },
        {
            "location": "/event/#onobjectspawn",
            "text": "Called when any Object is spawned/created.   onObjectSpawn(Object spawn_object)   Object spawn_object : The Object which triggered this function.    function   onObjectSpawn ( obj ) \n     print ( obj )  end",
            "title": "onObjectSpawn(...)"
        },
        {
            "location": "/event/#onobjecttriggereffect",
            "text": "Called whenever the trigger effect of an  AssetBundle  is activated.   onObjectTriggerEffect(Object loop_object, Int index)   Object loop_object : The Object reference to the AssetBundle which had its trigger activated.  Int index : The Int of the index number for the trigger activated.    function   onObjectTriggerEffect ( obj ,   index ) \n     print ( \"Loop \"   ..   index   ..   \" activated.\" )  end",
            "title": "onObjectTriggerEffect(...)"
        },
        {
            "location": "/event/#onplayerchangecolor",
            "text": "Called when a player changes color or selects it for the first time. It also returns  \"Grey\"  if they disconnect.   onPlayerChangeColor(String player_color)   String player_color : A String of the color of the player who triggered the function.    function   onPlayerChangeColor ( color ) \n     print ( color )  end",
            "title": "onPlayerChangeColor(...)"
        },
        {
            "location": "/event/#onplayerturnend",
            "text": "Called at the end of a player's turn when using the in-game turn system.   onPlayerTurnEnd(String player_color_end, String player_color_next)   String player_color_end : A String of the color of the player who's turn ended.  String player_color_next : A String of the color of the player who's turn is next.    function   onPlayerTurnEnd ( color_end ,   color_next ) \n     print ( color_end   ..   \"'s turn has ended.\" ) \n     print ( color_next   ..   \"'s turn starts now.\" )  end",
            "title": "onPlayerTurnEnd(...)"
        },
        {
            "location": "/event/#onplayerturnstart",
            "text": "Called at the end of a player's turn when using the in-game turn system.   onPlayerTurnStart(String player_color_start, String player_color_prev)   String player_color_start : A String of the color of the player who's turn is starting.  String player_color_prev : A String of the color of the player who's turn just ended.    function   onPlayerTurnStart ( color_start ,   color_prev ) \n     print ( color_start   ..   \"'s turn starts now.\" ) \n     print ( color_prev   ..   \"'s turn has ended.\" )  end",
            "title": "onPlayerTurnStart(...)"
        },
        {
            "location": "/event/#onsave",
            "text": "Called whenever your game is saved, either manually or by auto-save. It is used to allow information to persist through saving/loading. It allows you to place information into a table that is written into the save file. It works on Global information and can also be used to save information onto an Object.   Important  When using  onSave() , information is saved into the save file you are using. Using  Save & Apply  does NOT cause it to record data, only overwriting your save will update what information  onSave()  is trying to record.    Warning  You can save almost any data in a table using this function, but Object references  DO NOT  persist. If you need to record an Object using  onSave() , record its GUID instead.   data_table   =   { answer = 42 }  function   onSave () \n     saved_data   =   JSON . encode ( data_table ) \n     self . script_state   =   saved_data  end   Check the  onLoad()  section for how to load the information you record into your save file.",
            "title": "onSave()"
        },
        {
            "location": "/event/#onscriptingbuttondown",
            "text": "Called when a scripting button (numpad by default) is pressed. The index range that is returned is 1-10.   onScriptingButtonDown(Int index, String player_color)   Int index : An Int for the index number, representing which key was pressed.  String player_color : A String of the color of the player who triggered the function.    function   onScriptingButtonDown ( index ,   color ) \n     print ( index )  end",
            "title": "onScriptingButtonDown(...)"
        },
        {
            "location": "/event/#onscriptingbuttonup",
            "text": "Called when a scripting button (numpad by default) is released. The index range that is returned is 1-10.   onScriptingButtonUp(Int index, String player_color)   Int index : An Int for the index number, representing which key was released.  String player_color : A String of the color of the player who triggered the function.    function   onScriptingButtonUp ( index ,   color ) \n     print ( index )  end",
            "title": "onScriptingButtonUp(...)"
        },
        {
            "location": "/event/#onupdate",
            "text": "Called  every frame .   Warning  This is a very expensive function and can easily slow/crash your game if missused. Use with caution.   function   onUpdate () \n     print ( \"This will probably slow your game down.\"  end",
            "title": "onUpdate()"
        },
        {
            "location": "/event/#function-details-object-only",
            "text": "",
            "title": "Function Details (Object only)"
        },
        {
            "location": "/event/#oncollisionenter",
            "text": "This function is called when an Object starts colliding with the Object the function is on. Does not work in Global.   onCollisionEnter(Table collision_info)   table collision_info : A Table containing data on colliding object.  collision_info. collision_object  =  Object  collision_object  collision_info. contact_points  = Table contact_points  This is an array (table) of tables. Each contact point is a vector.    collision_info. relative_velocity  =  Vector      --Example Usage  function   onCollisionEnter ( info ) \n     print ( info . collision_object )  end   --Example returned table  { \n     collision_object   =   objectReference \n     contact_points   =   { \n         { x = 5 ,   y = 0 ,   z =- 2 ,   5 ,   0 ,   - 2 }, \n     } \n     relative_velocity   =   { x = 0 ,   y = 20 ,   z = 0 ,   0 ,   20 ,   0 }  }",
            "title": "onCollisionEnter(...)"
        },
        {
            "location": "/event/#oncollisionexit",
            "text": "This function is called when an Object stops colliding with the Object the function is on. Does not work in Global.   onCollisionExit(Table collision_info)   table collision_info : A Table containing data on colliding object.  collision_info. collision_object  =  Object  collision_object  collision_info. contact_points  = Table contact_points  This is an array (table) of tables. Each contact point is a vector.    collision_info. relative_velocity  =  Vector      --Example Usage  function   onCollisionExit ( info ) \n     print ( info . collision_object )  end   --Example returned table  { \n     collision_object   =   objectReference \n     contact_points   =   { \n         { x = 5 ,   y = 0 ,   z =- 2 ,   5 ,   0 ,   - 2 }, \n     } \n     relative_velocity   =   { x = 0 ,   y = 20 ,   z = 0 ,   0 ,   20 ,   0 }  }",
            "title": "onCollisionExit(...)"
        },
        {
            "location": "/event/#oncollisionstay",
            "text": "This function is called  every frame  that an Object is colliding with the Object this function is on. Does not work in Global.   Warning  This is a very expensive function and can easily slow/crash your game if missused. Use with caution.    onCollisionStay(Table collision_info)   table collision_info : A Table containing data on colliding object.  collision_info. collision_object  =  Object  collision_object  collision_info. contact_points  = Table contact_points  This is an array (table) of tables. Each contact point is a vector.    collision_info. relative_velocity  =  Vector      --Example Usage  function   onCollisionStay ( info ) \n     print ( info . collision_object )  end   --Example returned table  { \n     collision_object   =   objectReference \n     contact_points   =   { \n         { x = 5 ,   y = 0 ,   z =- 2 ,   5 ,   0 ,   - 2 }, \n     } \n     relative_velocity   =   { x = 0 ,   y = 20 ,   z = 0 ,   0 ,   20 ,   0 }  }",
            "title": "onCollisionStay(...)"
        },
        {
            "location": "/event/#ondestroy",
            "text": "This function is called when an  Object  it is on is destroyed. When  onDestroy()  is called, the Object has one frame left to live but its recommended to avoid using it as a reference here. This event fires immediately after  onObjectDestroy()  but their lifetime is the same final frame. Does not work in Global.  function   onDestroy () \n     print ( \"This object was destroyed!\" )  end",
            "title": "onDestroy()"
        },
        {
            "location": "/event/#ondrop",
            "text": "This function is called when this  Object  is dropped. Does not work in Global.   onDrop(String player_color)   String player_color : A String of a  Player 's color.    function   onDrop ( color ) \n     print ( color )  end",
            "title": "onDrop(...)"
        },
        {
            "location": "/event/#onpickup",
            "text": "Called when a player picks up an Object.   onPickUp(String player_color)   String player_color : A String of a  Player 's color.    function   onPickUp ( color ) \n     print ( color )  end",
            "title": "onPickUp(...)"
        },
        {
            "location": "/base/",
            "text": "These are a loose collection of functions which can be used to perform a variety of actions within Tabletop Simulator. Some of them are used in almost every script.\n\n\nFunction Summary\n\u00b6\n\n\nGlobal Management Functions\n\u00b6\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naddNotebookTab(Table parameters)\n\n\nReturns Int of the index of the newly added notebook tab. \n\u2047\n\n\n\n\n\n\nbroadcastToAll(String message, Table \ncolor\n)\n\n\nReturns Bool with result of printing an on-screen message to all Players. \n\u2047\n\n\n\n\n\n\nbroadcastToColor\n(String message, String \nplayer_color\n, Table \ncolor\n)\n\n\nReturns Bool with result of printing an on-screen message to a specified Player. \n\u2047\n\n\n\n\n\n\nclearPixelPaint()\n\n\nReturns Bool with result of removing pixel paint from the instance. \n\u2047\n\n\n\n\n\n\nclearVectorPaint()\n\n\nReturns Bool with result of removing vector paint from the instance. \n\u2047\n\n\n\n\n\n\ncopy(Table object_list)\n\n\nReturns Bool of result of copying a list of Objects the clipboard. Works with \npaste(...)\n. \n\u2047\n\n\n\n\n\n\ndestroyObject(Object obj)\n\n\nReturns Bool with the result of destroying an Object. \n\u2047\n\n\n\n\n\n\neditNotebookTab(Table parameters)\n\n\nReturns Bool with the result of editing an existing Tab in the notebook. \n\u2047\n\n\n\n\n\n\nflipTable()\n\n\nReturns Bool with the result of flipping the table. \n\u2047\n\n\n\n\n\n\ngetAllObjects()\n\n\nReturns Table of all spawned \nObjects\n in the game. \n\u2047\n\n\n\n\n\n\ngetNotebookTabs()\n\n\nReturns Table of all tabs in the notebook. \n\u2047\n\n\n\n\n\n\ngetNotes()\n\n\nReturns String of the contents of the on-screen notes section. \n\u2047\n\n\n\n\n\n\ngetObjectFromGUID(String guid)\n\n\nReturns Object from GUID. Will return \nnil\n if it doesn't exist in-game. \n\u2047\n\n\n\n\n\n\ngetSeatedPlayers()\n\n\nReturns Table of the colors of seated players. \n\u2047\n\n\n\n\n\n\nlog(Var element, String tag, String label)\n\n\nReturns Bool with result of printing information to the log. (Shortcut: ~)  \n\u2047\n\n\n\n\n\n\nlogStyle(String tag, Table color,\n String prefix, String prefix, String postfix)\n\n\nReturns bool with result of setting style options for the specified tag type for the log. \n\u2047\n\n\n\n\n\n\npaste(Table parameters)\n\n\nReturns Table of newly spawned objects that were pasted from the clipboard. Works with \ncopy(...)\n. \n\u2047\n\n\n\n\n\n\nprint(String message)\n\n\nPrints a string into chat that only the host is able to see. Used for debugging scripts. \n\u2047\n\n\n\n\n\n\nprintToAll(String message, Table \ncolor\n)\n\n\nReturns Bool with the result of printing a message into the chat of all connected players. \n\u2047\n\n\n\n\n\n\nprintToColor\n(String message, String \nplayer_color\n, Table \ncolor\n)\n\n\nReturns Bool with the result of printing a message to a specific Player. \n\u2047\n\n\n\n\n\n\nremoveNotebookTab(Int index)\n\n\nReturns Bool with the result of removing a notebook tab. \n\u2047\n\n\n\n\n\n\nsendExternalMessage(Table)\n\n\nReturns Bool with the result of sending the table to your external script editor, most likely Atom. This is for custom editor functionality. \n\u2047\n\n\n\n\n\n\nsetNotes(String notes)\n\n\nReturns Bool with the result of replacing the text in the notes window with the string. \n\u2047\n\n\n\n\n\n\nspawnObject(Table parameters)\n\n\nReturns Object reference for the object spawned. View the \nSpawnable Object\n page for Objects that can be spawned. \n\u2047\n\n\n\n\n\n\nstartLuaCoroutine\n(Object function_owner, String function_name)\n\n\nReturns Bool with the result of starting a coroutine. \n\u2047\n\n\n\n\n\n\nstringColorToRGB(String player_color)\n\n\nReturns Table \nColor\n requivilent to the Player Color string. \n\u2047\n\n\n\n\n\n\n\n\n\n\nFunction Details\n\u00b6\n\n\naddNotebookTab(...)\n\u00b6\n\n\nReturns Int of the index of the newly added notebook tab. If it failed to create a new tab, a -1 is returned instead. Indexes for notebook tabs begin at 0.\n\n\n\n\naddNotebookTab(Table parameters)\n\n\n\n\nTable parameters\n: A Table containing spawning parameters.\n\n\nparameters.title\n: A String with the title for the new tab.\n\n\nparameters.body\n: A String with text to place into the body of the new tab.\n\n\nOptional, defaults to an empty string\n\n\n\n\n\n\nparameters.color\n: A String with the \nPlayer color\n for the new tab's color.\n\n\nOptional, defaults to \"Grey\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nparameters\n \n=\n \n{\n\n    \ntitle\n \n=\n \n\"New Tab\"\n,\n\n    \nbody\n \n=\n \n\"Body text example.\"\n,\n\n    \ncolor\n \n=\n \n\"Grey\"\n\n\n}\n\n\naddNotebookTab\n(\nparameters\n)\n\n\n\n\n\n\n\nbroadcastToAll(...)\n\u00b6\n\n\nReturns Bool with result of printing an on-screen message to all Players.\n\n\n\n\nbroadcastToAll(String message, Table \ncolor\n)\n\n\n\n\nString message\n: A String of the message to display on-screen.\n\n\nTable color\n: A Table containing the RGB color for the text.\n\n\n\n\n\n\nmsg\n \n=\n \n\"Hello all.\"\n\n\nrgb\n \n=\n \n{\nr\n=\n1\n,\n \ng\n=\n0\n,\n \nb\n=\n0\n}\n\n\nbroadcastToAll\n(\nmsg\n,\n \nrgb\n)\n\n\n\n\n\n\n\nbroadcastToColor(...)\n\u00b6\n\n\nReturns Bool with result of printing an on-screen message to a specified Player.\n\n\n\n\nbroadcastToColor(String message, String \nplayer_color\n, Table \ncolor\n)\n\n\n\n\nString message\n: A String of the message to display on-screen.\n\n\nString player_color\n: A String of the color of the Player who will receive the message.\n\n\nTable color\n: A Table containing the RGB color for the text.\n\n\n\n\n\n\nmsg\n \n=\n \n\"Hello White.\"\n\n\ncolor\n \n=\n \n\"White\"\n\n\nrgb\n \n=\n \n{\nr\n=\n1\n,\n \ng\n=\n0\n,\n \nb\n=\n0\n}\n\n\nbroadcastToColor\n(\nmsg\n,\n \ncolor\n,\n \nrgb\n)\n\n\n\n\n\n\n\nclearPixelPaint()\n\u00b6\n\n\nReturns Bool with result of removing pixel paint from the instance.\n\n\nclearPixelPaint\n()\n\n\n\n\n\n\n\nclearVectorPaint()\n\u00b6\n\n\nReturns Bool with result of removing vector paint from the instance.\n\n\nclearPixelPaint\n()\n\n\n\n\n\n\n\ncopy(...)\n\u00b6\n\n\nReturns Bool of result of copying a list of Objects the clipboard. Works with \npaste(...)\n.\n\n\n\n\ncopy(Table object_list)\n\n\n\n\nTable object_list\n: A Table of in-game objects to be copied.\n\n\nThis is similar to highlighting the objects in-game and copying them.\n\n\n\n\n\n\n\n\n\n\nobject_list\n \n=\n \n{\n\n    \ngetObjectFromGUID\n(\n\"######\"\n),\n\n    \ngetObjectFromGUID\n(\n\"######\"\n),\n\n\n}\n\n\ncopy\n(\nobject_list\n)\n\n\n\n\n\n\n\ndestroyObject(...)\n\u00b6\n\n\nReturns Bool with the result of destroying an Object.\n\n\n\n\ndestroyObject(Object obj)\n\n\n\n\nObject obj\n: The Object you wish to delete from the instance.\n\n\n\n\n\n\nobj\n \n=\n \ngetObjectFromGUID\n(\n\"######\"\n)\n\n\ndestroyObject\n(\nobj\n)\n\n\n\n\n\n\n\neditNotebookTab(...)\n\u00b6\n\n\nReturns Bool with the result of editing an existing Tab in the notebook. Indexes for notebook tabs begin at 0.\n\n\n\n\neditNotebookTab(Table parameters)\n\n\n\n\nTable parameters\n: A Table containing instructions for the notebook edit.\n\n\nparameters.index\n: An Int of the index number for the tab.\n\n\nparameters.title\n: A String of the title for the tab.\n\n\nOptional, defaults to the current title of the tab begin edited.\n\n\n\n\n\n\nparameters.body\n: A String of the body for the tab.\n\n\nOptional, defaults to the current body of the tab begin edited.\n\n\n\n\n\n\nparameters.color\n: A String of the Player color for who the tab belongs to.\n\n\nOptional, defaults to the current color of the tab begin edited.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nparams\n \n=\n \n{\n\n    \nindex\n \n=\n \n5\n,\n\n    \ntitle\n \n=\n \n\"Edited Title\"\n,\n\n    \nbody\n \n=\n \n\"This tab was edited via script.\"\n,\n\n    \ncolor\n \n=\n \n\"Grey\"\n\n\n}\n\n\neditNotebookTab\n(\nparams\n)\n\n\n\n\n\n\n\nflipTable()\n\u00b6\n\n\nReturns Bool with the result of flipping the table.\n\n\nflipTable\n()\n\n\n\n\n\n\n\ngetAllObjects()\n\u00b6\n\n\nReturns Table of all spawned \nObjects\n in the game.\n\n\n--Example Usage\n\n\nobjList\n \n=\n \ngetAllObjects\n()\n\n\nfor\n \n_\n,\n \nobj\n \nin\n \nipairs\n(\nobjList\n)\n \ndo\n\n    \nprint\n(\nobj\n.\ngetName\n())\n\n\nend\n\n\n\n\n--Example Returned Table\n\n\nobjList\n \n=\n \n{\nobject\n,\n \nobject\n,\n \nobject\n}\n\n\n\n\n\n\ngetNotebookTabs()\n\u00b6\n\n\nReturns Table of all tabs in the notebook. Indexes for notebook tabs begin at 0.\n\n\n--Example Usage\n\n\ntabInfo\n \n=\n \ngetNotebookTabs\n()\n\n\n\n\n--Example Returned Table\n\n\n{\n\n    \n{\nindex\n=\n0\n,\n \ntitle\n=\n\"\"\n,\n \nbody\n=\n\"\"\n,\n \ncolor\n=\n\"Grey\"\n},\n\n    \n{\nindex\n=\n1\n,\n \ntitle\n=\n\"\"\n,\n \nbody\n=\n\"\"\n,\n \ncolor\n=\n\"Grey\"\n},\n\n    \n{\nindex\n=\n2\n,\n \ntitle\n=\n\"\"\n,\n \nbody\n=\n\"\"\n,\n \ncolor\n=\n\"Grey\"\n},\n\n\n}\n\n\n\n\n\n\ngetNotes()\n\u00b6\n\n\nReturns String of the contents of the on-screen notes section.\n\n\nprint\n(\ngetNotes\n())\n\n\n\n\n\n\n\ngetObjectFromGUID(...)\n\u00b6\n\n\nReturns Object from GUID. Will return \nnil\n if it doesn't exist in-game.!!\n\n\n\n\ngetObjectFromGUID(String guid)\n\n\n\n\nString guid\n: A String of the 6 character GUID of an object.\n\n\nGUID can be obtained by right clicking an object and going to Scripting.\n\n\nIn a script, it can be obtained from any Object by using .getGUID().\n\n\n\n\n\n\n\n\n\n\nobj\n \n=\n \ngetObjectFromGUID\n(\n\"555555\"\n)\n\n\n\n\n\n\n\ngetSeatedPlayers()\n\u00b6\n\n\nReturns Table of the colors of seated players.\n\n\n\n\nTip\n\n\n\n\nSpectators (\"Grey\") are not returned.\n\n\nDM seat (\"Black\") is not returned.\n\n\nThe order colors are returned in the table are in the same order as players joining the server.\n\n\n\n\n\n\n--Example Usage\n\n\nfor\n \n_\n,\n \nv\n \nin\n \nipairs\n(\ngetSeatedPlayers\n())\n \ndo\n\n    \nprint\n(\nv\n)\n\n\nend\n\n\n\n\n--Example Returned Table\n\n\n{\n\"White\"\n,\n \n\"Red\"\n,\n \n\"Green\"\n}\n\n\n\n\n\n\nlog(...)\n\u00b6\n\n\nReturns Bool with result of printing information to the log. The log is a separate chat window which is visible to all players in the instance. It also automatically prints all data in a table if you input it as the Var.\n\n\n\n\nlog(Var element, String tag, String label)\n\n\n\n\nVar element\n: The information you want placed into the log.\n\n\nString tag\n: A String of text usable to group log messages by type. (See: \nlogStyle\n)\n\n\nOptional, defaults to an empty String. Empty Strings are not displayed.\n\n\n\n\n\n\nString label\n: A String of text to be placed before the Var element is printed to the log.\n\n\nOptional, defaults to an empty String. Empty Strings are not displayed.\n\n\n\n\n\n\n\n\n\n\nlog\n(\ngetAllObjects\n(),\n \n\"table\"\n,\n \n\"All Objects:\"\n)\n\n\n\n\n\n\n\nlogStyle(...)\n\u00b6\n\n\nReturns bool with result of setting style options for the specified tag type for the log. This can also be set in the system console with the \"log_style_tag\" command.\n\n\n\n\nlogStyle(String tag, Table color, String prefix, String prefix, String postfix)\n\n\n\n\nString tag_name\n: A String of the log's tag.\n\n\nTable Color\n: A Table of the RGB value of the text color.\n\n\nString color will also work. Example: \"Red\"\n\n\n\n\n\n\nString prefix\n: A String of text to place before the log entry of this tag type.\n\n\nOptional, defaults to an empty String. Empty Strings are not displayed.\n\n\n\n\n\n\nString postfix\n: A String of text to place after the log entry of this tag type.\n\n\nOptional, defaults to an empty String. Empty Strings are not displayed.\n\n\n\n\n\n\n\n\n\n\nfunction\n \nonLoad\n()\n\n    \nlogStyle\n(\n\"players\"\n,\n \n{\n0.5\n,\n0.5\n,\n0.5\n},\n \n\"\"\n,\n \n\"End List\"\n)\n\n    \nlog\n(\ngetSeatedPlayers\n(),\n \n\"players\"\n)\n\n\nend\n\n\n\n\n\n\n\npaste(...)\n\u00b6\n\n\nReturns Table of newly spawned objects that were pasted from the clipboard. Works with \ncopy(...)\n.\n\n\n\n\npaste(Table parameters)\n\n\n\n\nTable parameters\n: A Table containing instructions for the notebook edit.\n\n\nparameters.position\n: A Table containing the position Vector of the first object to paste.\n\n\nOptional, defaults to {0, 3, 0}.\n\n\n\n\n\n\nparameters.snap_to_grid\n: A Bool which determines if snap-to-grid is active on the spawned item.\n\n\nOptional, defaults to false (off).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nparams\n \n=\n \n{\nposition\n \n=\n \n{\n5\n,\n5\n,\n0\n},\n \nsnap_to_grid\n \n=\n \ntrue\n}\n\n\npaste\n(\nparams\n)\n\n\n\n\n\n\n\nprint(...)\n\u00b6\n\n\nPrints a string into chat that only the host is able to see. Used for debugging scripts.\n\n\n\n\nprint(String message)\n\n\n\n\nString message\n: The String to be printed to chat.\n\n\n\n\n\n\nfunction\n \nonLoad\n()\n \nprint\n(\n\"Loading Complete\"\n)\n \nend\n\n\n\n\n\n\n\nprintToAll(...)\n\u00b6\n\n\nReturns Bool with the result of printing a message into the chat of all connected players.\n\n\n\n\nprintToAll(String message, Table \ncolor\n)\n\n\n\n\nString message\n: A String of the message to place into players chats.\n\n\nTable color\n: A Table containing r/g/b values for the text's color.\n\n\n\n\n\n\nprintToAll\n(\n\"Hello World!\"\n,\n \n{\nr\n=\n1\n,\ng\n=\n0\n,\nb\n=\n0\n})\n\n\n\n\n\n\n\nprintToColor(...)\n\u00b6\n\n\nReturns Bool with the result of printing a message to a specific Player.\n\n\n```info \"printToColor(String message, String \nplayer_color\n, Table \ncolor\n)\"\n    * \nString message\n: A String of the message to place into the player's chat.\n    * \nStraing player_color\n: A String of the Player's color that will receive the message.\n    * \nTable color\n: A Table containing r/g/b values for the text's color.\n\n\nprintToColor\n(\n\"Hello Red.\"\n,\n \n\"Red\"\n,\n \n{\nr\n=\n1\n,\ng\n=\n0\n,\nb\n=\n0\n})\n\n\n\n\n\n\n\nremoveNotebookTab(...)\n\u00b6\n\n\nReturns Bool with the result of removing a notebook tab. Notebook tab indexes begin at 0.\n\n\n\n\nremoveNotebookTab(Int index)\n\n\n\n\nInt index\n: The Int of the index for the tab to remove.\n\n\n\n\n\n\nremoveNotebookTab\n(\n0\n)\n\n\n\n\n\n\n\nsendExternalMessage(...)\n\u00b6\n\n\nReturns Bool with the result of sending the table to your external script editor, most likely Atom. This is for custom editor functionality.\n\n\n\n\nsetNotes(...)\n\u00b6\n\n\nReturns Bool with the result of replacing the text in the notes window with the string.\n\n\n\n\nsetNotes(String notes)\n\n\n\n\nString notes\n: A String which will replace the contents of the notes area.\n\n\n\n\n\n\nsetNotes\n(\n\"This appears in the notes section\"\n)\n\n\n\n\n\n\n\nspawnObject(...)\n\u00b6\n\n\nReturns Object reference for the object spawned. View the \nSpawnable Object\n page for Objects that can be spawned.\n\n\n\n\nTip\n\n\nSpawned Objects take a moment to be physically spawned into the game. The purpose of the callback functionality is to allow you to run additional actions after the Object has been initiated fully into the instance. It is also possible to add a delay using a \ncoroutine\n.\n\n\n\n\n\n\nspawnObject(Table parameters)\n\n\n\n\nTable parameters\n: A Table of parameters used to determine how spawnObject will act.\n\n\nparameters.type\n: A String of the \nSpawnable Object\n type.\n\n\nparameters.position\n: A Table Vector of the position to place Object.\n\n\nOptional, defaults to {x=0, y=3, z=0}.\n\n\n\n\n\n\nparameters.rotation\n: A Table Vector of the rotation of the Object.\n\n\nOptional, defaults to {x=0, y=0, z=0}\n\n\n\n\n\n\nparameters.scale\n: A Table Vector of the scale of the Object.\n\n\nOptional, defaults to {x=1, y=1, z=1}\n\n\n\n\n\n\nparameters.sound\n: A Bool for if the spawned Object noise is played.\n\n\nOptional, defaults to true.\n\n\n\n\n\n\nparameters.snap_to_grid\n: A Bool for snap-to-grid is active on the Object.\n\n\nOptional, defaults to false.\n\n\n\n\n\n\nparameters.callback\n: A String of the function name you want activated once the Object is initiated.\n\n\nOptional, no callback is triggered without it.\n\n\n\n\n\n\nparameters.callback_owner\n: An Object of what object has the callback function on it. Global is a valid target as well.\n\n\nOptional, defaults to Global. Serves no purpose if callback is not also used.\n\n\n\n\n\n\nparameters.params\n: A Table of data to send to the callback to use as parameters. See example.\n\n\nOptional, default is to not be used.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction\n \nonLoad\n()\n\n    \nfutureName\n \n=\n \n\"Spawned By Script!\"\n\n    \nspawnParams\n \n=\n \n{\n\n        \ntype\n \n=\n \n\"rpg_BEAR\"\n,\n\n        \nposition\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n3\n,\n \nz\n=-\n5\n},\n\n        \nrotation\n \n=\n \n{\nx\n=\n0\n,\n \ny\n=\n90\n,\n \nz\n=\n0\n},\n\n        \nscale\n \n=\n \n{\nx\n=\n2\n,\n \ny\n=\n2\n,\n \nz\n=\n2\n},\n\n        \nsound\n \n=\n \nfalse\n,\n\n        \nsnap_to_grid\n \n=\n \ntrue\n,\n\n        \ncallback\n \n=\n \n\"spawn_callback\"\n,\n\n        \ncallback_owner\n \n=\n \nGlobal\n,\n\n        \nparams\n \n=\n \n{\nname\n \n=\n \nfutureName\n}\n\n    \n}\n\n    \nspawnObject\n(\nspawnParams\n)\n\n\nend\n\n\n\nfunction\n \nspawn_callback\n(\nobject_spawned\n,\n \nparams\n)\n\n    \nobject_spawned\n.\nsetName\n(\nparams\n.\nname\n)\n\n\nend\n\n\n\n\n\n\n\nstartLuaCoroutine(...)\n\u00b6\n\n\nReturns Bool with the result of starting a coroutine. A coroutine is similar to a function, but has the unique ability to have its run paused until the next frame of the game using \ncoroutine.yield(0)\n.\n\n\n\n\nAttention\n\n\nYou MUST return a 1 at the end of any coroutine or it will throw an error.\n\n\n\n\n\n\nstartLuaCoroutine(Object function_owner, String function_name)\n\n\n\n\nObject function_owner\n: The Object that the function being called is on. Global is a valid target.\n\n\nString function_name\n: The String containing the name of the function being called as a coroutine.\n\n\n\n\n\n\nfunction\n \nonLoad\n()\n\n    \nstartLuaCoroutine\n(\nGlobal\n,\n \n\"print_coroutine\"\n)\n\n\nend\n\n\n\n--Prints a message, waits 250 frames, prints another message\n\n\nfunction\n \nprint_coroutine\n()\n\n    \nprint\n(\n\"Routine has Started\"\n)\n\n    \ncount\n \n=\n \n0\n\n    \nwhile\n \ncount\n \n<\n \n250\n \ndo\n\n        \ncount\n \n=\n \ncount\n \n+\n \n1\n\n        \ncoroutine.yield\n(\n0\n)\n\n    \nend\n\n\n    \nprint\n(\n\"Routine has Finished\"\n)\n\n\n    \nreturn\n \n1\n\n\nend\n\n\n\n\n\n\n\nstringColorToRGB(...)\n\u00b6\n\n\nReturns Table \nColor\n requivilent to the Player Color string.\n\n\n\n\nstringColorToRGB(String player_color)\n\n\n\n\nString player_color\n A String of a Player \nColor\n.\n\n\n\n\n\n\nprintToAll\n(\n\"Blue message\"\n,\n \nstringColorToRGB\n(\n\"Blue\"\n))",
            "title": "Base"
        },
        {
            "location": "/base/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/base/#global-management-functions",
            "text": "Function Name  Description      addNotebookTab(Table parameters)  Returns Int of the index of the newly added notebook tab.  \u2047    broadcastToAll(String message, Table  color )  Returns Bool with result of printing an on-screen message to all Players.  \u2047    broadcastToColor (String message, String  player_color , Table  color )  Returns Bool with result of printing an on-screen message to a specified Player.  \u2047    clearPixelPaint()  Returns Bool with result of removing pixel paint from the instance.  \u2047    clearVectorPaint()  Returns Bool with result of removing vector paint from the instance.  \u2047    copy(Table object_list)  Returns Bool of result of copying a list of Objects the clipboard. Works with  paste(...) .  \u2047    destroyObject(Object obj)  Returns Bool with the result of destroying an Object.  \u2047    editNotebookTab(Table parameters)  Returns Bool with the result of editing an existing Tab in the notebook.  \u2047    flipTable()  Returns Bool with the result of flipping the table.  \u2047    getAllObjects()  Returns Table of all spawned  Objects  in the game.  \u2047    getNotebookTabs()  Returns Table of all tabs in the notebook.  \u2047    getNotes()  Returns String of the contents of the on-screen notes section.  \u2047    getObjectFromGUID(String guid)  Returns Object from GUID. Will return  nil  if it doesn't exist in-game.  \u2047    getSeatedPlayers()  Returns Table of the colors of seated players.  \u2047    log(Var element, String tag, String label)  Returns Bool with result of printing information to the log. (Shortcut: ~)   \u2047    logStyle(String tag, Table color,  String prefix, String prefix, String postfix)  Returns bool with result of setting style options for the specified tag type for the log.  \u2047    paste(Table parameters)  Returns Table of newly spawned objects that were pasted from the clipboard. Works with  copy(...) .  \u2047    print(String message)  Prints a string into chat that only the host is able to see. Used for debugging scripts.  \u2047    printToAll(String message, Table  color )  Returns Bool with the result of printing a message into the chat of all connected players.  \u2047    printToColor (String message, String  player_color , Table  color )  Returns Bool with the result of printing a message to a specific Player.  \u2047    removeNotebookTab(Int index)  Returns Bool with the result of removing a notebook tab.  \u2047    sendExternalMessage(Table)  Returns Bool with the result of sending the table to your external script editor, most likely Atom. This is for custom editor functionality.  \u2047    setNotes(String notes)  Returns Bool with the result of replacing the text in the notes window with the string.  \u2047    spawnObject(Table parameters)  Returns Object reference for the object spawned. View the  Spawnable Object  page for Objects that can be spawned.  \u2047    startLuaCoroutine (Object function_owner, String function_name)  Returns Bool with the result of starting a coroutine.  \u2047    stringColorToRGB(String player_color)  Returns Table  Color  requivilent to the Player Color string.  \u2047",
            "title": "Global Management Functions"
        },
        {
            "location": "/base/#function-details",
            "text": "",
            "title": "Function Details"
        },
        {
            "location": "/base/#addnotebooktab",
            "text": "Returns Int of the index of the newly added notebook tab. If it failed to create a new tab, a -1 is returned instead. Indexes for notebook tabs begin at 0.   addNotebookTab(Table parameters)   Table parameters : A Table containing spawning parameters.  parameters.title : A String with the title for the new tab.  parameters.body : A String with text to place into the body of the new tab.  Optional, defaults to an empty string    parameters.color : A String with the  Player color  for the new tab's color.  Optional, defaults to \"Grey\"        parameters   =   { \n     title   =   \"New Tab\" , \n     body   =   \"Body text example.\" , \n     color   =   \"Grey\"  }  addNotebookTab ( parameters )",
            "title": "addNotebookTab(...)"
        },
        {
            "location": "/base/#broadcasttoall",
            "text": "Returns Bool with result of printing an on-screen message to all Players.   broadcastToAll(String message, Table  color )   String message : A String of the message to display on-screen.  Table color : A Table containing the RGB color for the text.    msg   =   \"Hello all.\"  rgb   =   { r = 1 ,   g = 0 ,   b = 0 }  broadcastToAll ( msg ,   rgb )",
            "title": "broadcastToAll(...)"
        },
        {
            "location": "/base/#broadcasttocolor",
            "text": "Returns Bool with result of printing an on-screen message to a specified Player.   broadcastToColor(String message, String  player_color , Table  color )   String message : A String of the message to display on-screen.  String player_color : A String of the color of the Player who will receive the message.  Table color : A Table containing the RGB color for the text.    msg   =   \"Hello White.\"  color   =   \"White\"  rgb   =   { r = 1 ,   g = 0 ,   b = 0 }  broadcastToColor ( msg ,   color ,   rgb )",
            "title": "broadcastToColor(...)"
        },
        {
            "location": "/base/#clearpixelpaint",
            "text": "Returns Bool with result of removing pixel paint from the instance.  clearPixelPaint ()",
            "title": "clearPixelPaint()"
        },
        {
            "location": "/base/#clearvectorpaint",
            "text": "Returns Bool with result of removing vector paint from the instance.  clearPixelPaint ()",
            "title": "clearVectorPaint()"
        },
        {
            "location": "/base/#copy",
            "text": "Returns Bool of result of copying a list of Objects the clipboard. Works with  paste(...) .   copy(Table object_list)   Table object_list : A Table of in-game objects to be copied.  This is similar to highlighting the objects in-game and copying them.      object_list   =   { \n     getObjectFromGUID ( \"######\" ), \n     getObjectFromGUID ( \"######\" ),  }  copy ( object_list )",
            "title": "copy(...)"
        },
        {
            "location": "/base/#destroyobject",
            "text": "Returns Bool with the result of destroying an Object.   destroyObject(Object obj)   Object obj : The Object you wish to delete from the instance.    obj   =   getObjectFromGUID ( \"######\" )  destroyObject ( obj )",
            "title": "destroyObject(...)"
        },
        {
            "location": "/base/#editnotebooktab",
            "text": "Returns Bool with the result of editing an existing Tab in the notebook. Indexes for notebook tabs begin at 0.   editNotebookTab(Table parameters)   Table parameters : A Table containing instructions for the notebook edit.  parameters.index : An Int of the index number for the tab.  parameters.title : A String of the title for the tab.  Optional, defaults to the current title of the tab begin edited.    parameters.body : A String of the body for the tab.  Optional, defaults to the current body of the tab begin edited.    parameters.color : A String of the Player color for who the tab belongs to.  Optional, defaults to the current color of the tab begin edited.        params   =   { \n     index   =   5 , \n     title   =   \"Edited Title\" , \n     body   =   \"This tab was edited via script.\" , \n     color   =   \"Grey\"  }  editNotebookTab ( params )",
            "title": "editNotebookTab(...)"
        },
        {
            "location": "/base/#fliptable",
            "text": "Returns Bool with the result of flipping the table.  flipTable ()",
            "title": "flipTable()"
        },
        {
            "location": "/base/#getallobjects",
            "text": "Returns Table of all spawned  Objects  in the game.  --Example Usage  objList   =   getAllObjects ()  for   _ ,   obj   in   ipairs ( objList )   do \n     print ( obj . getName ())  end   --Example Returned Table  objList   =   { object ,   object ,   object }",
            "title": "getAllObjects()"
        },
        {
            "location": "/base/#getnotebooktabs",
            "text": "Returns Table of all tabs in the notebook. Indexes for notebook tabs begin at 0.  --Example Usage  tabInfo   =   getNotebookTabs ()   --Example Returned Table  { \n     { index = 0 ,   title = \"\" ,   body = \"\" ,   color = \"Grey\" }, \n     { index = 1 ,   title = \"\" ,   body = \"\" ,   color = \"Grey\" }, \n     { index = 2 ,   title = \"\" ,   body = \"\" ,   color = \"Grey\" },  }",
            "title": "getNotebookTabs()"
        },
        {
            "location": "/base/#getnotes",
            "text": "Returns String of the contents of the on-screen notes section.  print ( getNotes ())",
            "title": "getNotes()"
        },
        {
            "location": "/base/#getobjectfromguid",
            "text": "Returns Object from GUID. Will return  nil  if it doesn't exist in-game.!!   getObjectFromGUID(String guid)   String guid : A String of the 6 character GUID of an object.  GUID can be obtained by right clicking an object and going to Scripting.  In a script, it can be obtained from any Object by using .getGUID().      obj   =   getObjectFromGUID ( \"555555\" )",
            "title": "getObjectFromGUID(...)"
        },
        {
            "location": "/base/#getseatedplayers",
            "text": "Returns Table of the colors of seated players.   Tip   Spectators (\"Grey\") are not returned.  DM seat (\"Black\") is not returned.  The order colors are returned in the table are in the same order as players joining the server.    --Example Usage  for   _ ,   v   in   ipairs ( getSeatedPlayers ())   do \n     print ( v )  end   --Example Returned Table  { \"White\" ,   \"Red\" ,   \"Green\" }",
            "title": "getSeatedPlayers()"
        },
        {
            "location": "/base/#log",
            "text": "Returns Bool with result of printing information to the log. The log is a separate chat window which is visible to all players in the instance. It also automatically prints all data in a table if you input it as the Var.   log(Var element, String tag, String label)   Var element : The information you want placed into the log.  String tag : A String of text usable to group log messages by type. (See:  logStyle )  Optional, defaults to an empty String. Empty Strings are not displayed.    String label : A String of text to be placed before the Var element is printed to the log.  Optional, defaults to an empty String. Empty Strings are not displayed.      log ( getAllObjects (),   \"table\" ,   \"All Objects:\" )",
            "title": "log(...)"
        },
        {
            "location": "/base/#logstyle",
            "text": "Returns bool with result of setting style options for the specified tag type for the log. This can also be set in the system console with the \"log_style_tag\" command.   logStyle(String tag, Table color, String prefix, String prefix, String postfix)   String tag_name : A String of the log's tag.  Table Color : A Table of the RGB value of the text color.  String color will also work. Example: \"Red\"    String prefix : A String of text to place before the log entry of this tag type.  Optional, defaults to an empty String. Empty Strings are not displayed.    String postfix : A String of text to place after the log entry of this tag type.  Optional, defaults to an empty String. Empty Strings are not displayed.      function   onLoad () \n     logStyle ( \"players\" ,   { 0.5 , 0.5 , 0.5 },   \"\" ,   \"End List\" ) \n     log ( getSeatedPlayers (),   \"players\" )  end",
            "title": "logStyle(...)"
        },
        {
            "location": "/base/#paste",
            "text": "Returns Table of newly spawned objects that were pasted from the clipboard. Works with  copy(...) .   paste(Table parameters)   Table parameters : A Table containing instructions for the notebook edit.  parameters.position : A Table containing the position Vector of the first object to paste.  Optional, defaults to {0, 3, 0}.    parameters.snap_to_grid : A Bool which determines if snap-to-grid is active on the spawned item.  Optional, defaults to false (off).        params   =   { position   =   { 5 , 5 , 0 },   snap_to_grid   =   true }  paste ( params )",
            "title": "paste(...)"
        },
        {
            "location": "/base/#print",
            "text": "Prints a string into chat that only the host is able to see. Used for debugging scripts.   print(String message)   String message : The String to be printed to chat.    function   onLoad ()   print ( \"Loading Complete\" )   end",
            "title": "print(...)"
        },
        {
            "location": "/base/#printtoall",
            "text": "Returns Bool with the result of printing a message into the chat of all connected players.   printToAll(String message, Table  color )   String message : A String of the message to place into players chats.  Table color : A Table containing r/g/b values for the text's color.    printToAll ( \"Hello World!\" ,   { r = 1 , g = 0 , b = 0 })",
            "title": "printToAll(...)"
        },
        {
            "location": "/base/#printtocolor",
            "text": "Returns Bool with the result of printing a message to a specific Player.  ```info \"printToColor(String message, String  player_color , Table  color )\"\n    *  String message : A String of the message to place into the player's chat.\n    *  Straing player_color : A String of the Player's color that will receive the message.\n    *  Table color : A Table containing r/g/b values for the text's color.  printToColor ( \"Hello Red.\" ,   \"Red\" ,   { r = 1 , g = 0 , b = 0 })",
            "title": "printToColor(...)"
        },
        {
            "location": "/base/#removenotebooktab",
            "text": "Returns Bool with the result of removing a notebook tab. Notebook tab indexes begin at 0.   removeNotebookTab(Int index)   Int index : The Int of the index for the tab to remove.    removeNotebookTab ( 0 )",
            "title": "removeNotebookTab(...)"
        },
        {
            "location": "/base/#sendexternalmessage",
            "text": "Returns Bool with the result of sending the table to your external script editor, most likely Atom. This is for custom editor functionality.",
            "title": "sendExternalMessage(...)"
        },
        {
            "location": "/base/#setnotes",
            "text": "Returns Bool with the result of replacing the text in the notes window with the string.   setNotes(String notes)   String notes : A String which will replace the contents of the notes area.    setNotes ( \"This appears in the notes section\" )",
            "title": "setNotes(...)"
        },
        {
            "location": "/base/#spawnobject",
            "text": "Returns Object reference for the object spawned. View the  Spawnable Object  page for Objects that can be spawned.   Tip  Spawned Objects take a moment to be physically spawned into the game. The purpose of the callback functionality is to allow you to run additional actions after the Object has been initiated fully into the instance. It is also possible to add a delay using a  coroutine .    spawnObject(Table parameters)   Table parameters : A Table of parameters used to determine how spawnObject will act.  parameters.type : A String of the  Spawnable Object  type.  parameters.position : A Table Vector of the position to place Object.  Optional, defaults to {x=0, y=3, z=0}.    parameters.rotation : A Table Vector of the rotation of the Object.  Optional, defaults to {x=0, y=0, z=0}    parameters.scale : A Table Vector of the scale of the Object.  Optional, defaults to {x=1, y=1, z=1}    parameters.sound : A Bool for if the spawned Object noise is played.  Optional, defaults to true.    parameters.snap_to_grid : A Bool for snap-to-grid is active on the Object.  Optional, defaults to false.    parameters.callback : A String of the function name you want activated once the Object is initiated.  Optional, no callback is triggered without it.    parameters.callback_owner : An Object of what object has the callback function on it. Global is a valid target as well.  Optional, defaults to Global. Serves no purpose if callback is not also used.    parameters.params : A Table of data to send to the callback to use as parameters. See example.  Optional, default is to not be used.        function   onLoad () \n     futureName   =   \"Spawned By Script!\" \n     spawnParams   =   { \n         type   =   \"rpg_BEAR\" , \n         position   =   { x = 0 ,   y = 3 ,   z =- 5 }, \n         rotation   =   { x = 0 ,   y = 90 ,   z = 0 }, \n         scale   =   { x = 2 ,   y = 2 ,   z = 2 }, \n         sound   =   false , \n         snap_to_grid   =   true , \n         callback   =   \"spawn_callback\" , \n         callback_owner   =   Global , \n         params   =   { name   =   futureName } \n     } \n     spawnObject ( spawnParams )  end  function   spawn_callback ( object_spawned ,   params ) \n     object_spawned . setName ( params . name )  end",
            "title": "spawnObject(...)"
        },
        {
            "location": "/base/#startluacoroutine",
            "text": "Returns Bool with the result of starting a coroutine. A coroutine is similar to a function, but has the unique ability to have its run paused until the next frame of the game using  coroutine.yield(0) .   Attention  You MUST return a 1 at the end of any coroutine or it will throw an error.    startLuaCoroutine(Object function_owner, String function_name)   Object function_owner : The Object that the function being called is on. Global is a valid target.  String function_name : The String containing the name of the function being called as a coroutine.    function   onLoad () \n     startLuaCoroutine ( Global ,   \"print_coroutine\" )  end  --Prints a message, waits 250 frames, prints another message  function   print_coroutine () \n     print ( \"Routine has Started\" ) \n     count   =   0 \n     while   count   <   250   do \n         count   =   count   +   1 \n         coroutine.yield ( 0 ) \n     end \n\n     print ( \"Routine has Finished\" ) \n\n     return   1  end",
            "title": "startLuaCoroutine(...)"
        },
        {
            "location": "/base/#stringcolortorgb",
            "text": "Returns Table  Color  requivilent to the Player Color string.   stringColorToRGB(String player_color)   String player_color  A String of a Player  Color .    printToAll ( \"Blue message\" ,   stringColorToRGB ( \"Blue\" ))",
            "title": "stringColorToRGB(...)"
        },
        {
            "location": "/object/",
            "text": "The Object class represents any entity within tabletop simulator. Once you have a reference to an object in youre script you can call functions on it directly. Example: \nobj.getPosition(...)\n. You can get a reference to an object multiple ways;\n\n\n\n\nUsing the \nself\n property if your object is on an object and referring to the object it is on.\n\n\nUsing \ngetObjectFromGUID(...)\n with the object's GUID (found by right clicking it with the pointer).\n\n\nGetting it as a return from another function, like with \nspawnObject(...)\n.\n\n\n\n\nMember Variable Summary\n\u00b6\n\n\nMember Variables\n\u00b6\n\n\nThese are variables that objects share. They allow for direct access to an Object's property information without a helping function. Some are read-only.\n\n\nExamples: \nisResting = self.resting\n or \nself.resting = true\n\n\n\n\n\n\n\n\nVariable Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nangular_drag\n\n\nA Float of an item's angular drag.\n\n\n\n\n\n\nauto_raise\n\n\nA Bool for if an object should be lifted above other objects to avoid collision when held by a player.\n\n\n\n\n\n\nbounciness\n\n\nA Float of bounciness.\n\n\n\n\n\n\ndrag\n\n\nA Float of drag.\n\n\n\n\n\n\ndynamic_friction\n\n\nA Float of dynamic friction.\n\n\n\n\n\n\ngrid_projection\n\n\nA Bool for if grid lines can appear on the object if visible grids are turned on.\n\n\n\n\n\n\nguid\n\n\nA String of the GUID, which is a 6 character unique object identifier within Tabletop Simulator.\n\n\n\n\n\n\nheld_by_color\n\n\nA String of Color of the Player that is holding the object.\n\n\n\n\n\n\ninteractable\n\n\nA Bool for if an object can be interacted with by Players. Other object will still be able to interact with it.\n\n\n\n\n\n\nmass\n\n\nA Float of the mass.\n\n\n\n\n\n\nname\n\n\nA String of the name. Read only, use \nsetName(\"\")\n to change names.\n\n\n\n\n\n\nresting\n\n\nA Bool for if an object is at rest.\n\n\n\n\n\n\nscript_code\n\n\nA String of the Lua Script on the object.\n\n\n\n\n\n\nscript_state\n\n\nA String of the saved data. See \nonSave()\n.\n\n\n\n\n\n\nstatic_friction\n\n\nA Float of static friction.\n\n\n\n\n\n\nsticky\n\n\nA Bool for if objects on top of this one are also picked up when this one is.\n\n\n\n\n\n\ntag\n\n\nA String of this object's type. Read only.\n\n\n\n\n\n\ntooltip\n\n\nA Bool for if the tooltip opens when a pointer hovers over the object. Tooltips display name and description.\n\n\n\n\n\n\nuse_gravity\n\n\nA Bool for if gravity affects this object.\n\n\n\n\n\n\nuse_grid\n\n\nA Bool for is snapping to grid is enabled or not.\n\n\n\n\n\n\nuse_hands\n\n\nA Bool for if this object can be held in a hand zone.\n\n\n\n\n\n\nuse_snap_points\n\n\nA Bool for if snap points are used or ignored.\n\n\n\n\n\n\n\n\nThese member variables are classes of their own, and have their own member variables for controlling specific elements of the type of object they are for.\n\n\n\n\n\n\n\n\nVariable Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAssetBundle\n\n\nAn \nAssetBundle\n, which is a type of custom object made in Unity.\n\n\n\n\n\n\nClock\n\n\nA \nClock\n, which is the in-game digital clock.\n\n\n\n\n\n\nCounter\n\n\nA \nCounter\n, which is the in-game digital counter.\n\n\n\n\n\n\nRPGFigurine\n\n\nAn \nRPGFigurine\n, which is an in-game animated figurine.\n\n\n\n\n\n\nTextTool\n\n\nA \nTextTool\n, which is an in-game text display system.\n\n\n\n\n\n\n\n\n\n\nFunction Summary\n\u00b6\n\n\nProperty Functions\n\u00b6\n\n\nTransform Functions\n\u00b6\n\n\nThese functions handle the position/rotation/scale/velocity of items. \n\n\nMaterial Functions\n\u00b6\n\n\nThese functions handle material transformation.\n\n\nUI Functions\n\u00b6\n\n\nThese functions allow for the creation/editing/removal of functional buttons and text inputs which themselves can trigger code within your scripts.\n\n\nObject Functions\n\u00b6\n\n\nFunction Details\n\u00b6",
            "title": "Object"
        },
        {
            "location": "/object/#member-variable-summary",
            "text": "",
            "title": "Member Variable Summary"
        },
        {
            "location": "/object/#member-variables",
            "text": "These are variables that objects share. They allow for direct access to an Object's property information without a helping function. Some are read-only.  Examples:  isResting = self.resting  or  self.resting = true     Variable Name  Description      angular_drag  A Float of an item's angular drag.    auto_raise  A Bool for if an object should be lifted above other objects to avoid collision when held by a player.    bounciness  A Float of bounciness.    drag  A Float of drag.    dynamic_friction  A Float of dynamic friction.    grid_projection  A Bool for if grid lines can appear on the object if visible grids are turned on.    guid  A String of the GUID, which is a 6 character unique object identifier within Tabletop Simulator.    held_by_color  A String of Color of the Player that is holding the object.    interactable  A Bool for if an object can be interacted with by Players. Other object will still be able to interact with it.    mass  A Float of the mass.    name  A String of the name. Read only, use  setName(\"\")  to change names.    resting  A Bool for if an object is at rest.    script_code  A String of the Lua Script on the object.    script_state  A String of the saved data. See  onSave() .    static_friction  A Float of static friction.    sticky  A Bool for if objects on top of this one are also picked up when this one is.    tag  A String of this object's type. Read only.    tooltip  A Bool for if the tooltip opens when a pointer hovers over the object. Tooltips display name and description.    use_gravity  A Bool for if gravity affects this object.    use_grid  A Bool for is snapping to grid is enabled or not.    use_hands  A Bool for if this object can be held in a hand zone.    use_snap_points  A Bool for if snap points are used or ignored.     These member variables are classes of their own, and have their own member variables for controlling specific elements of the type of object they are for.     Variable Name  Description      AssetBundle  An  AssetBundle , which is a type of custom object made in Unity.    Clock  A  Clock , which is the in-game digital clock.    Counter  A  Counter , which is the in-game digital counter.    RPGFigurine  An  RPGFigurine , which is an in-game animated figurine.    TextTool  A  TextTool , which is an in-game text display system.",
            "title": "Member Variables"
        },
        {
            "location": "/object/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/object/#property-functions",
            "text": "",
            "title": "Property Functions"
        },
        {
            "location": "/object/#transform-functions",
            "text": "These functions handle the position/rotation/scale/velocity of items.",
            "title": "Transform Functions"
        },
        {
            "location": "/object/#material-functions",
            "text": "These functions handle material transformation.",
            "title": "Material Functions"
        },
        {
            "location": "/object/#ui-functions",
            "text": "These functions allow for the creation/editing/removal of functional buttons and text inputs which themselves can trigger code within your scripts.",
            "title": "UI Functions"
        },
        {
            "location": "/object/#object-functions",
            "text": "",
            "title": "Object Functions"
        },
        {
            "location": "/object/#function-details",
            "text": "",
            "title": "Function Details"
        },
        {
            "location": "/assetbundle/",
            "text": "AssetBundle is a special \nObject\n type that has access to assetbundle related functions like looping and trigger effects. Once you have a reference to an Object you can call these functions like this: \nobj.AssetBundle.getLoopingEffects()\n.\n\n\nFunction Summary\n\u00b6\n\n\nObject Functions\n\u00b6\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngetLoopingEffectIndex()\n\n\nReturns the index of the currently looping effect.\n\n\n\n\n\n\ngetLoopingEffects()\n\n\nReturns a Table with the keys \"index\" and \"name\" for each looping effect.\n\n\n\n\n\n\ngetTriggerEffects()\n\n\nReturns a Table with the keys \"index\" and \"name\" for each trigger effect.\n\n\n\n\n\n\nplayLoopingEffect(Int index)\n\n\nStarts playing a looping effect. Index starts at 0.\n\n\n\n\n\n\nplayTriggerEffect(Int index)\n\n\nStarts playing a trigger effect. Index starts at 0.\n\n\n\n\n\n\n\n\n\n\nFunction Details\n\u00b6\n\n\ngetLoopingEffectIndex()\n\u00b6\n\n\nReturns the \nint\n of the index of the currently looping effect.\n\n\n    \nindex\n \n=\n \nself\n.\nAssetBundle\n.\ngetLoopingEffectIndex\n()\n\n\n\n\n\n\n\ngetLoopingEffects()\n\u00b6\n\n\nReturns a \ntable\n with the keys \"index\" and \"name\" for each looping effect.\n\n\n    \n--Example usage\n\n    \neffectTable\n \n=\n \nself\n.\nAssetBundle\n.\ngetLoopingEffects\n()\n\n\n\n\n    \n--Example returned table\n\n    \n{\n\n        \n{\nindex\n=\n0\n,\n \nname\n=\n\"Effect Name 1\"\n},\n\n        \n{\nindex\n=\n1\n,\n \nname\n=\n\"Effect Name 2\"\n},\n\n    \n}\n\n\n\n\n\n\ngetTriggerEffects()\n\u00b6\n\n\nReturns a \ntable\n with the keys \"index\" and \"name\" for each trigger effect.\n\n\n    \n--Example usage\n\n    \neffectTable\n \n=\n \nself\n.\nAssetBundle\n.\ngetTriggerEffects\n()\n\n\n\n\n    \n--Example returned table\n\n    \n{\n\n        \n{\nindex\n=\n0\n,\n \nname\n=\n\"Effect Name 1\"\n},\n\n        \n{\nindex\n=\n1\n,\n \nname\n=\n\"Effect Name 2\"\n},\n\n    \n}\n\n\n\n\n\n\nplayLoopingEffect(...)\n\u00b6\n\n\nStarts playing a looping effect. Indexes for AssetBundles start at 0.\n\n\n\n\nplayLoopingEffect(Int index)\n\n\n\n\nInt index\n: Numeric index for the effect.\n\n\n\n\n\n\n    \nself\n.\nAssetBundle\n.\nplayLoopingEffect\n(\n0\n)\n\n\n\n\n\n\n\nplayTriggerEffect(...)\n\u00b6\n\n\nStarts playing a trigger effect. Indexes for AssetBundles start at 0.\n\n\n\n\nplayTriggerEffect(Int index)\n\n\n\n\nInt index\n: Numeric index for the effect.\n\n\n\n\n\n\n    \nself\n.\nAssetBundle\n.\nplayTriggerEffect\n(\n0\n)",
            "title": "AssetBundle"
        },
        {
            "location": "/assetbundle/#function-summary",
            "text": "",
            "title": "Function Summary"
        },
        {
            "location": "/assetbundle/#object-functions",
            "text": "Function Name  Description      getLoopingEffectIndex()  Returns the index of the currently looping effect.    getLoopingEffects()  Returns a Table with the keys \"index\" and \"name\" for each looping effect.    getTriggerEffects()  Returns a Table with the keys \"index\" and \"name\" for each trigger effect.    playLoopingEffect(Int index)  Starts playing a looping effect. Index starts at 0.    playTriggerEffect(Int index)  Starts playing a trigger effect. Index starts at 0.",
            "title": "Object Functions"
        },
        {
            "location": "/assetbundle/#function-details",
            "text": "",
            "title": "Function Details"
        },
        {
            "location": "/assetbundle/#getloopingeffectindex",
            "text": "Returns the  int  of the index of the currently looping effect.       index   =   self . AssetBundle . getLoopingEffectIndex ()",
            "title": "getLoopingEffectIndex()"
        },
        {
            "location": "/assetbundle/#getloopingeffects",
            "text": "Returns a  table  with the keys \"index\" and \"name\" for each looping effect.       --Example usage \n     effectTable   =   self . AssetBundle . getLoopingEffects ()        --Example returned table \n     { \n         { index = 0 ,   name = \"Effect Name 1\" }, \n         { index = 1 ,   name = \"Effect Name 2\" }, \n     }",
            "title": "getLoopingEffects()"
        },
        {
            "location": "/assetbundle/#gettriggereffects",
            "text": "Returns a  table  with the keys \"index\" and \"name\" for each trigger effect.       --Example usage \n     effectTable   =   self . AssetBundle . getTriggerEffects ()        --Example returned table \n     { \n         { index = 0 ,   name = \"Effect Name 1\" }, \n         { index = 1 ,   name = \"Effect Name 2\" }, \n     }",
            "title": "getTriggerEffects()"
        },
        {
            "location": "/assetbundle/#playloopingeffect",
            "text": "Starts playing a looping effect. Indexes for AssetBundles start at 0.   playLoopingEffect(Int index)   Int index : Numeric index for the effect.         self . AssetBundle . playLoopingEffect ( 0 )",
            "title": "playLoopingEffect(...)"
        },
        {
            "location": "/assetbundle/#playtriggereffect",
            "text": "Starts playing a trigger effect. Indexes for AssetBundles start at 0.   playTriggerEffect(Int index)   Int index : Numeric index for the effect.         self . AssetBundle . playTriggerEffect ( 0 )",
            "title": "playTriggerEffect(...)"
        }
    ]
}